<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Krazy Kevin</title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://krazycavin.github.io/tags/testing/</link>
    <language>en-us</language>
    
    
    <updated>Tue, 02 May 2017 20:35:50 CEST</updated>
    
    <item>
      <title>Refine Software Testing Types</title>
      <link>https://krazycavin.github.io/2017/05/02/refine-software-testing-types/</link>
      <pubDate>Tue, 02 May 2017 20:35:50 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/05/02/refine-software-testing-types/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://krazycavin.github.io/images/testing-types-wordcloud.png&#34; alt=&#34;wordcloud&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Software Testing is a huge topic. The types of software testing are enormous. Tons of terminologies and syllabuses could make people feel sick. A small example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When I say &amp;ldquo;Integration Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;You may interpret as &amp;ldquo;Functional Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;Your tester friend may think it&amp;rsquo;s &amp;ldquo;Accessibility Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;Your developer buddy may consider it as &amp;ldquo;Regression Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;Your PO bro may see it as &amp;ldquo;Automated Testing&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actually we are more or less talking about the same thing. We misunderstand each other because we think from different perspectives.&lt;/p&gt;

&lt;p&gt;In order to make less confusion, I try to refine software testing types using 5 different categories. These categories represent each perspective. In other words, they are independent of each other. They are &lt;strong&gt;How&lt;/strong&gt;, &lt;strong&gt;When&lt;/strong&gt;, &lt;strong&gt;Who&lt;/strong&gt;, &lt;strong&gt;What&lt;/strong&gt; and &lt;strong&gt;Which&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;1.1) &lt;strong&gt;How&lt;/strong&gt; does structure look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;White/Glass box/Structural Testing,
Black box/Functional Testing,
Gray box Testing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.2) &lt;strong&gt;How&lt;/strong&gt; does system perform:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Non-functional Testing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
2) &lt;strong&gt;When&lt;/strong&gt; in software development life cycle (SDLC):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Unit Testing, Component Testing,
Integration/Integrated Testing, System Testing,
Acceptance Testing, Alpha Testing, Beta Testing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
3) &lt;strong&gt;Who&lt;/strong&gt; is involved in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Manual Testing, Automated Testing, Pair Testing,
Mob Testing, Team Testing, Dogfooding,
Crowdsourced Testing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
4) &lt;strong&gt;What&lt;/strong&gt; is to test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;E2E/Workflow Testing, Usability Testing, Security Testing,
Performance Testing, Accessibility Testing...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
5) &lt;strong&gt;Which&lt;/strong&gt; approach is using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Exploratory Testing, Fuzz Testing,
Boundary Value Testing, Sanity Testing, Smoke Testing,
(Non-)Regression Testing, Monkey Testing...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s back to the beginning when I say &amp;ldquo;Integration Testing&amp;rdquo;&amp;hellip; and see if it makes things clear.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1) How: Functional
2) When: Integration
3) Who: Automated
4) What: Accessibility
5) Whch: Regression
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
Finally we have a buzz word &lt;code&gt;Functional Integration Automated Accessbility Regression Testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What do you think? üí°‚ùóÔ∏è or üêÆüí©?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I Do Exploratory Testing</title>
      <link>https://krazycavin.github.io/2017/04/17/how-i-do-exploratory-testing/</link>
      <pubDate>Mon, 17 Apr 2017 22:30:00 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/04/17/how-i-do-exploratory-testing/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*UZ_21MTQrfOwJbixUgik4w.jpeg&#34; alt=&#34;explore&#34; /&gt;
&lt;sup&gt;&lt;em&gt;from &lt;a href=&#34;https://www.flickr.com/photos/kwl/3573458354/in/photostream/&#34;&gt;Kenny Louie&lt;/a&gt;&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Children are born naturalists. They explore the world with all of their senses, experiment in the environment, and communicate their discoveries to those around them.&amp;rdquo; &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;what-is-et&#34;&gt;What is ET?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;E&lt;/strong&gt;xploratory &lt;strong&gt;T&lt;/strong&gt;esting is the nature of testing&lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. The pure beauty of ET is that it starts without specific test plan and tester comes up with ideas or assumptions during testing execution. Then test design and test execution happen at the same time. It&amp;rsquo;s the true symphony of efficiency!&lt;/p&gt;

&lt;h3 id=&#34;what-is-my-understanding-of-et&#34;&gt;What is my understanding of ET?&lt;/h3&gt;

&lt;p&gt;For me, ET is an elegant testing approach with &lt;strong&gt;free spirit&lt;/strong&gt;, to &lt;strong&gt;think&lt;/strong&gt; about different possibilities, to &lt;strong&gt;discover&lt;/strong&gt; the unknown, to &lt;strong&gt;collect&lt;/strong&gt; effective information and to &lt;strong&gt;share&lt;/strong&gt; new knowledge efficiently.&lt;/p&gt;

&lt;h3 id=&#34;what-is-my-practice-of-et&#34;&gt;What is my practice of ET?&lt;/h3&gt;

&lt;p&gt;Since the beginning of last year when &lt;a href=&#34;https://krazycavin.github.io/2017/01/21/why-i-failed-to-use-calabash-for-mobile-testing/&#34;&gt;I failed to use calabash for mobile testing&lt;/a&gt;, I mainly focus on improving my ET skill. I want to establish a practice for the purpose: &lt;strong&gt;To have a concrete structure of ET and to adapt change easily based on it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Combining the purpose and my understanding, I tried some practices and made some changes. It becomes the current one I&amp;rsquo;m satisfied with. First of all, please remember it&amp;rsquo;s definitely &lt;strong&gt;not&lt;/strong&gt; the &amp;ldquo;best practice&amp;rdquo;. I still keep striving for a better practice, your feedback could help me as well üòâ&lt;/p&gt;

&lt;p&gt;Back to my practice of ET, each time I proceed with 3 important stages (a.k.a. 3G stages): &lt;strong&gt;Get context&lt;/strong&gt;, &lt;strong&gt;Go explore&lt;/strong&gt;, and &lt;strong&gt;Give feedback&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;stage-1-get-context&#34;&gt;Stage 1: Get context&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Time estimation&lt;/strong&gt;: 15 min&lt;/p&gt;

&lt;p&gt;On this stage, the key is to &lt;strong&gt;think different&lt;/strong&gt;. By asking PO, stakeholder, designer, developer, etc&amp;hellip; who already have the information of context. For instance, if the testing target is a new feature:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To understand the &lt;strong&gt;problem&lt;/strong&gt; behind: What&amp;rsquo;s the problem to solve?&lt;/li&gt;
&lt;li&gt;To understand the &lt;strong&gt;request&lt;/strong&gt; of developing this feature: What&amp;rsquo;s the acceptable result look like?&lt;/li&gt;
&lt;li&gt;To understand the detail of &lt;strong&gt;implementation&lt;/strong&gt;: Which kind of user cases are considered and checked already?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this information in mind, I will &lt;strong&gt;think&lt;/strong&gt; about that the implementation does not only meet the request, but also provide the functionality to solve the problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementation versus Request: What are the misunderstandings and ambiguities?&lt;/li&gt;
&lt;li&gt;Implementation versus Problem: What are the blind spots and missing checks, could potentially cause the risk of malfunction?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Normally I prefer to take some factors and put them in the questions, in order to generate some testing ideas. Some factors could be considered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Environment: region, timezone, language&amp;hellip;&lt;/li&gt;
&lt;li&gt;Hardware: device, platform, OS, screen size&amp;hellip;&lt;/li&gt;
&lt;li&gt;Aspect: usability, security, performance&amp;hellip;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Region x Implementation versus Request: Does this feature need to be available for all customers or only for a specific region?
OS x Implementation versus Problem: Does this feature work on iOS 7 devices?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
Then I will put the ideas or assumptions shortly on a to-do list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Testing ideas:
[ ] Support all regions?
[ ] iOS 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;stage-2-go-explore&#34;&gt;Stage 2: Go explore&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Time box&lt;/strong&gt;: 30 min&lt;/p&gt;

&lt;p&gt;This stage is the most exciting one. The key is to &lt;strong&gt;discover&lt;/strong&gt; and to &lt;strong&gt;collect&lt;/strong&gt;. Before stating exploring, a time box is rather important, which forces me to proceed with the next steps. Otherwise, I could probably explore forever far around and way deeper.&lt;/p&gt;

&lt;p&gt;Remember the to-do list earlier I got in the first stage? Now it&amp;rsquo;s time to make hands dirty using the ideas, I call them seeds, as initial starting points to discover the unknown. Following and focusing on one seed to perform some checks, I will start to collect new seeds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relate to current seed, add as a child seed&lt;/li&gt;
&lt;li&gt;Not relate to current seed, add as a new seed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once I got a finding or a question, I will make a quick note with necessary screenshot and video record.&lt;/p&gt;

&lt;p&gt;After one seed is finished, I will continue to explore anther seed. One seed at a time, seed by seed until timeout. You probably have a question in your mind &amp;ldquo;When one seed is done, what to pick as the next seed?&amp;rdquo; I&amp;rsquo;ve a rule of thumb for priority: seed on top of the list has higher priority to explore.&lt;/p&gt;

&lt;p&gt;After 30 min, my to-do list looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;Testing ideas:
[?] Support all regions?
    [x] Europe
    [?] Asia: no response from api
        =&amp;gt; Question 1
[-] iOS 7
    =&amp;gt; Issue 1
[-] No interent
    [x] Error message
    [x] retry when internet is back
    [x] app restart when no internet
[?] Animation
    =&amp;gt; Question 2
[ ] Performace of new api request?

Question 1: need api response for Asia?
Need check with backend team: this feature is not available for Asia users?
&amp;lt;Screenshot of api request and response&amp;gt;

Quesiion 2: Refresh animation feels laggy
Need check with designer and developer: make a nicer animation

Issue 1: crash on iOS 7
&amp;lt;device info&amp;gt;
- &amp;lt;step 1&amp;gt;
- &amp;lt;step 2&amp;gt;
- &amp;lt;step 3&amp;gt;
&amp;lt;crash stack traces&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;stage-3-give-feedback&#34;&gt;Stage 3: Give feedback&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Time estimation&lt;/strong&gt;: 15 min&lt;/p&gt;

&lt;p&gt;The key of this stage is to &lt;strong&gt;share knowledge&lt;/strong&gt;. I&amp;rsquo;ve some questions and issues on my list collected from previous stage and I know who I need to contact. Can I just throw my feedback on their face directly? I hope I can but apparently nope.&lt;/p&gt;

&lt;p&gt;Regarding the questions, it needs to have a proper conversation to remove misunderstandings and ambiguities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What&amp;rsquo;s my opinion and suggestion?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s your opinion and suggestion?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding the issues, it needs to have a proper discussion to evaluate the risk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What can be fixed?&lt;/li&gt;
&lt;li&gt;What is out of scope?&lt;/li&gt;
&lt;li&gt;What needs to be improved in the future?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-else&#34;&gt;What else?&lt;/h3&gt;

&lt;p&gt;Basically it&amp;rsquo;s the core part of my lovely ET practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3G stages: Get context, Go explore and Give feedback&lt;/li&gt;
&lt;li&gt;4 actions: Think, Discover, Collect and Share&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although there are still a lot of topics I&amp;rsquo;d like to expand, I don&amp;rsquo;t want to make one post too long too boring. I will probably write &lt;strong&gt;a series of ET topics&lt;/strong&gt; in the future, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to think different and some factors to consider?&lt;/li&gt;
&lt;li&gt;How to collect and share findings efficiently?&lt;/li&gt;
&lt;li&gt;How to shorten feedback loop in development?&lt;/li&gt;
&lt;li&gt;How to train myself be always ready to be interrupted?&lt;/li&gt;
&lt;li&gt;How to pair with developers?&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/3o6Zthv4W72jUHRCUg/giphy.gif&#34; alt=&#34;out&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Testing is like holding a torch to light up the road in darkness. You could clearly see the way to go, make a map, and mark thorns and flowers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://www.anshome.org/index.php/nature-programs/children-family/audubon-nature-preschool&#34;&gt;Audubon Nature Preschool&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://www.kaner.com/pdfs/QAIExploring.pdf&#34;&gt;Cem Kaner: A Tutorial in Exploratory Testing&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nobody Asks Me Questions but I&#39;ve Some Answers</title>
      <link>https://krazycavin.github.io/2017/01/13/nobody-asks-me-questions-but-i-give-some-answers/</link>
      <pubDate>Fri, 13 Jan 2017 17:20:53 &#43;0200</pubDate>
      
      <guid>https://krazycavin.github.io/2017/01/13/nobody-asks-me-questions-but-i-give-some-answers/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*S4QCcKz1OmopX580Q2X_Vg.jpeg&#34; alt=&#34;qa&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So far no one asks me any of questions I post below because it&amp;rsquo;s so obvious that I&amp;rsquo;m not interviewed, I&amp;rsquo;m not a speaker, I&amp;rsquo;m not a celebrity in software testing&amp;hellip; But in &lt;strong&gt;edge case&lt;/strong&gt; in the future, there is a little chance that someone would ask me these questions. In this case, the answers are provided even without asking. How awesome it is ¬Ø\_(„ÉÑ)_/¬Ø&lt;/p&gt;

&lt;p&gt;I start these 3 questions from this interview &lt;a href=&#34;https://ukstar.eurostarsoftwaretesting.com/meet-ukstar-speaker-cassandra-leung/&#34;&gt;Meet UKSTAR Speaker ‚Äì Cassandra Leung&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-did-you-get-started-in-software-testing&#34;&gt;How did you get started in software testing?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://i.giphy.com/HVr4gFHYIqeti.gif&#34; alt=&#34;adventure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I can say 90% tester has a particular journey to start software testing adventure. I&amp;rsquo;m no exception.&lt;/p&gt;

&lt;p&gt;As a freshman in Bio-Engineering, I didn&amp;rsquo;t expect at all that my profession would be related to software testing.&lt;/p&gt;

&lt;p&gt;To start my journey on software testing is a beautiful coincidence I had in my life. I&amp;rsquo;ve a master degree of Biomedical in medical imaging area. As a hobby, I learned some programming skills by myself. Luckily, my diploma and my skills helped me to get an internship in a medical software company. I was in the software department and my mission is to build a web management tool.&lt;/p&gt;

&lt;p&gt;After 8 months, the employer was quite happy about the outcomes of my internship. At that moment, they were searching for a new developer who can write scripts to build an in-house test automation framework and writing test cases. Luckily, I was chosen to start my adventure in software testing, as a SDET.&lt;/p&gt;

&lt;h3 id=&#34;who-inspires-you&#34;&gt;Who inspires you?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://i.giphy.com/JpMv34oxICQrS.gif&#34; alt=&#34;sylar&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m inspired by a lot of awesome people. I&amp;rsquo;ve a list of these brilliant people, from whom I would like to steal their brains (I&amp;rsquo;m serious üëø). In software testing, I will name &lt;a href=&#34;https://twitter.com/michaelbolton&#34;&gt;Micheal Bolton&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/lisacrispin&#34;&gt;Lisa Crispin&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/testobsessed&#34;&gt;Elisabeth Hendrickson&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/dnlkntt&#34;&gt;Daniel Knott&lt;/a&gt;. If you know them, please send them my thanks and I&amp;rsquo;m coming for them soon ‚ò∫Ô∏è&lt;/p&gt;

&lt;h3 id=&#34;what-do-you-see-for-the-future-of-software-testing&#34;&gt;What do you see for the future of software testing?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/8IXEHur.gif&#34; alt=&#34;everyone&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For me, it&amp;rsquo;s a difficult question. Although my ability of prediction sucks, I&amp;rsquo;m predicting that the future of software testing is &lt;strong&gt;everyone performs small testing habitually&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The traditional checkpoint style testing will be sliced to some small tiny pieces. They&amp;rsquo;ll be performed continually by every team members in daily development, no matter programmed checking or manual testing.&lt;/p&gt;

&lt;p&gt;Everyone takes care of testing and everyone does it habitually, even not testers. It&amp;rsquo;s a real challenge for the whole team to perform testing habitually, and also a huge challenge for testers to think how to help the whole team to perform testing habitually without testers. As a current trend, testers are shifted around. This movement of testers will bring the seeds of testing knowledge to different people in different job positions.&lt;/p&gt;

&lt;h3 id=&#34;to-be-continued&#34;&gt;&lt;em&gt;(To be continued&amp;hellip;)&lt;/em&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Have Some Fun! Team Testing</title>
      <link>https://krazycavin.github.io/2016/12/01/lets-have-some-fun-team-exploratory-testing/</link>
      <pubDate>Thu, 01 Dec 2016 21:37:35 &#43;0200</pubDate>
      
      <guid>https://krazycavin.github.io/2016/12/01/lets-have-some-fun-team-exploratory-testing/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*sonAggQw-dsCFHGrcozMfg.jpeg&#34; alt=&#34;devices&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Testing is something that we do with the motivation of finding new information.&amp;rdquo; &amp;ndash; Michael Bolton&lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;damn-old-picture-of-team-testing&#34;&gt;&lt;strong&gt;Damn old picture of team testing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;When we talk about team testing, I guess many of you will image a picture in your mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;People are sitting around a table.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Everyone gets a paper in front of them. This paper could be a check list full of test steps, could be a sheet full of test scenarios&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When testing starts, people follow same test cases on the paper, step by step &amp;ldquo;testing&amp;rdquo; product.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Soon, People look like a robot: they look at paper and write down the answer &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;expected result&amp;rdquo;, &amp;ldquo;pass&amp;rdquo;, &amp;ldquo;no&amp;rdquo;&amp;hellip; Someone will collect paper and check pass/fail&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, pretty like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.qalogictesting.com/wp-content/uploads/2015/06/dtest.jpg&#34; alt=&#34;&#34; /&gt;&lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m always asking myself. If I&amp;rsquo;m one of these guys participating this the kind of team testing, would I be bored to die? What&amp;rsquo;s the problem here?&lt;/p&gt;

&lt;p&gt;Why not make team testing like taking a challenge, playing a game, exploring around?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://oscarandpatch.co.uk/image_uploads_mce/testing-team.jpg&#34; alt=&#34;&#34; /&gt;&lt;sup&gt;&lt;a name=&#34;back3&#34;&gt;&lt;a href=&#34;#link3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;let-s-have-some-fun&#34;&gt;&lt;strong&gt;Let&amp;rsquo;s have some fun!&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&#34;people-are-sitting-around-a-table-nope&#34;&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;People are sitting around a table.&amp;rdquo;&lt;/em&gt; Nope! üôÖ&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Instead of limiting people to focus on his own stuff, I really like to make people pair together and let them share a &amp;ldquo;test challenge&amp;rdquo;. They can do testing together no mater where they want. Paring together in team testing is a good test strategy for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Making comparison&lt;/strong&gt;: when it needs to know if different platforms, different versions have different behaviors&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Exchanging idea&lt;/strong&gt;: when someone comes an idea, (s)he can immediately try with her/his testing partner&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Remembering findings&lt;/strong&gt;: when something found, (s)he can show to her/his partner how to reproduce&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Training newcomer&lt;/strong&gt;: when a new team member is joining, (s)he is not quite familiar with product&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;everyone-gets-a-paper-in-front-of-them-this-paper-could-be-a-check-list-full-of-test-steps-could-be-a-sheet-full-of-test-scenarios-nope&#34;&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;Everyone gets a paper in front of them. This paper could be a check list full of test steps, could be a sheet full of test scenarios&amp;hellip;&amp;rdquo;&lt;/em&gt; Nope! üôÖ&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;In my team testing, there is no check list, no test scenarios. I call them &lt;strong&gt;mission&lt;/strong&gt; and &lt;strong&gt;challenge&lt;/strong&gt;. My thought here: Do exploring, not checking, because exploring is more exciting. I prefer to describe simply a challenge in one sentence using &lt;strong&gt;CAR&lt;/strong&gt; model (it&amp;rsquo;s the first name comes into my mind&amp;hellip;). CAR stands for &lt;strong&gt;C&lt;/strong&gt;ondition,  &lt;strong&gt;A&lt;/strong&gt;ction and &lt;strong&gt;R&lt;/strong&gt;esult. A simple example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ondition: GPS on&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;ction:  open app&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;esult: my current location shown&lt;/p&gt;

&lt;p&gt;Then the challenge is: When phone GPS turned on, I open app, should I see my current location shown correctly?&lt;/p&gt;

&lt;p&gt;For a 30min testing session, in a mission, 10-15 challenges are recommended. Above 15 is too much, because when people are getting tired, no fun :(&lt;/p&gt;

&lt;h4 id=&#34;when-testing-starts-people-follow-same-test-cases-on-the-paper-step-by-step-nope&#34;&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;When testing starts, people follow same test cases on the paper, step by step&amp;hellip;&amp;rdquo;&lt;/em&gt; Nope! üôÖ&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Using CAR model, it&amp;rsquo;s easy to remove useless test steps and to modify them dynamically according to tests.&lt;/p&gt;

&lt;p&gt;For example, we&amp;rsquo;re focusing on a new feature to reserve vehicle from vehicle list. Then the challenge is: &lt;strong&gt;When my test account is logged in, I pick a vehicle in list, should I be able to reserve vehicle?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If next time, we want to test general reservation function. Then the challenge is: &lt;strong&gt;When my test account is logged in, I pick a vehicle in list or on map, should I be able to reserve vehicle?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Or it can be separated into 2 challenges:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When my test account is logged in, I pick a vehicle in list, should I be able to reserve vehicle?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When my test account is logged in, I pick a vehicle on map, should I be able to reserve vehicle?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And I will put them to the different &lt;strong&gt;missions&lt;/strong&gt; for different participants.&lt;/p&gt;

&lt;h4 id=&#34;soon-people-look-like-a-robot-they-look-at-paper-and-write-down-the-answer-someone-will-collect-paper-and-check-pass-fail-nope&#34;&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;Soon, People look like a robot: they look at paper and write down the answer&amp;hellip; Someone will collect paper and check pass/fail&amp;rdquo;&lt;/em&gt; Nope! üôÖ&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Usually I setup a simple finding-wall, like blow:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;             iOS     |    Android
Major                |
Minor                |
?                    |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Column: platform&lt;/p&gt;

&lt;p&gt;Row: major findings, minor findings and unclear findings (needs to discuss)&lt;/p&gt;

&lt;p&gt;All participants will put findings on the wall during team testing. After testing, they will be taken down one by one and fixed one by one.&lt;/p&gt;

&lt;p&gt;If you ask me how about those mission-paper? I will destroy them immediately after testing and let it be a secret mission.&lt;/p&gt;

&lt;h3 id=&#34;expected-result&#34;&gt;&lt;strong&gt;Expected result&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;After participating this team exploratory testing, you will probably think &amp;ldquo;I&amp;rsquo;d like to test more next time!&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; Michael Bolton: &lt;a href=&#34;http://www.developsense.com/blog/2009/08/testing-vs-checking/&#34;&gt;Testing vs. Checking&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://www.qalogictesting.com/wp-content/uploads/2015/06/dtest.jpg&#34;&gt;Damn round table team testing&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link3&#34;&gt;&lt;a href=&#34;#back3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://oscarandpatch.co.uk/image_uploads_mce/testing-team.jpg&#34;&gt;Children play around&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
