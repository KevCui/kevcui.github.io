<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Krazy Kevin</title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://krazycavin.github.io/</link>
    <language>en-us</language>
    
    
    <updated>Tue, 11 Jul 2017 20:57:53 CEST</updated>
    
    <item>
      <title>2 CSS Effect Libraries for Creating Fancy Animations</title>
      <link>https://krazycavin.github.io/2017/07/11/css-effect-libraries-for-creating-fancy-animations/</link>
      <pubDate>Tue, 11 Jul 2017 20:57:53 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/07/11/css-effect-libraries-for-creating-fancy-animations/</guid>
      <description>

&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*fXBo56b0tanSCNHo4O2eWw.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;sup&gt;
        &lt;em&gt;
            from &lt;a href=&#34;https://unsplash.com/photos/5Ntkpxqt54Y&#34;&gt;Sai Kiran Anagani Vijayawada&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;


&lt;p&gt;Animation is fun. It makes everything look vivid. A good animation is that you won&amp;rsquo;t notice its existence but it pleases your eyes and makes you feel good!&lt;/p&gt;

&lt;p&gt;To see fancy animations is really enjoyable, but to make it is not. Specially for me, a CSS -webkit newbie, creating animations with CSS is a dirty job. It needs a lot of guess work and experiments to archive the expect results. Fortunately, there are many interesting CSS effect libraries could support me to fulfill the mission. I would like to recommend 2 useful CSS libraries, which helped me to create &amp;ldquo;fancy&amp;rdquo; animations efficiently. All the codes below can be found in my &lt;a href=&#34;https://github.com/KrazyCavin/uno&#34;&gt;hugo-uno&lt;/a&gt; theme repository.&lt;/p&gt;

&lt;h3 id=&#34;hover-css&#34;&gt;hover.css&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ianlunn.github.io/Hover/&#34;&gt;Hover.css&lt;/a&gt; is a great CSS library. It contains almost all hover effects. On the demo site, all possible animations are well presented. Once you got your favorite one, the implication is easy. You could either go straight forward to include the whole library and add the class name in the HTML tags. Or you could search for the effect inside the raw CSS file and then copy that part into your CSS file. The last step is to add animation class name in HTML tag. It&amp;rsquo;s a piece of cake. These are stylish animations I picked and what they look like:&lt;/p&gt;

&lt;h4 id=&#34;bubble-left-right&#34;&gt;&lt;strong&gt;Bubble left &amp;amp; right&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://krazycavin.github.io/images/prev_next.gif&#34; alt=&#34;prev-next&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;underline-from-left&#34;&gt;&lt;strong&gt;Underline from left&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://krazycavin.github.io/images/hover.gif&#34; alt=&#34;hover&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;bounce-to-right&#34;&gt;&lt;strong&gt;Bounce to right&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://krazycavin.github.io/images/title_animation.gif&#34; alt=&#34;bounce&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t mock me because of my bad animation taste. Once you know how to do it, then you would apply it everywhere. It&amp;rsquo;s never too fancy, right?&lt;/p&gt;

&lt;h3 id=&#34;animate-css&#34;&gt;animate.css&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://daneden.github.io/animate.css/&#34;&gt;animate.css&lt;/a&gt; is a super-star CSS library for creating page transitions. Almost all basic (PowerPoint style?) page transitions can be found in this library. The usage is simple. First of all, it needs to include animate.css in your project, file or hosted link as you prefer. Then you only need to add class name animated and effect name in HTML tag.&lt;/p&gt;

&lt;p&gt;But I didn&amp;rsquo;t use this fixed way. I want to add animation dynamically with jQuery. For example, I did for of articles fade-in appearing on post summary page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#39;article&#39;).addClass(&#39;animated fadeIn&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://krazycavin.github.io/images/fadein.gif&#34; alt=&#34;article&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You may notice that there is a delay of fade-in effect. It&amp;rsquo;s a CSS trick. Actually, I set a 0.2s interval between the presences of 2 articles:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;article:nth-child(2) {
  animation-delay: 0.2s;
}
article:nth-child(3) {
  animation-delay: 0.4s;
}
article:nth-child(4) {
  animation-delay: 0.6s;
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Et voilà, 2 powerful CSS libraries get fancymation job done. During my small &amp;ldquo;weekend project&amp;rdquo;, I added other animations for my blog. I had a fun time playing around CSS for animations. Furthermore, I&amp;rsquo;m happy that I learned how to use 2 awesome CSS libraries, which I could share with you here. #AnimateAlltheThings!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book Review: The DevOps Handbook</title>
      <link>https://krazycavin.github.io/2017/07/04/book-review-the-devops-handbook/</link>
      <pubDate>Tue, 04 Jul 2017 19:35:28 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/07/04/book-review-the-devops-handbook/</guid>
      <description>

&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*aQ6VuapHdv713A677HYPkw.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;


&lt;h3 id=&#34;something-interesting&#34;&gt;😀 Something interesting&lt;/h3&gt;

&lt;h4 id=&#34;deployment-lead-time&#34;&gt;Deployment Lead Time&lt;/h4&gt;

&lt;p&gt;DevOps focuses on optimizing &amp;ldquo;deployment lead time&amp;rdquo;. The definition of &amp;ldquo;deployment lead time&amp;rdquo; is not explained clearly in this book. As my understanding, a lead time is a latency between the initiation and execution of a process, then &amp;ldquo;deployment lead time&amp;rdquo; should be the time between deployment initiation is required and the product in production.&lt;/p&gt;

&lt;h4 id=&#34;the-three-ways&#34;&gt;The Three Ways&lt;/h4&gt;

&lt;p&gt;As described in the book, The Phoenix Project presents &lt;a href=&#34;https://itrevolution.com/the-three-ways-principles-underpinning-devops/&#34;&gt;the Three Ways&lt;/a&gt; as the principles underpinning DevOps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The technical practices of flow&lt;/strong&gt;: it enables fast left-to-right flow of work from Devs to Ops, so that value can be quickly and safely delivered to customers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The technical practices of feedback&lt;/strong&gt;: it enables the fast and constant flow of feedback from right to left at all stages of the value stream.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The technical practices of continual learning and experimentation&lt;/strong&gt;: it enables the creation of a culture of learning and experimentation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I see the 3 ways as 3 focuses in different phases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: Build a right pipeline&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improvement&lt;/strong&gt;: Get quick feedback to adjust pipeline to a right direction&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interaction&lt;/strong&gt;: Create a culture to learn from experimentation, to increase safety&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;appendices&#34;&gt;Appendices&lt;/h4&gt;

&lt;p&gt;I found the appendices in this book are quite interesting. Appendices contain copious additional materials with short descriptions. Some of them are worth to know more. Then I search for some additional information and list them here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://setandbma.wordpress.com/2012/03/23/agile-history/&#34;&gt;History of movements&lt;/a&gt;: the Lean movement, the Agile movement, the Agile infrastructure and velocity movement, the Continues Delivery movement, the Toyota Kata movement, the Lean Startup movement, the Lean UX movement&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iploca.com/platform/content/element/24312/ErikHollnagel-SafetyMyths.pdf&#34;&gt;Some myths of industrial safety&lt;/a&gt;: by revealing 5 common myths about safety, it guides people to think different types of outcomes: adverse outcomes and successful outcomes. Furthermore, it introduces 2 types of safety defined by 2 different perspectives: &amp;ldquo;no lack of safety&amp;rdquo; or &amp;ldquo;resilient safety management&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itrevolution.com/kata/&#34;&gt;The Toyota Andon Cord&lt;/a&gt;: it&amp;rsquo;s one of the quality control method invented by Toyota. Andon Cord is a notify system with signal lights hanging on the cord. When a defect was suspected in the production line, the worker should light up the signal and the whole system will be stopped. By stopping the system, you will get an immediate opportunity for improvement, or solving the root cause.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/netflix-techblog/the-netflix-simian-army-16e57fbab116&#34;&gt;The Netflix Simian Army&lt;/a&gt;: based on the idea of &lt;a href=&#34;https://en.wikipedia.org/wiki/Monkey_testing&#34;&gt;monkey testing&lt;/a&gt;, Netflix built an army of &amp;ldquo;skilled monkeys&amp;rdquo;. Once these monkeys are unleashed, they will start to randomly disable the service and destroy the system. It&amp;rsquo;s an interesting way to test the robustness of service and system. One day, these monkeys cannot cause any noticeable troubles, you will trust that your system is fail-safe.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;something-boring&#34;&gt;🙈 Something boring&lt;/h3&gt;

&lt;h4 id=&#34;lack-of-depth&#34;&gt;Lack of depth&lt;/h4&gt;

&lt;p&gt;After finishing this book, my first feeling is &amp;ldquo;This book could go deeper&amp;rdquo;. The true ideas and thoughts are heavily covered by quotes and stories. Actually, stories are good and interesting, but they are used in the book so often like the case study, instead of being used to explain a conception. Some chapters are based on one shallow story. After reading one chapter, I could only roughly tell the story. What about the idea behind it? It was not expressed clearly. At the end, I feel more like &amp;ldquo;emh.. ok&amp;hellip;&amp;rdquo;. The surprise, which I expected from this book at the beginning, is missing.&lt;/p&gt;

&lt;p&gt;Maybe it&amp;rsquo;s the purpose to go breadth by throwing conceptions without deeper explanations, in order to cover more readers.&lt;/p&gt;

&lt;h4 id=&#34;repeated-terms&#34;&gt;Repeated Terms&lt;/h4&gt;

&lt;p&gt;This is maybe only my personal OCD. Some terms appearing repeatedly make me feel annoyed. It happens at the very beginning of the book. For example, &amp;ldquo;Product owners, development, QA, IT Operation and Infosec&amp;hellip;&amp;rdquo; This chain of terms appears at least twice on some pages. Once I noticed it, I totally faint out&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;something-for-future&#34;&gt;🔮 Something for future&lt;/h3&gt;

&lt;p&gt;For me, this book is an introduction to DevOps world. I think there are many valuable things to learn in DevOps. Therefore, I will continue to take a look at other interesting DevOps books. Perhaps I would pick first another book from the same author. It&amp;rsquo;s called &lt;a href=&#34;https://www.amazon.de/Phoenix-Project-DevOps-Helping-Business/dp/0988262509/ref=sr_1_1?ie=UTF8&amp;amp;qid=1499117368&amp;amp;sr=8-1&amp;amp;keywords=the+phoenix+project&#34;&gt;&amp;ldquo;The Phoenix Project&amp;rdquo;&lt;/a&gt;. It&amp;rsquo;s an interesting novel and I trust the author&amp;rsquo;s storytelling skill.&lt;/p&gt;

&lt;h3 id=&#34;recommendation&#34;&gt;👉 Recommendation&lt;/h3&gt;

&lt;p&gt;Who do I recommend to read &amp;ldquo;The DevOps Handbook&amp;rdquo;?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Someone knows nothing about DevOps, like John Snow&lt;/li&gt;
&lt;li&gt;Someone has huge resource to manage and wants to create a great company culture&lt;/li&gt;
&lt;li&gt;Someone is doing DevOps but blocked and needs some decent ideas&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bad Use of A Good Tool</title>
      <link>https://krazycavin.github.io/2017/06/27/bad-use-of-a-good-tool/</link>
      <pubDate>Tue, 27 Jun 2017 21:43:23 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/06/27/bad-use-of-a-good-tool/</guid>
      <description>

&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*Y7unAywBRkUxr51nVx_kvg.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;sup&gt;
        &lt;em&gt;
            from &lt;a href=&#34;https://www.flickr.com/photos/clumsyjim/1907979770/&#34;&gt;Jim&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;If all you have is a hammer, everything looks like a nail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every sprint, we have a team testing session with one hour fixed time slot. It&amp;rsquo;s a team-fun-thing for all team members to try out new features. I take the honor to &lt;a href=&#34;https://krazycavin.github.io/2016/12/01/lets-have-some-fun-team-exploratory-testing/&#34;&gt;organize this testing party&lt;/a&gt;. But unfortunately, the last sprint I failed to prepare test devices in time, which causes that the team testing didn&amp;rsquo;t end very well. I feel shame for it. I ask myself why it happened? After I think again and again, one thing I could tell is because of &lt;strong&gt;my bad use of a good tool&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-good-tool&#34;&gt;A good tool&lt;/h3&gt;

&lt;p&gt;Undeniably, &lt;a href=&#34;https://www.charlesproxy.com/&#34;&gt;Charles&lt;/a&gt; is an excellent debugging proxy. It&amp;rsquo;s powerful and handy. With a clean UI and easy setup, it becomes my daily tool. I rely on it to inspect HTTP/HTTPS requests and response, set breakpoints, simulate response status, mock response, bandwidth throttling, etc&amp;hellip;&lt;/p&gt;

&lt;p&gt;Naturally, more I use it, more I like it; More I will use it, then I will like it more&amp;hellip;.&lt;/p&gt;

&lt;h3 id=&#34;bad-use&#34;&gt;Bad use&lt;/h3&gt;

&lt;p&gt;One day, I tried &lt;a href=&#34;https://www.charlesproxy.com/documentation/tools/rewrite/&#34;&gt;rewrite tool&lt;/a&gt; in Charles to replace a simple JSON API response by some mock data. I found surprisingly that it worked very well. Since that, I started to add more and more rewriting rules for this and that&amp;hellip; Nowadays the set of rewriting rules becomes really complex. The mock data I used to replace response which started from the beginning as 4 lines, until now the entire content of a 4K file!&lt;/p&gt;

&lt;p&gt;Sometimes I complain &amp;ldquo;Why Charles gives users only 1-line input filed for replacing stuff. It&amp;rsquo;s not possible to edit long text. How bad design it is!&amp;rdquo; Now I think it again and I have to admit that Charles is not designed for that. I use it wrongly. I should use it as a simple match-replace function for some strings, that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;Another mistake I made is to treat it as a proxy server. Usually, I connect 1 Android and 1 iOS device to Charles proxy. But the craziest time, like last team testing, I ran Charles with heavy mock data and planned to setup the connection of 10+ mobile devices. The connection was not stable at all. The half of devices were disconnected frequently.&lt;/p&gt;

&lt;p&gt;As it&amp;rsquo;s named as &amp;ldquo;debugging proxy&amp;rdquo;, it&amp;rsquo;s unfair for it to support 10+ devices &amp;ldquo;debugging&amp;rdquo; at the same time.&lt;/p&gt;

&lt;h3 id=&#34;right-tool-for-the-job&#34;&gt;Right tool for the job&lt;/h3&gt;

&lt;p&gt;Charles proxy is not a snake oil for manipulating http requests. It has its pros and cons. In my case, I need a proxy tool to mock response data heavily and to change mock data easily, meanwhile it should also provide stable connections of massive mobile devices for testing. Charles is a good tool for sure, but in this case, it&amp;rsquo;s not the right tool for my need.&lt;/p&gt;

&lt;p&gt;I have to search for a proper solution. I find that &lt;a href=&#34;https://mitmproxy.org/&#34;&gt;mitmproxy&lt;/a&gt; could be a candidate to try out. Because of open-source and the support of customized python script, it would be flexible to adapt all kinds of situations. All I need to do is to make scripts to fulfill my need. I like making my hands dirty. Luckily, mitmproxy provides a good &lt;a href=&#34;http://docs.mitmproxy.org/en/stable/&#34;&gt;documentation&lt;/a&gt; and nice &lt;a href=&#34;https://discourse.mitmproxy.org/&#34;&gt;forums&lt;/a&gt;. At the end, it&amp;rsquo;s not too hard to write &lt;a href=&#34;https://github.com/KrazyCavin/mitm-rewrite-script&#34;&gt;mitm-rewrite-script&lt;/a&gt;, which provides me the function I need.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Tools are designed to help us to deal with the problems. Depends on the different situations and the strength &amp;amp; weakness of tools, I have to think carefully and decide which one to use. Probably mitmproxy is my new proxy-hammer, but I won&amp;rsquo;t see everything like a nail. Once I decided that it is a good time to use Charles properly, I would say loudly and confidently &amp;ldquo;&lt;strong&gt;I choose you, Charles!&lt;/strong&gt;&amp;ldquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I&#39;m A Tester &amp; I&#39;m A Rubber Duck</title>
      <link>https://krazycavin.github.io/2017/06/20/i-am-a-rubber-duck/</link>
      <pubDate>Tue, 20 Jun 2017 21:28:30 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/06/20/i-am-a-rubber-duck/</guid>
      <description>

&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*EbZDvsozz270lIhuAibaCg.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;sup&gt;
        &lt;em&gt;
            from &lt;a href=&#34;https://www.flickr.com/photos/silvia-m/34764790472/in/photolist-UY3D2b-9zw2em-hSV-8XAvVA&#34;&gt;Silvia Maggi&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I&amp;rsquo;ll be there for you, like I&amp;rsquo;ve been there before; I&amp;rsquo;ll be there for you, &amp;lsquo;Cause you&amp;rsquo;re there for me too.&amp;rdquo; &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m a tester. When a developer talks to me, I see myself as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Rubber_duck_debugging&#34;&gt;rubber duck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A rubber duck? Why not Winnie-the-Pooh, Pikachu or Minion? Because the color doesn&amp;rsquo;t matter 😉 But other things do matter.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a tester, a rubber duck, you are a developer.&lt;/p&gt;

&lt;h3 id=&#34;be-close-to-you&#34;&gt;Be close to you&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m a rubber duck, not an occasional bath toy. I will be bored to float in the water with soap bubbles, meanwhile showing my duck face to who is singing in the tub.&lt;/p&gt;

&lt;p&gt;I choose to stay close to you. You can easily reach me whenever you need me, no matter when you are happy, excited, bored, confused, dispirited&amp;hellip; And I&amp;rsquo;m always prepared for any talks. I keep calm and be ready to support you to solve any problems.&lt;/p&gt;

&lt;h3 id=&#34;listen-to-you&#34;&gt;Listen to you&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m a rubber duck, not a noisy quak-quak. I&amp;rsquo;m patient to listen before I talk. I&amp;rsquo;ll stay silent and become a decent listener, like the initial method of &lt;em&gt;&amp;ldquo;rubber duck problem solving&amp;rdquo;&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;For me as a tester, I feel good to understand the context and background of the solution.&lt;/p&gt;

&lt;p&gt;For you as a developer, you feel good to speak out loudly what you are now debugging, how you plan to resolve the problem, why thing didn&amp;rsquo;t work at the first place&amp;hellip; All I want to do is listening to you and waiting for your Aha! moment. I like this magic moment, which comes suddenly during talking.&lt;/p&gt;

&lt;h3 id=&#34;probe-your-thinking&#34;&gt;Probe your thinking&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m a rubber duck, not a piece of rubber-like plastic. I&amp;rsquo;m better than a rubber duck cause I&amp;rsquo;m able to ask questions.&lt;/p&gt;

&lt;p&gt;I learned to be good at questioning. But I never question your qualification. Because I know that a good developer is a problem-solving genius. And I believe &lt;em&gt;&amp;ldquo;a junior developer is code focused; a senior developer provides solutions to problems&amp;rdquo;&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back3&#34;&gt;&lt;a href=&#34;#link3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes when you are facing pretty complicated problems, you wracked your brain but all the ideas are towards to the dead end. I&amp;rsquo;ll ask you questions &lt;strong&gt;to encourage further thought&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes when you are facing really easy problems, they can immediately offer solutions 1, 2 and 3&amp;hellip; without a second thought. I&amp;rsquo;ll ask you questions &lt;strong&gt;to clarify the real problem&lt;/strong&gt; and &lt;strong&gt;to guide you to a proper solution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a tester &amp;amp; a rubber duck, you are a developer.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m staying with you, you can use me as your reliable coding buddy.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m listening to you, you can show me your professional skill.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m encouraging you to think, you can tell me your awesome thought.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m there for you, you get my full support. 👊&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; The Rembrandts: &lt;a href=&#34;https://www.youtube.com/watch?v=q-9kPks0IfE&#34;&gt;I&amp;rsquo;ll be there for you&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; Jeff Atwood: &lt;a href=&#34;https://blog.codinghorror.com/rubber-duck-problem-solving/&#34;&gt;Rubber Duck Problem Solving&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link3&#34;&gt;&lt;a href=&#34;#back3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt; Matt Briggs: &lt;a href=&#34;http://mattbriggs.net/blog/2015/06/01/the-role-of-a-senior-developer/&#34;&gt;The Role of a Senior Developer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo x Github Pages</title>
      <link>https://krazycavin.github.io/2017/06/18/hugo-github-pages/</link>
      <pubDate>Sun, 18 Jun 2017 15:55:09 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/06/18/hugo-github-pages/</guid>
      <description>

&lt;p&gt;It has been 2 months since I switched &lt;a href=&#34;https://krazycavin.github.io/2017/04/12/why-hugo-why-not-hexo/&#34;&gt;from Hexo to Hugo&lt;/a&gt;. Everything went smoothly. Until yesterday, I made a small mistake. I messed up my entire blog Git repository, then I have to reconfigure the part of deploying Hugo website to Github Pages&amp;hellip;&lt;/p&gt;

&lt;p&gt;To be honest, the initial configuration is simple but I cannot recall it at all. That&amp;rsquo;s why I finally decide to write down this quick note, for the forgetful people, like me.&lt;/p&gt;

&lt;p&gt;Hugo has a good doc to explain &lt;a href=&#34;https://gohugo.io/tutorials/github-pa-blog/&#34;&gt;how to host on Github Pages&lt;/a&gt;. Based on it, my configuration is following:&lt;/p&gt;

&lt;h3 id=&#34;add-worktree&#34;&gt;Add Worktree&lt;/h3&gt;

&lt;p&gt;Basally, I created 2 repositories for my blog. One is the theme I used, it&amp;rsquo;s called &lt;a href=&#34;https://github.com/KrazyCavin/uno&#34;&gt;uno&lt;/a&gt;. The other one is for both posts and generated static files. Its name is &lt;a href=&#34;https://github.com/KrazyCavin/krazycavin.github.io&#34;&gt;krazycavin.github.io&lt;/a&gt;, a name predefined by Github Pages. I decide the put them in one repository because it&amp;rsquo;s easy to maintenance. I separated them into 2 different branches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Branch &lt;strong&gt;hugo&lt;/strong&gt;: posts, assets&amp;hellip;&lt;/li&gt;
&lt;li&gt;Branch &lt;strong&gt;master&lt;/strong&gt;: public/ folder with all the generated static files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then I need to link the &lt;strong&gt;public/&lt;/strong&gt; to &lt;strong&gt;master&lt;/strong&gt; branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf public
rm -rf ./worktrees
git worktree add -B master public origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-deploy-script&#34;&gt;Create deploy script&lt;/h3&gt;

&lt;p&gt;Here is my deploy script &lt;a href=&#34;https://github.com/KrazyCavin/krazycavin.github.io/blob/hugo/deploy.sh&#34;&gt;deploy.sh&lt;/a&gt;. The theme I&amp;rsquo;m using is &lt;a href=&#34;https://github.com/KrazyCavin/uno&#34;&gt;uno&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh

# Build the project with theme
hugo -t uno

# Go To Public folder
cd public

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
    then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time after running the script deploy.sh, it will generate new static files and push them to master branch. The changes will be published immediately by Github Pages.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all, a piece of 🍰&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Refine Software Testing Types</title>
      <link>https://krazycavin.github.io/2017/05/02/refine-software-testing-types/</link>
      <pubDate>Tue, 02 May 2017 20:35:50 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/05/02/refine-software-testing-types/</guid>
      <description>&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://krazycavin.github.io/images/testing-types-wordcloud.png&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;


&lt;p&gt;Software Testing is a huge topic. The types of software testing are enormous. Tons of terminologies and syllabuses could make people feel sick. A small example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When I say &amp;ldquo;Integration Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;You may interpret as &amp;ldquo;Functional Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;Your tester friend may think it&amp;rsquo;s &amp;ldquo;Accessibility Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;Your developer buddy may consider it as &amp;ldquo;Regression Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;Your PO bro may see it as &amp;ldquo;Automated Testing&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actually we are more or less talking about the same thing. We misunderstand each other because we think from different perspectives.&lt;/p&gt;

&lt;p&gt;In order to make less confusion, I try to refine software testing types by using 5 different categories. Each categories represent one perspective. In other words, they are independent of each other. These categories are &lt;strong&gt;How&lt;/strong&gt;, &lt;strong&gt;When&lt;/strong&gt;, &lt;strong&gt;Who&lt;/strong&gt;, &lt;strong&gt;What&lt;/strong&gt; and &lt;strong&gt;Which&lt;/strong&gt;. Then I put testing types one by one into each category, E.g:&lt;/p&gt;

&lt;p&gt;1.1) &lt;strong&gt;How&lt;/strong&gt; does structure look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;White/Glass box/Structural Testing,
Black box/Functional Testing,
Gray box Testing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.2) &lt;strong&gt;How&lt;/strong&gt; does system perform:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Non-functional Testing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
2) &lt;strong&gt;When&lt;/strong&gt; in software development life cycle (SDLC):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Unit Testing, Component Testing,
Integration/Integrated Testing, System Testing,
Acceptance Testing, Alpha Testing, Beta Testing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
3) &lt;strong&gt;Who&lt;/strong&gt; is involved in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Manual Testing, Automated Testing, Pair Testing,
Mob Testing, Team Testing, Dogfooding,
Crowdsourced Testing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
4) &lt;strong&gt;What&lt;/strong&gt; is to test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;E2E/Workflow Testing, Usability Testing, Security Testing,
Performance Testing, Accessibility Testing...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
5) &lt;strong&gt;Which&lt;/strong&gt; approach is using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Exploratory Testing, Fuzz Testing,
Boundary Value Testing, Sanity Testing, Smoke Testing,
(Non-)Regression Testing, Monkey Testing...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s back to the beginning when I say &amp;ldquo;Integration Testing&amp;rdquo;&amp;hellip; and see if it makes things clear.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1) How: Functional
2) When: Integration
3) Who: Automated
4) What: Accessibility
5) Whch: Regression
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
Finally we have a buzz word&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Functional Integration Automated Accessbility Regression Testing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
What do you think? 💡❗️ or 🐮💩?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Be prepared! Interruption is coming!</title>
      <link>https://krazycavin.github.io/2017/04/29/be-prepared-interruption-is-coming/</link>
      <pubDate>Sat, 29 Apr 2017 21:25:25 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/04/29/be-prepared-interruption-is-coming/</guid>
      <description>

&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*A4g-4mSEERgcCJAU9aoiBQ.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;sup&gt;
        &lt;em&gt;
            from &lt;a href=&#34;https://www.flickr.com/photos/toolstop/4546017269/in/photolist-7VHwy6-7T3sBx-pvPtJf-nywY2v-9qrj88-f6gPjy-9J1BdE-8eB9zK-eTJxN4-fvp6xs-697QaY-kQEJ5Z-8j199M-2ar2Sb-8j1944-nRvec8-5oDgFr-nC1Kzp-ANtt56-nZ9Y9G-7a4QsY-miwiuT-qLGJw2-Sg25Nb-6bUidP-frHAzg-nzWYLx-rFgD9r-7pNK4V-drfRNk-5se7vP-pGvU4T-a7Wjjq-s6nuVQ-8oVLCo-9DvfFb-5NLEtK-oJAqmx-q7mtBs-4ViWX-guzccR-6bMfa9-6bUiut-8Rw2LS-5PhERM-9YfCgz-8RvU6t-obqmkU-9tntU6-kQJtL1&#34;&gt;Mark Hunter&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;By failing to prepare, you are preparing to fail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently I read an interesting article about &lt;a href=&#34;https://dev.to/andrewlucker/why-do-programmers-wear-headphones-for-the-same-reason-that-you-cantjuggle&#34;&gt;Why do programmers wear headphones?&lt;/a&gt;. The truth is that &lt;em&gt;&amp;ldquo;programmers are easily distracted, headphones eliminate some distractions, thus headphones make programmers.&amp;rdquo;&lt;/em&gt; To reduce losing attention by distractions, I could improve my attention span and control the working environment around myself. But on the other hand, I could lose my attention as well by interruptions, which are usually unexpected. What can I do to deal with them?&lt;/p&gt;

&lt;h3 id=&#34;distraction-or-interruption&#34;&gt;Distraction or Interruption?&lt;/h3&gt;

&lt;p&gt;First of all, what is the difference between distraction and interruption?&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;distraction&lt;/strong&gt; is something that draws one’s attention away from what they are supposed to be paying attention to, &lt;strong&gt;entirely unintentionally&lt;/strong&gt;.&lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; For example, when you&amp;rsquo;re coding, a beautiful/handsome visitor passes by the office, you&amp;rsquo;re distracted by her/his charm&amp;hellip;&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;interruption&lt;/strong&gt; is something that draws one’s attention away from what they are supposed to be paying attention to, &lt;strong&gt;entirely on purpose&lt;/strong&gt;.&lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; For example, when you&amp;rsquo;re coding, a beautiful/handsome visitor comes to your desk and asks you out for a coffee, you&amp;rsquo;re interrupted by her/his question&amp;hellip;&lt;/p&gt;

&lt;p&gt;Unintentionally or on purpose, although they all result to draws your attention away, distraction is initiative and interruption is passive.&lt;/p&gt;

&lt;h3 id=&#34;prevent-interruptions&#34;&gt;Prevent interruptions?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nairaland.com/attachments/2890469_dnd_jpeg06641fdcae1a92def0a73687ba3231bb&#34; alt=&#34;disturb&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;em&gt;image from &lt;a href=&#34;http://www.nairaland.com/2621018/not-disturb-programmer&#34;&gt;₦airaland Forum&lt;/a&gt;&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Why not we just prevent interruptions like preventing distractions? Lock ourself in a room and hang &amp;ldquo;Do Not Disturb!&amp;rdquo; sign outside the door? Well, we can isolate ourself by being inside our ideal bubble. But as we know, interruptions are made on purpose, sometimes they provide useful information that we need to adapt the changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An urgent business decision is made, it needs me to discuss and change requirements now.&lt;/li&gt;
&lt;li&gt;An abnormal app crash rate happens in production, it needs me to analyze root cause now.&lt;/li&gt;
&lt;li&gt;A new feature is testable, it needs me to pair testing with developers now.&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In these cases, I cannot just simply avoid them, I have to pay attention to handle with them. &amp;ldquo;Do Not Disturb&amp;rdquo; could surely gain my focus but I will definitely lose my agility.&lt;/p&gt;

&lt;h3 id=&#34;be-prepared-to-embrace-interruptions&#34;&gt;Be prepared to embrace interruptions&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://c1.staticflickr.com/3/2039/2721654446_2baea3ef82.jpg&#34; alt=&#34;open&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;em&gt;image from &lt;a href=&#34;https://www.flickr.com/photos/thebirdwells/2721654446/in/photostream/&#34;&gt;bryan birdwell&lt;/a&gt;&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Instead of preventing interruptions, why not be prepared to embrace interruptions? It sounds interesting, right? But how? &lt;a href=&#34;http://hearthstone.gamepedia.com/Violet_Teacher&#34;&gt;Pay attention, class! Instruction begins!&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-continuous-focus-and-defocus&#34;&gt;1. Continuous Focus and Defocus&lt;/h4&gt;

&lt;p&gt;Focus makes me efficient, productive. Defocus makes me relax and creative.&lt;/p&gt;

&lt;p&gt;Due to human&amp;rsquo;s natural, we have an &lt;a href=&#34;https://en.wikipedia.org/wiki/Attention_span&#34;&gt;attention span&lt;/a&gt;: the amount of concentrated time one can spend on a task without becoming distracted. I know my attention span is 30 minutes. It means that I have to switch to defocus state after maximum 30 minutes focus. Even I can force myself focusing. The result will turn into inefficiency and tiredness.&lt;/p&gt;

&lt;p&gt;Based on my attention span, similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/Pomodoro_Technique&#34;&gt;Pomodoro technique&lt;/a&gt;, I use 25 minutes to focus on one of my tasks and then I give myself 5 minutes break as a reward. After a break, I restart again 25 minutes focusing on a task and then again a 5 minutes defocus&amp;hellip;&lt;/p&gt;

&lt;p&gt;Imagine if I work for 8 hours, in theory, I have 16 break time. These 16 break time are perfectly prepared for interruptions.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re only short tasks, there is an ultimate version for you, it&amp;rsquo;s called &lt;a href=&#34;http://www.43folders.com/2005/10/11/procrastination-hack-1025&#34;&gt;procrastination hack&lt;/a&gt; &lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. Basically, a loop of focus and defocus is shirking to 10+2, then you&amp;rsquo;ll perform 5 loops in one hour (10+2)*5. So in 8 hours, 40 break time in total!&lt;/p&gt;

&lt;p&gt;When interruption comes during my defocus time, without the impact of interruption, I can easily engage myself in other high priority tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous focus and defocus reduce the impact of interruptions.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-short-refocus-time&#34;&gt;2. Short Refocus Time&lt;/h4&gt;

&lt;p&gt;No one can plan his life perfectly. Sometimes when the interruption comes, I&amp;rsquo;m still focusing on my task! 💩 happens. The reason why people hate interruption so much is not only that interruption draws attention away, but also that it takes a long time to go back to flow. If you could get back to flow in seconds, probably you will feel that interruption is only a kind of annoying, but not really hateful. Therefore, a short refocus time is rather important.&lt;/p&gt;

&lt;p&gt;I find a way to gain refocus easily and it works quite well for me. First I will take one deep breath, and then I will cast a magical spell: &amp;ldquo;What am I doing now?&amp;rdquo;. By taking a deep breath, I can control my emotion and empty my mind. By questioning myself as a psychological hint, it helps me to focus on the question first, then the focus will be moving back to the task.&lt;/p&gt;

&lt;p&gt;By the way, recently I discovered another spell which does the same psychological trick, &amp;ldquo;I Am One With the Focus and the Focus Is With Me&amp;rdquo;. But I cannot use that because I cannot resist 😆&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A short refocus time reduces the hatred of interruptions.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;interruption-is-coming&#34;&gt;Interruption is coming!&lt;/h3&gt;

&lt;p&gt;Talk of the devil and he is sure to appear. Before you finished reading this post, I guess you&amp;rsquo;ve probably been distracted or interrupted at least once. Take it easy, it&amp;rsquo;s totally normal. Remember interruption brings changes and challenges on purpose; Remember continuous focus and defocus makes you have more than ease for interruptions; Remember improving refocus time makes you feel comfortable to embrace interruptions.&lt;/p&gt;

&lt;p&gt;Brace yourself, interruption is coming!&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://www.samatters.com/distractions-and-interruptions-whats-the-difference/&#34;&gt;Distractions and Interruptions&amp;hellip; What’s the Difference?&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; Zeger Van Hese: &lt;a href=&#34;https://youtu.be/Fcf2iVY1eA0?t=24m33s&#34;&gt;Testing in the Age of Distraction&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tweet Pinboard: January 2017 - April 2017</title>
      <link>https://krazycavin.github.io/2017/04/23/tweet-pinboard_01-052017/</link>
      <pubDate>Sun, 23 Apr 2017 11:19:25 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/04/23/tweet-pinboard_01-052017/</guid>
      <description>&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Bug &amp;lt;-&amp;gt; Debug&lt;br&gt;Test &amp;lt;-&amp;gt; Detest&lt;br&gt;&lt;br&gt;Is that a kind of coincidence?&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/814838322891804672&#34;&gt;December 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;1. 🎥: 👯🐇💨🚶㊙🚪🐈🐛👒🍵👸👰👑♠♥♣♦😴&lt;br&gt;&lt;br&gt;2. 📺: 🐺🐯🐲💮🐙🐟... 👑❤💔🔞🔥💥🔪... 💀😱💀💀😱😱💀💀💀😶💀💀💀💀💀...&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/816692325833461760&#34;&gt;January 4, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Declare variables not war,&lt;br&gt;Get bugs fixed not mindset.&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/820378849225609218&#34;&gt;January 14, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A tool for work:&lt;br&gt;20 years ago, a tool is a tool.&lt;br&gt;10 years ago, a tool is a software.&lt;br&gt;5 years ago, a tool is a website.&lt;br&gt;Now a tool is an app.&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/820702959260565509&#34;&gt;January 15, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Dear DEVils,&lt;br&gt;During my absence, you&amp;#39;re authorised to use my tool for testing purpose. Any abuses are welcome.&lt;br&gt;Happy testing!&lt;br&gt;Xoxo, TESTERia &lt;a href=&#34;https://t.co/yNht8lnPDG&#34;&gt;pic.twitter.com/yNht8lnPDG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/824309415851466752&#34;&gt;January 25, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A good news without &amp;quot;but&amp;quot; is a perfect good news.&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/826085227512500224&#34;&gt;January 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;In theory there is no difference between theory and practice. In practice there is.&amp;quot; 😉&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/826429344088100865&#34;&gt;January 31, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Wisely and slowly; they stumble that run fast.&amp;quot;&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/837361764492771329&#34;&gt;March 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Best practice only exists for someone at certain period of time. Not everyone, not always.&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/841716053046644737&#34;&gt;March 14, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;🤣 true &lt;a href=&#34;https://t.co/6S8jT0ZkX6&#34;&gt;https://t.co/6S8jT0ZkX6&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/841953703812861953&#34;&gt;March 15, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Oh I&amp;#39;m capable of suffering all small revertable changes &amp;amp; working on piece by piece, in order to make the world a better place🙏 &lt;a href=&#34;https://twitter.com/hashtag/AgilityGod?src=hash&#34;&gt;#AgilityGod&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/842787425541865472&#34;&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Testing is not about finding bugs. It&amp;#39;s about exploring unknown area, resolving ambiguity and leaning new things. 1/2&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/843906547273097216&#34;&gt;March 20, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Like holding a troch to light up the road in darkness, you could clearly see the way to go,  make a map,  and mark thorns and flowers. 2/2&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/843911859287871490&#34;&gt;March 20, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Checking is not about finding bugs. It&amp;#39;s about verifying expectation, feeling confidence of working things and killing time. 1/2&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/843914267355217920&#34;&gt;March 20, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Like holding a map in daylight, you&amp;#39;re guided to avoid known obstacles, confident of your ability and ready for the next journey, again. 2/2&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/843915943373930496&#34;&gt;March 20, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;🤷 let me guess it&amp;#39;s a part of How to reduce cost and assure phone call quality. ISTQB = I Swear That&amp;#39;s Quite Boring&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/848280133999804416&#34;&gt;April 1, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Junior XXX: I want a job even it&amp;#39;s shitty&lt;br&gt;Senior XXX: I don&amp;#39;t want a shitty job, no!&lt;br&gt;Expert XXX: I want to do some shitty things as my job 😉&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/851867342976028673&#34;&gt;April 11, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Agility stops when HiPPO starts.&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/852536634155335680&#34;&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Certification is a decent purchase invoice. &lt;a href=&#34;https://t.co/QgXh9a6aaF&#34;&gt;https://t.co/QgXh9a6aaF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kevin 👊 (@KevCui) &lt;a href=&#34;https://twitter.com/KevCui/status/855715620377243649&#34;&gt;April 22, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I Do Exploratory Testing</title>
      <link>https://krazycavin.github.io/2017/04/17/how-i-do-exploratory-testing/</link>
      <pubDate>Mon, 17 Apr 2017 22:30:00 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/04/17/how-i-do-exploratory-testing/</guid>
      <description>

&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*UZ_21MTQrfOwJbixUgik4w.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;sup&gt;
        &lt;em&gt;
            from &lt;a href=&#34;https://www.flickr.com/photos/kwl/3573458354/in/photostream/&#34;&gt;Kenny Louie&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Children are born naturalists. They explore the world with all of their senses, experiment in the environment, and communicate their discoveries to those around them.&amp;rdquo; &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;what-is-et&#34;&gt;What is ET?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;E&lt;/strong&gt;xploratory &lt;strong&gt;T&lt;/strong&gt;esting is the nature of testing&lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. The pure beauty of ET is that it starts without specific test plan and tester comes up with ideas or assumptions during testing execution. Then test design and test execution happen at the same time. It&amp;rsquo;s the true symphony of efficiency!&lt;/p&gt;

&lt;h3 id=&#34;what-is-my-understanding-of-et&#34;&gt;What is my understanding of ET?&lt;/h3&gt;

&lt;p&gt;For me, ET is an elegant testing approach with a &lt;strong&gt;free spirit&lt;/strong&gt;, to &lt;strong&gt;think&lt;/strong&gt; about different possibilities, to &lt;strong&gt;discover&lt;/strong&gt; the unknown, to &lt;strong&gt;collect&lt;/strong&gt; effective information and to &lt;strong&gt;share&lt;/strong&gt; new knowledge efficiently.&lt;/p&gt;

&lt;h3 id=&#34;what-is-my-practice-of-et&#34;&gt;What is my practice of ET?&lt;/h3&gt;

&lt;p&gt;Since the beginning of last year when &lt;a href=&#34;https://krazycavin.github.io/2017/01/21/why-i-failed-to-use-calabash-for-mobile-testing/&#34;&gt;I failed to use Calabash for mobile testing&lt;/a&gt;, I mainly focus on improving my ET skill. I want to establish a practice for the purpose: &lt;strong&gt;To have a concrete structure of ET and to adapt change easily based on it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Combining the purpose and my understanding, I tried some practices and made some changes. It becomes the current one I&amp;rsquo;m satisfied with. First of all, please remember it&amp;rsquo;s definitely &lt;strong&gt;not&lt;/strong&gt; the &amp;ldquo;best practice&amp;rdquo;. I still keep striving for a better practice, your feedback could help me as well 😉&lt;/p&gt;

&lt;p&gt;Back to my practice of ET, each time I proceed with 3 important stages (a.k.a. 3G stages): &lt;strong&gt;Get context&lt;/strong&gt;, &lt;strong&gt;Go explore&lt;/strong&gt; and &lt;strong&gt;Give feedback&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;stage-1-get-context&#34;&gt;Stage 1: Get context&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Time estimation&lt;/strong&gt;: 15 min&lt;/p&gt;

&lt;p&gt;On this stage, the key is to &lt;strong&gt;think different&lt;/strong&gt;. By asking PO, stakeholder, designer, developer, etc&amp;hellip; who already have the information of context. For instance, if the testing target is a new feature:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To understand the &lt;strong&gt;problem&lt;/strong&gt; behind: What&amp;rsquo;s the problem to solve?&lt;/li&gt;
&lt;li&gt;To understand the &lt;strong&gt;request&lt;/strong&gt; of developing this feature: What&amp;rsquo;s the acceptable result look like?&lt;/li&gt;
&lt;li&gt;To understand the detail of &lt;strong&gt;implementation&lt;/strong&gt;: Which kind of user cases are considered and checked already?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this information in mind, I will &lt;strong&gt;think&lt;/strong&gt; about that the implementation does not only meet the request but also provide the functionality to solve the problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementation versus Request: What are the misunderstandings and ambiguities?&lt;/li&gt;
&lt;li&gt;Implementation versus Problem: What are the blind spots and missing checks, could potentially cause the risk of malfunction?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Normally I prefer to take some factors and put them in the questions, in order to generate some testing ideas. Some factors could be considered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Environment: region, timezone, language&amp;hellip;&lt;/li&gt;
&lt;li&gt;Hardware: device, platform, OS, screen size&amp;hellip;&lt;/li&gt;
&lt;li&gt;Aspect: usability, security, performance&amp;hellip;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Region x Implementation versus Request: Does this feature need to be available for all customers or only for a specific region?
OS x Implementation versus Problem: Does this feature work on iOS 7 devices?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
Then I will put the ideas or assumptions shortly on a to-do list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Testing ideas:
[ ] Support all regions?
[ ] iOS 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;stage-2-go-explore&#34;&gt;Stage 2: Go explore&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Timebox&lt;/strong&gt;: 30 min&lt;/p&gt;

&lt;p&gt;This stage is the most exciting one. The key is to &lt;strong&gt;discover&lt;/strong&gt; and to &lt;strong&gt;collect&lt;/strong&gt;. Before starting exploring, a time box is rather important, which forces me to proceed with the next steps. Otherwise, I could probably explore forever far around and way deeper.&lt;/p&gt;

&lt;p&gt;Remember the to-do list earlier I got in the first stage? Now it&amp;rsquo;s time to make hands dirty using the ideas, I call them seeds, as initial starting points to discover the unknown. Following and focusing on one seed to perform some checks, I will start to collect new seeds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relate to current seed, add it as a child seed&lt;/li&gt;
&lt;li&gt;Not relate to current seed, add it as a new seed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once I got a finding or a question, I will make a quick note with the necessary screenshot and video record.&lt;/p&gt;

&lt;p&gt;After one seed is finished, I will continue to explore anther seed. One seed at a time, seed by seed until timeout. You probably have a question in your mind &amp;ldquo;When one seed is done, what to pick as the next seed?&amp;rdquo; I have a rule of thumb for priority: seed on top of the list has higher priority to explore.&lt;/p&gt;

&lt;p&gt;After 30 min, my to-do list looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;Testing ideas:
[?] Support all regions?
    [x] Europe
    [?] Asia: no response from API
        =&amp;gt; Question 1
[-] iOS 7
    =&amp;gt; Issue 1
[-] No interent
    [x] Error message
    [x] retry when internet is back
    [x] app restart when no internet
[?] Animation
    =&amp;gt; Question 2
[ ] Performace of new API request?

Question 1: need API response for Asia?
Need check with backend team: this feature is not available for Asia users?
&amp;lt;Screenshot of API request and response&amp;gt;

Question 2: Refresh animation feels laggy
Need check with designer and developer: make a nicer animation

Issue 1: crash on iOS 7
&amp;lt;device info&amp;gt;
- &amp;lt;step 1&amp;gt;
- &amp;lt;step 2&amp;gt;
- &amp;lt;step 3&amp;gt;
&amp;lt;crash stack traces&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;stage-3-give-feedback&#34;&gt;Stage 3: Give feedback&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Time estimation&lt;/strong&gt;: 15 min&lt;/p&gt;

&lt;p&gt;The key to this stage is to &lt;strong&gt;share knowledge&lt;/strong&gt;. I&amp;rsquo;ve some questions and issues on my list collected from the previous stage and I know who I need to contact. Can I just throw my feedback on their face directly? I hope I can but apparently nope.&lt;/p&gt;

&lt;p&gt;Regarding the questions, it needs to have a proper conversation to remove misunderstandings and ambiguities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What&amp;rsquo;s my opinion and suggestion?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s your opinion and suggestion?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding the issues, it needs to have a proper discussion to evaluate the risk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What can be fixed?&lt;/li&gt;
&lt;li&gt;What is out of scope?&lt;/li&gt;
&lt;li&gt;What needs to be improved in the future?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-else&#34;&gt;What else?&lt;/h3&gt;

&lt;p&gt;Basically, it&amp;rsquo;s the core part of my lovely ET practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3G stages: Get context, Go explore and Give feedback&lt;/li&gt;
&lt;li&gt;4 actions: Think, Discover, Collect and Share&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although there are still a lot of topics I&amp;rsquo;d like to expand, I don&amp;rsquo;t want to make one post too long too boring. I will probably write &lt;strong&gt;a series of ET topics&lt;/strong&gt; in the future, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to think different and some factors to consider?&lt;/li&gt;
&lt;li&gt;How to collect and share findings efficiently?&lt;/li&gt;
&lt;li&gt;How to shorten feedback loop in development?&lt;/li&gt;
&lt;li&gt;How to train myself be always ready to be interrupted?&lt;/li&gt;
&lt;li&gt;How to pair with developers?&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/3o6Zthv4W72jUHRCUg/giphy.gif&#34; alt=&#34;out&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Testing is like holding a torch to light up the road in darkness. You could clearly see the way to go, make a map, and mark thorns and flowers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://www.anshome.org/index.php/nature-programs/children-family/audubon-nature-preschool&#34;&gt;Audubon Nature Preschool&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://www.kaner.com/pdfs/QAIExploring.pdf&#34;&gt;Cem Kaner: A Tutorial in Exploratory Testing&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Hugo Why Not Hexo</title>
      <link>https://krazycavin.github.io/2017/04/12/why-hugo-why-not-hexo/</link>
      <pubDate>Wed, 12 Apr 2017 22:47:26 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/04/12/why-hugo-why-not-hexo/</guid>
      <description>

&lt;p&gt;As you probably remember that I just about &lt;a href=&#34;https://krazycavin.github.io/2017/02/26/why-hexo-why-not-jekyll/&#34;&gt;switched from jekyll to hexo&lt;/a&gt; 2 months ago, now I&amp;rsquo;m again switching from hexo to hugo. Am I crazy? Yep. You want to know why? Let me tell you.&lt;/p&gt;

&lt;h3 id=&#34;why-hexo-was-chosen&#34;&gt;Why hexo was chosen?&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start from the reasons why I ditched jekyll without any regrets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hexo has a good name&lt;/li&gt;
&lt;li&gt;Hexo is powered by Node.js&lt;/li&gt;
&lt;li&gt;Hexo is easy to deploy&lt;/li&gt;
&lt;li&gt;Hexo supports theme change&lt;/li&gt;
&lt;li&gt;Hexo is pretty fast&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Honestly hexo is quite good and I&amp;rsquo;m pretty happy living with it. I have &lt;a href=&#34;https://github.com/KrazyCavin/krazycavin-hexo-github-io&#34;&gt;a &amp;ldquo;clever&amp;rdquo; repository setup of hexo in GitHub&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Branch &lt;strong&gt;hexo&lt;/strong&gt;: to keep source code, posts and theme&lt;/li&gt;
&lt;li&gt;Branch &lt;strong&gt;master&lt;/strong&gt;: to store all generated static files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found &lt;a href=&#34;https://github.com/hexojs/hexo-deployer-git&#34;&gt;a useful deploy plugin&lt;/a&gt;, which allows me to write posts and backup them in hexo branch, to publish final static files easily to master branch. I&amp;rsquo;ve to say I got nothing to complain. Hexo works as expected, all 👌&lt;/p&gt;

&lt;h3 id=&#34;why-i-choose-hugo-then&#34;&gt;Why I choose hugo then?&lt;/h3&gt;

&lt;p&gt;You know I&amp;rsquo;m a guy who crave clean &amp;amp; fast thingy and I never settle down. I cannot control myself not touching cool thing. &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, another popular static web generator engine, is mentioned a lot as &amp;ldquo;an alternative&amp;rdquo; of jekyll and recommended by some cool guys. When I&amp;rsquo;m motivated, I won&amp;rsquo;t give up the chance to try hugo, would I?&lt;/p&gt;

&lt;h4 id=&#34;1-even-better-on-theme-changing&#34;&gt;1. Even better on theme changing&lt;/h4&gt;

&lt;p&gt;Hexo supports theme change flexibly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download a new theme&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;_config.yaml&lt;/code&gt; to use it&lt;/li&gt;
&lt;li&gt;Run server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hugo is even better:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download a new theme&lt;/li&gt;
&lt;li&gt;Run server with theme name as a parameter, done!&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;2-zero-dependency&#34;&gt;2. Zero dependency&lt;/h4&gt;

&lt;p&gt;Hugo is built using Go, free, &lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;open source&lt;/a&gt;. If I only want to use hugo without building from source, I could just download executable &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;release binary&lt;/a&gt;. Literally it has zero dependency, one binary that&amp;rsquo;s all, so clean. On the other hand, hexo requests much more. First npm, then install around 10 dependencies during initializing. Now I&amp;rsquo;ve only basic functionalities of hexo. If I want to generate emoji, 👌 add a &lt;a href=&#34;https://github.com/crimx/hexo-filter-github-emojis&#34;&gt;plugin&lt;/a&gt;; if I want deploy code automatically, 👌 add another &lt;a href=&#34;https://github.com/hexojs/hexo-deployer-git&#34;&gt;plugin&lt;/a&gt;; if I want backup code automatically, 👌 add another &lt;a href=&#34;https://github.com/coneycode/hexo-git-backup&#34;&gt;plugin&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;3-lightweight-file-structure&#34;&gt;3. Lightweight file structure&lt;/h4&gt;

&lt;p&gt;Not to say if &lt;code&gt;node_modules&lt;/code&gt; is a design flaw of npm, the fact is that &lt;code&gt;node_modules&lt;/code&gt; is bloated heavily, interesting post &lt;a href=&#34;https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558&#34;&gt;here&lt;/a&gt; and interesting discussion &lt;a href=&#34;https://www.reddit.com/r/webdev/comments/42cpjy/why_is_my_node_modules_directory_140mb_is_this/&#34;&gt;here&lt;/a&gt;. Hexo is powered by Node.js and naturally bloated by it. That&amp;rsquo;s why &lt;code&gt;node_modules&lt;/code&gt; is that place where I really don&amp;rsquo;t want to look deep inside. To have a better understanding, I roughly checked the size of folders including the same theme and the result is kind as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Hexo w/ node_modules: 18M
Hexo w/o node_modules: 69M
Hugo: 29M
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-little-surprises&#34;&gt;4. Little surprises&lt;/h4&gt;

&lt;p&gt;After I know more about hugo, I get more little surprises:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt;: it instantly reloads browser after any changes. Based on hugo&amp;rsquo;s build speed, it&amp;rsquo;s super continent for developing theme and checking post&amp;rsquo;s looking, easy and fun. I like its speedy &lt;strong&gt;live&lt;/strong&gt; reload. ⚡️&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/extras/aliases/&#34;&gt;Aliases&lt;/a&gt;: I call it  page redirect. Once I put alias URL in a post and then visiting this alias URL from browser, hugo will redirect alias URL to post URL. It easily solves the problem of URL changes caused by migration from other frameworks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;To sum up, hugo is definitely my new favorite. But hexo is actually good enough to suit my needs. It seems hard to pick one, so my suggestion is following. Imagine you would like to build your own static web pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You start from fresh new, I will recommend you give &lt;strong&gt;hugo&lt;/strong&gt; a try first.&lt;/li&gt;
&lt;li&gt;You already use hexo, and you are a fan of JavaScript, then &lt;strong&gt;hexo&lt;/strong&gt; is the one to stick with.&lt;/li&gt;
&lt;li&gt;You already use hexo, and your plan is to spend time on writing, then &lt;strong&gt;hexo&lt;/strong&gt; is good enough.&lt;/li&gt;
&lt;li&gt;You already use hexo, and you want to learn new thing, and you&amp;rsquo;ve 1-2 days free time, then &lt;strong&gt;hugo&lt;/strong&gt; would be a good choice for you.&lt;/li&gt;
&lt;li&gt;You already use hugo, then keep using &lt;strong&gt;hugo&lt;/strong&gt; and don&amp;rsquo;t look around 😉&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bye Firefox</title>
      <link>https://krazycavin.github.io/2017/03/27/bye-firefox/</link>
      <pubDate>Mon, 27 Mar 2017 23:02:13 CEST</pubDate>
      
      <guid>https://krazycavin.github.io/2017/03/27/bye-firefox/</guid>
      <description>

&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*Tz47QFcn9AAdFIOI-LOPkw.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;sup&gt;
        &lt;em&gt;
            from &lt;a href=&#34;https://www.flickr.com/photos/garrett/280258600/in/photostream/&#34;&gt;Garrrett LeSage&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Love, without any reason. Leave, with a good reason.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last week, I made my decision to switch from Firefox to Chromium. Although it&amp;rsquo;s not my first time trying to ditch Firefox, I&amp;rsquo;m quite sure this time it would be the last time. As I&amp;rsquo;m a reasonable person, therefore, I put my thoughts in this post with the reason why I made my decision.&lt;/p&gt;

&lt;h3 id=&#34;a-pressure-from-outside&#34;&gt;A pressure from outside&lt;/h3&gt;

&lt;p&gt;I didn&amp;rsquo;t really remember since when I started to use Firefox, I always have it as my main browser. Back to the old good day, Firefox relies on its lightweight and fast speed amazing the world. No doubt it was the best browser. Nowadays, it is still one of the most popular browsers but definitely not top one. Many statics show it dramatically lost users &lt;a href=&#34;http://gs.statcounter.com/browser-market-share#monthly-201001-201702&#34;&gt;here&lt;/a&gt; &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; and &lt;a href=&#34;https://www.w3schools.com/browsers/default.asp&#34;&gt;here&lt;/a&gt; &lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. It&amp;rsquo;s disappointed to see the number of Firefox users keep shrinking. During the decline in 2015, &lt;a href=&#34;https://arstechnica.com/business/2016/05/firefox-overtakes-microsoft-internet-explorer-edge-browsers-first-time-statcounter/&#34;&gt;Firefox tops IE &amp;amp; Edge browser market share for the first time&lt;/a&gt;. It was especially ironic.&lt;/p&gt;

&lt;p&gt;Is Firefox not good enough? It&amp;rsquo;s probably good enough. But its competitors are better. I ran some performance tests, like &lt;a href=&#34;http://browserbench.org/JetStream/&#34;&gt;JetStream&lt;/a&gt;, &lt;a href=&#34;https://chromium.github.io/octane/&#34;&gt;Octane 2.0&lt;/a&gt;, &lt;a href=&#34;http://browserbench.org/Speedometer/&#34;&gt;Speedometer&lt;/a&gt; on Firefox v52 and Chromium v56 with my Linux desktop. Chromium wins them all and beats Firefox easily. Besides that, personally I prefer Chromium built-in devtool and &lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt; is a huge +1.&lt;/p&gt;

&lt;p&gt;These facts become a pressure from outside that weighs on Firefox. Once you run behind others, and you put all the effort to catch up. What people will see is that you&amp;rsquo;re following the same path, which others did already. It&amp;rsquo;s damn sad.&lt;/p&gt;

&lt;h3 id=&#34;a-reason-of-love&#34;&gt;A reason of love&lt;/h3&gt;

&lt;p&gt;When one performs obviously better than another, why I should keep both? Yes I do have a reason, the only reason I feel comfortable to stay with Firefox. &lt;a href=&#34;https://github.com/vimperator/vimperator-labs&#34;&gt;Vimperator&lt;/a&gt; a Firefox-only add-on which completely changes Firefox interface and turns it to vim-like. It provides me an efficient way to use the browser. I&amp;rsquo;m totally fascinated by it.&lt;/p&gt;

&lt;p&gt;As we all know, this year Firefox will face some big changes. One of them is e10s. Sadly, &lt;a href=&#34;https://github.com/vimperator/vimperator-labs/issues/211&#34;&gt;Vimperator seams won&amp;rsquo;t support e10s&lt;/a&gt; and the site &lt;a href=&#34;https://www.arewee10syet.com/&#34;&gt;Are we e10s yet?&lt;/a&gt; marks Vimperator as incompatible. It&amp;rsquo;s about time, sooner this November, anyway I will say goodbye to Vimperator, to Firefox. That&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;Now I live well with Chromium. There are lots of alternatives to try: &lt;a href=&#34;https://github.com/philc/vimium&#34;&gt;Vimium&lt;/a&gt;, &lt;a href=&#34;https://github.com/1995eaton/chromium-vim&#34;&gt;cVim&lt;/a&gt;, &lt;a href=&#34;https://github.com/jinzhu/vrome&#34;&gt;Vrome&lt;/a&gt; and this &lt;a href=&#34;https://brookhong.github.io/2015/09/15/surfingkeys.html&#34;&gt;interesting idea&lt;/a&gt;&amp;hellip; I know they are not as powerful as Vimperator. To fit my needs, they&amp;rsquo;re good enough.&lt;/p&gt;

&lt;h3 id=&#34;a-future-of-uncertainty&#34;&gt;A future of uncertainty&lt;/h3&gt;

&lt;p&gt;Moz://a really pushes hard to fully rollout Electrolysis functionality this year. The main change like Multiprocess, it will boost performance certainly. But it&amp;rsquo;s a two-blade sword, Firefox will perhaps become another memory hog. Yes, it&amp;rsquo;s gonna be like Chrome. Regarding the recent changes, I feel Firefox is different, unfamiliar or lost: &lt;a href=&#34;http://www.omgubuntu.co.uk/2017/03/firefox-52-no-sound-pulseaudio-alsa-linux&#34;&gt;Firefox Goes PulseAudio Only, Leaves ALSA Users With No Sound&lt;/a&gt;, &lt;a href=&#34;http://www.theverge.com/2017/1/25/14376710/walt-mossberg-mozilla-firefox-browser-revived&#34;&gt;What’s up with Firefox, the browser that time forgot?&lt;/a&gt;, &lt;a href=&#34;http://www.ghacks.net/2017/02/17/firefox-add-ons-roadmap-for-2017/&#34;&gt;Firefox Add-ons Roadmap for 2017&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;To make Firefox a better browser, surely there are reasons behind all changes. Maybe it&amp;rsquo;s me who cannot clearly understand them, who think the future is uncertain, who still believe in Firefox this year would have a new beginning, not the end.&lt;/p&gt;

&lt;p&gt;Firefox changed the world before, and now the world is changing Firefox. What does the Fox say?&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://gs.statcounter.com/browser-market-share#monthly-201001-201702&#34;&gt;Browser Market Share Jan 2010 - Feb 2017&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;https://www.w3schools.com/browsers/default.asp&#34;&gt;W3Schools&amp;rsquo; Famous Month-by-Month Browser Statistics&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Toolbox</title>
      <link>https://krazycavin.github.io/2017/03/08/my-toolbox/</link>
      <pubDate>Wed, 08 Mar 2017 22:12:08 &#43;0200</pubDate>
      
      <guid>https://krazycavin.github.io/2017/03/08/my-toolbox/</guid>
      <description>

&lt;h3 id=&#34;software-testing&#34;&gt;Software Testing&lt;/h3&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://ctweb.abstracta.com.uy/&#34;&gt;Test case generator (pairwise)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📖👉 &lt;a href=&#34;http://testobsessed.com/wp-content/uploads/2011/04/testheuristicscheatsheetv1.pdf&#34;&gt;Test Heuristics Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📖👉 &lt;a href=&#34;https://medium.com/@userfocus/the-1-page-usability-test-plan-dbc8c3d7fb54#.e4fd2w21q&#34;&gt;1-page usability test plan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/lestoni/faker-cli&#34;&gt;faker-cli&lt;/a&gt;: generate massive amounts of fake data&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/aoh/radamsa&#34;&gt;Radamsa&lt;/a&gt;: Radamsa is a test case generator for robustness testing, a.k.a. a fuzzer&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/josephwilk/pairwise&#34;&gt;Ruby Pairwise&lt;/a&gt;: Ruby based tool for selecting a smaller number of test input combinations&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/&#34;&gt;Name&lt;/a&gt;: all about name&lt;/p&gt;

&lt;p&gt;🌏:point_right: &lt;a href=&#34;https://github.com/minimaxir/big-list-of-naughty-strings&#34;&gt;Big List of Naughty Strings&lt;/a&gt;: list of strings which have a high probability of causing issues&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://github.com/jagracey/Awesome-Unicode&#34;&gt;Awesome Unicode&lt;/a&gt;: Unicode list&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://github.com/danielmiessler/SecLists&#34;&gt;SecLists&lt;/a&gt;: a collection of multiple types of lists used during security assessments&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://commons.wikimedia.org/wiki/Category:Large_images&#34;&gt;Large images&lt;/a&gt;: a list of very large images above 50 Megapixel&lt;/p&gt;

&lt;h3 id=&#34;mobile-testing&#34;&gt;Mobile Testing&lt;/h3&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://tools.perfectomobile.com/test-coverage-optimizer/&#34;&gt;Test coverage optimizer&lt;/a&gt;: discover the optimal mix for maximizing your test coverage with the fewest devices possible&lt;/p&gt;

&lt;p&gt;📦👉 &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.glasswire.android&#34;&gt;GlassWire&lt;/a&gt;: monitor app data usage&lt;/p&gt;

&lt;p&gt;📦👉 &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.testerkey.testerkeyboard&#34;&gt;TesterKey&lt;/a&gt;: generate complex and randomised input values&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/selendroid/selendroid&#34;&gt;Selendroid&lt;/a&gt;: test automation framework which drives of the UI of Android native and hybrid applications apps&lt;/p&gt;

&lt;h3 id=&#34;web-testing&#34;&gt;Web Testing&lt;/h3&gt;

&lt;p&gt;📖👉 &lt;a href=&#34;https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html&#34;&gt;UTF-8 plain text test file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📖👉 &lt;a href=&#34;https://github.com/dhamaniasad/HeadlessBrowsers&#34;&gt;Headless Browser list&lt;/a&gt;: a list of (almost) all headless web browsers in existence&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.performancebudget.io/&#34;&gt;Performance Budget Calculator&lt;/a&gt;: calculate a performance budget for your site&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://github.com/dhatanian/ticketmagpie&#34;&gt;TicketMagpie OWASP Top10 demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://validator.w3.org/i18n-checker/&#34;&gt;i18n Validator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/galenframework/galen&#34;&gt;Galen Framework&lt;/a&gt;: testing layout and responsive design of web applications&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/jan-molak/serenity-js&#34;&gt;Serenity/JS&lt;/a&gt;: a node.js library designed to make acceptance and regression testing of modern web applications faster&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt;capybara&lt;/a&gt;: acceptance test framework for web applications&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://securityheaders.io&#34;&gt;SecurityHeaders.io&lt;/a&gt;: a quick and easy way to check http headers&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://cards-dev.twitter.com/validator&#34;&gt;Twitter Card Validator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://developers.facebook.com/tools/debug/&#34;&gt;Facebook Debugger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.jsontest.com&#34;&gt;JSON Test&lt;/a&gt;: JSON Testing Service&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://apitester.com&#34;&gt;API tester&lt;/a&gt;: test API&lt;/p&gt;

&lt;h3 id=&#34;dev-tools&#34;&gt;Dev Tools&lt;/h3&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://putsreq.com/&#34;&gt;PutsReq&lt;/a&gt;: record HTTP requests and fake responses&lt;/p&gt;

&lt;p&gt;📖👉 &lt;a href=&#34;http://www.stefankrause.net/js-frameworks-benchmark2/webdriver-java/table.html?utm_content=buffer615ad&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer&#34;&gt;JS framework benchmark&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📖👉 &lt;a href=&#34;http://cdn2.hubspot.net/hubfs/208250/Blog_Images/devops11.png&#34;&gt;The Ultimate DevOps Tools Ecosystem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://regex101.com/&#34;&gt;regex101&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://rubular.com/&#34;&gt;rubular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📦👉 &lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/dxa4481/truffleHog&#34;&gt;Truffle Dog&lt;/a&gt;: searches through git repositories for high entropy strings, digging deep into commit history and branches&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/jkbrzt/httpie&#34;&gt;HTTPie&lt;/a&gt;: a CLI, cURL-like tool for humans&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/lord/slate&#34;&gt;Slate&lt;/a&gt;: API doc generator&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/anvaka/git-also&#34;&gt;git-also&lt;/a&gt;: for a file in your git repository, prints other files that are most often committed together&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/mitmproxy/mitmproxy&#34;&gt;mitmproxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/naptha/tesseract.js&#34;&gt;Tesseract.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💻👉 &lt;a href=&#34;https://asciinema.org/&#34;&gt;asciinema&lt;/a&gt;: record and share terminal sessions&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://obfuscator.uo1.net/&#34;&gt;Online Text Obfuscator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://webcode.tools&#34;&gt;Web Code Tools&lt;/a&gt;: code generator&lt;/p&gt;

&lt;p&gt;🌏:point_right: &lt;a href=&#34;http://www.json-generator.com/&#34;&gt;JSON generator&lt;/a&gt;: JSON generator&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://foragoodstrftime.com/&#34;&gt;For a Good Strftime&lt;/a&gt;: easy date time formatting&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://pin.gy/cli/&#34;&gt;Pingy&lt;/a&gt;: the simple frontend build tool&lt;/p&gt;

&lt;h3 id=&#34;method&#34;&gt;Method&lt;/h3&gt;

&lt;p&gt;👉 &lt;a href=&#34;https://pbs.twimg.com/media/C3JNXUtWEAAW951.jpg&#34;&gt;Cynefin Framework for user story splitting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 &lt;a href=&#34;http://melissaperri.com/wp-content/uploads/2016/07/Product-Strategy-Canvas-1.png&#34;&gt;Product Strategy Canvas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 &lt;a href=&#34;https://natgeoeducationblog.files.wordpress.com/2017/01/ultimate-critical-thinking-worksheet.jpg&#34;&gt;The ultimate cheat sheet for critical thinking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/co/thumb/6/68/Kano_model_showing_transition_over_time.png/737px-Kano_model_showing_transition_over_time.png&#34;&gt;Kano model&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;search&#34;&gt;Search&lt;/h3&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.shodan.io/&#34;&gt;Shodan&lt;/a&gt;: search engine for Internet-connected devices&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://foller.me/&#34;&gt;Twitter Analytics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌏:point_right: &lt;a href=&#34;https://www.pexels.com/&#34;&gt;Pexels&lt;/a&gt;: best free stock photos in one place&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://startup-videos.com/&#34;&gt;StartupVideos&lt;/a&gt;: showcasing The Best Startup Videos&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.landingfolio.com/&#34;&gt;Landingfolio&lt;/a&gt;: landing page design inspiration&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.videvo.net/&#34;&gt;videovo&lt;/a&gt;: free stock video footage&lt;/p&gt;

&lt;h3 id=&#34;design&#34;&gt;Design&lt;/h3&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/sferik/t&#34;&gt;Ruby Twitter CLI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://google-webfonts-helper.herokuapp.com/fonts&#34;&gt;Google Webfont Helper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://vimcolors.com/&#34;&gt;VIM color themes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/mxstbr/sharingbuttons.io&#34;&gt;sharingbuttons.io&lt;/a&gt;: generate social sharing buttons&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/l0b0/xterm-color-count&#34;&gt;XTerm Color Count&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/WebpageFX/emoji-cheat-sheet.com&#34;&gt;emoji cheat sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://excel2jira.bluurgh.com/&#34;&gt;Excel to Jira table&lt;/a&gt;: copy and paste a table from Excel, click the button, and in return you will get the table formatted for JIRA&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://colormind.io/&#34;&gt;Colormind&lt;/a&gt;: Colormind is a deep learning AI that knows color theory. It can generate color palettes from scratch, or it can take your input and intelligently fill in the blanks.&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.canva.com/color-palette/&#34;&gt;Color palette&lt;/a&gt;: get colors from photos&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://smartmockups.com/&#34;&gt;Smartmockups&lt;/a&gt;: create product screenshots with mocks&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;http://sproutsocial.com/landscape&#34;&gt;Landscape&lt;/a&gt;: streamlined image resizing for social media&lt;/p&gt;

&lt;p&gt;🌏👉 &lt;a href=&#34;https://coolors.co/&#34;&gt;Coolors&lt;/a&gt;: fast color schemes generator&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Hexo Why Not Jekyll</title>
      <link>https://krazycavin.github.io/2017/02/26/why-hexo-why-not-jekyll/</link>
      <pubDate>Sun, 26 Feb 2017 16:40:26 &#43;0200</pubDate>
      
      <guid>https://krazycavin.github.io/2017/02/26/why-hexo-why-not-jekyll/</guid>
      <description>

&lt;p&gt;Do you remember several months ago I wrote a post about &lt;a href=&#34;http://127.0.0.1:4000/2016/11/19/know-how-to-build-github.io-blog-in-3-min/&#34;&gt;how to build github.io blog in 3 min?&lt;/a&gt; At that time, I was kidding that &lt;strong&gt;3 min&lt;/strong&gt; in that post title was actually the &lt;strong&gt;time to finish reading that post&lt;/strong&gt;. But today, I could make this raving come true with &lt;a href=&#34;https://hexo.io/&#34;&gt;hexo&lt;/a&gt;, a super simple and powerful static blog generator. I switched immediately from jekyll to hexo. Really? Why hexo, why not jekyll anymore? 😵&lt;/p&gt;

&lt;h3 id=&#34;a-net-name-is-half-success&#34;&gt;A net name is half-success&lt;/h3&gt;

&lt;p&gt;Everyone has his own taste on naming. Hexo vs. Jekyll which one is cooler? I cannot tell. But which one is net and easy to write. I vote for hexo.&lt;/p&gt;

&lt;p&gt;You probably are not a clumsy-handed person, but unfortunately sometimes I am. I admit that many times I&amp;rsquo;m stupid (or drunken) to write jekyll as jeykll, jekyl, jekeyll&amp;hellip; How about hexo? I think I still need drink more 🍷 in order to make a spelling mistake of hexo.&lt;/p&gt;

&lt;h3 id=&#34;node-js-home-lovely-home&#34;&gt;Node.js home lovely home&lt;/h3&gt;

&lt;p&gt;Jekyll is powered by ruby. Hexo is powered by Node.js. Personally I&amp;rsquo;m more familiar with js than ruby. Using npm to set up project and install plugins makes me feel super relax like staying at home.&lt;/p&gt;

&lt;p&gt;On the other hand, ruby is also quite interesting to play with. Like dating a beautiful lady for the first time, I&amp;rsquo;ve to understand what she likes and what she doesn&amp;rsquo;t like and then to cater to her pleasure in order to start our relationship. Sometimes I feel embarrassed and ashamed when I made some stupid mistakes and they&amp;rsquo;re unavoidable for a newbie. This feeling will inscribe my nervous level, so uncomfortable . At the end, the only ting I want is just to set up something in 3 min and spend my time on writing more posts.&lt;/p&gt;

&lt;h3 id=&#34;deployment-it-s-a-magic&#34;&gt;Deployment? It&amp;rsquo;s a magic!&lt;/h3&gt;

&lt;p&gt;The deployment of hexo is amazing. I add my git repo info in _config.xml then run a simple command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ hexo d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done! What a magic! No need git add, git commit, git push&amp;hellip; It&amp;rsquo;s really continent to write and publish a post.&lt;/p&gt;

&lt;p&gt;Another good thing is that hexo organizes git repo nicely. It contains only the final static html, js and css files. Other setup related file like _config.xml or themes or plugins can be stored separately in different repositories. It&amp;rsquo;s wonderful for person who has OCD.&lt;/p&gt;

&lt;h3 id=&#34;setup-theme-dynamically&#34;&gt;Setup theme dynamically&lt;/h3&gt;

&lt;p&gt;With hexo, there will be no more feeling of frustrated at changing theme. Hexo has an interesting structure to organize &lt;a href=&#34;https://hexo.io/docs/themes.html&#34;&gt;&lt;em&gt;themes&lt;/em&gt;&lt;/a&gt; in a separate folder. Choosing a theme is like switching a cloth. And it&amp;rsquo;s possible to have collect different themes 👗 in your armoire.&lt;/p&gt;

&lt;h3 id=&#34;fast&#34;&gt;Fast&lt;/h3&gt;

&lt;p&gt;Overall, hexo gives me an impression &lt;em&gt;fast&lt;/em&gt;, starting from the command execution with one letter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hexo s &amp;lt;=&amp;gt; hexo server
hexo g &amp;lt;=&amp;gt; hexo generate
hexo d &amp;lt;=&amp;gt; hexo deploy
hexo cl &amp;lt;=&amp;gt; hexo clean
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;According to my needs, compared to Jekyll hexo has a net name, no learning curve, magic deployment, variable themes, and it runs faster. I&amp;rsquo;m quite satisfied with hexo so far. Maybe I will give &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt; a try soon. But who knows when I will switch to the &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;next generator&lt;/a&gt;? 😬&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Failed to Use Calabash for Mobile Testing</title>
      <link>https://krazycavin.github.io/2017/01/21/why-i-failed-to-use-calabash-for-mobile-testing/</link>
      <pubDate>Sat, 21 Jan 2017 10:48:00 &#43;0200</pubDate>
      
      <guid>https://krazycavin.github.io/2017/01/21/why-i-failed-to-use-calabash-for-mobile-testing/</guid>
      <description>

&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*61zMYo0AKZw7F_-UTBgULQ.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;When I give up, I write it down. Someday I will pick myself up from the fall.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;

&lt;p&gt;I admit that I failed to use Calabash for mobile testing. It was a big failure but it was beautiful, I call it &lt;em&gt;reckless passion&lt;/em&gt;. Although I learned a lot from it, I&amp;rsquo;ve never shared what I learned in public. After that, I changed my focus and gave up on traditional UI automation.&lt;/p&gt;

&lt;p&gt;This week, I had some small talks with our awesome developers about test automation. The idea was to implement special UI automated tests, in order to check new product release automatically instead of sanity checking manually by the whole team. I suddenly remembered that I forgot to share my failure with them. I&amp;rsquo;d like to write down in this post, my recklessness and something I learned. In case the team would like to move further on test automation, we could proceed with caution.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;My story begins back in September 2015, a sunny day. At that moment, I was so confident that our mobile apps are fully mature for automating tests. That day I started a draft plan of test automation. In the following week, I planned everything, I finished my research to find a suitable framework, I started my experiment and even I announced my plan to the team in a non-meeting Tuesday&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;chapter-i-huge-ambitions-but-no-skills&#34;&gt;Chapter I: huge ambitions but no skills&lt;/h3&gt;

&lt;p&gt;I successfully sold my big picture of test automation future too without any oppositions. With UI test automation, I had my dreams:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A dream of brilliant and efficient release process&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A dream of full user behavior coverage&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A dream of no painful manual regression testing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My initial plan is to follow the steps below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 1: Build the main structure of test automation framework and create general functions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Step 2: Create test scenarios to replace all manual sanity checks of app core features&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Step 3: Add new test scenarios to check acceptance criteria of user stories, to verify bug fixes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start the first step, I choose Calabash&lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; as the framework. The reasons why I pick it because it is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cross-platform: Android and iOS&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;BDD friendly&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pure UI level, no need to dive deep into the code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me it looks really promising, even I had little knowledge of this tool and scripting using Ruby. My strong passion supports me to start the implementation of Calabash on Android side. It took me at least 2 sprints to make my hands very dirty. I did my best to script, debug, hack&amp;hellip; As the final outputs, I created tons of functions to bind general actions with Gherkin syntax.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to move to the 2nd step, but soon in reality, I found it&amp;rsquo;s hard to simulate user&amp;rsquo;s general actions, for example: a simple action like scroll down on a list. How many times? How far can it scroll, stop at the end or somewhere randomly?&lt;/p&gt;

&lt;p&gt;Then I have to go back and forth between step 1 and step 2, when creating new test scenarios, meanwhile updating general action functions&amp;hellip; I felt troublesome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next time I will ask myself first&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;During planning, &lt;strong&gt;&amp;ldquo;What&amp;rsquo;s the purpose of automation?&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;What&amp;rsquo;s the limitation of automation?&amp;rdquo;&lt;/strong&gt; and &lt;strong&gt;&amp;ldquo;Where to start to automate checks?&amp;rdquo;&lt;/strong&gt;&lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When choosing a tool or framework, &lt;strong&gt;&amp;ldquo;What are the pros and the cons of the tool?&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;Does the tool fit all my needs?&amp;rdquo;&lt;/strong&gt; and &lt;strong&gt;&amp;ldquo;Do I have the knowledge to master the tool?&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Before starting implementation, &lt;strong&gt;What&amp;rsquo;s the testability of the product?&lt;/strong&gt; and &lt;strong&gt;&amp;ldquo;Do I have a clear architecture and design of test automation?&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;chapter-ii-unstable-execution-and-unreliable-result&#34;&gt;Chapter II: unstable execution and unreliable result&lt;/h3&gt;

&lt;p&gt;Finally, I replaced almost all sanity checks by automated checks. I planned to announce the results to the team proudly but actually I didn&amp;rsquo;t. Because after I tried to run tests several times, I found that test executions are not stable and test results are not reliable.&lt;/p&gt;

&lt;h4 id=&#34;unstable-test-execution&#34;&gt;Unstable test execution&lt;/h4&gt;

&lt;p&gt;I created some Android emulators where I launch tests, but the emulator is usually laggy. The frequent timeout of some test steps often destroyed the whole test execution. Then I have to launch tests on the real devices. Timeout issues got fewer. But after one snapshot version, executions were blocked by some small UI changes. After adapted all UI changes, I thought the execution should be smooth but I got the opposite. Due to the differences of the test environment, some test cases are only executable in a production environment, I have to add the mechanism to detect and switch environments.&lt;/p&gt;

&lt;h4 id=&#34;unreliable-test-result&#34;&gt;Unreliable test result&lt;/h4&gt;

&lt;p&gt;The worst thing in test automation is Schrödinger test, aka flaky test. Like ghosts haunting around, it&amp;rsquo;s never sure that the result is failing or passing after a running. I got some flaky tests due to the timing of actions, too many preconditions to fulfill, the changeable input data in production environment, the bugs in framework&amp;hellip;&lt;/p&gt;

&lt;p&gt;A huge test case will also cause unreliable test results. Imagine a 20-step test case, if it&amp;rsquo;s failed in the 5th step, the hidden failure in the rest part is not able to be detected without continuing the execution. On the surface, it&amp;rsquo;s only one failure. But it&amp;rsquo;s possible that the failures of next 15 steps are covered underneath. I separated some huge test cases to small test cases. But in some cases, one step dependents on the app state created by another step. It took the effort to remove dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next time I will ask myself first&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do I have a controllable and stable test environment?&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Which test environment for which test case?&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do I have a process to handle flaky tests? Retry, quarantine or remove?&lt;/strong&gt;&lt;sup&gt;&lt;a name=&#34;back3&#34;&gt;&lt;a href=&#34;#link3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Is a failed test case clear enough to identify bugs?&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;chapter-iii-one-man-show-and-demotivated-maintenance&#34;&gt;Chapter III: one-man show and demotivated maintenance&lt;/h3&gt;

&lt;p&gt;3 months later, I didn&amp;rsquo;t go further in the 3rd step. Because my confidence was torn apart by unreliable results and my passion was extinguished by daily maintenance tasks. I told myself that it&amp;rsquo;s time to give up. Silently I stopped putting my effort to write new tests and maintain test suite.&lt;/p&gt;

&lt;p&gt;2 sprints after, I came back from my vacation. I doubted whether tests were still executable. Then I accessed to the old Calabash repository carefully and executed scripts curiously, as expected, not a single test can start to run.&lt;/p&gt;

&lt;p&gt;Since then, no one, including me, ever mentioned about Calabash test automation. I realized my biggest mistake: I should let the team involve in the entire automation project. So it wouldn&amp;rsquo;t end up now as a ridiculous one-man show.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next time I will ask myself first&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Am I the only one who maintain the whole automation project?&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do I manage to update test suite immediately after code changes?&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do I measure the test automation whether it&amp;rsquo;s helpful or not?&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fin&#34;&gt;Fin&lt;/h3&gt;

&lt;p&gt;The sad story is over. It triggers the change of test automation definition in my mind. Now I see test automation as a tool&lt;sup&gt;&lt;a name=&#34;back4&#34;&gt;&lt;a href=&#34;#link4&#34;&gt;[4]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; and a tester augmentation&lt;sup&gt;&lt;a name=&#34;back5&#34;&gt;&lt;a href=&#34;#link5&#34;&gt;[5]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. Following this definition, I made a lot of scripts to help me explore products efficiently.&lt;/p&gt;

&lt;p&gt;But somewhere in my mind, I still have my assent of the traditional definition of test automation; Somewhere in my heart, I still have my passion for creating a perfect UI automation for mobile testing. Next time when I restart, I will ask myself the above questions, to explore another path towards the successful &amp;ldquo;UI automation&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; Calabash &lt;a href=&#34;http://calaba.sh/&#34;&gt;homepage&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; Oleksii Burdin: &lt;a href=&#34;https://lazytesterua.blogspot.de/2016/02/where-to-start-automation.html&#34;&gt;Where to start to automate your checks?&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link3&#34;&gt;&lt;a href=&#34;#back3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt; Walmyr Filho: &lt;a href=&#34;https://medium.com/the-making-of-appear-in/the-importance-of-dealing-with-flaky-tests-1b69145dee0f#.q5fgedjx0&#34;&gt;The importance of dealing with flaky tests&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link4&#34;&gt;&lt;a href=&#34;#back4&#34;&gt;[4]&lt;/a&gt;&lt;/a&gt; Micheal Bolton: &lt;a href=&#34;http://www.developsense.com/blog/2016/01/a-context-driven-approach-to-automation-in-testing/&#34;&gt;A Context-Driven Approach to Automation in Testing&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link5&#34;&gt;&lt;a href=&#34;#back5&#34;&gt;[5]&lt;/a&gt;&lt;/a&gt; Josh Meieter: &lt;a href=&#34;https://medium.com/salesforce-engineering/tester-augmentation-not-test-automation-1de28269c9a4#.cdq1utnu3&#34;&gt;Tester Augmentation, Not Test Automation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nobody Asks Me Questions but I&#39;ve Some Answers</title>
      <link>https://krazycavin.github.io/2017/01/13/nobody-asks-me-questions-but-i-give-some-answers/</link>
      <pubDate>Fri, 13 Jan 2017 17:20:53 &#43;0200</pubDate>
      
      <guid>https://krazycavin.github.io/2017/01/13/nobody-asks-me-questions-but-i-give-some-answers/</guid>
      <description>

&lt;p class=&#34;hidden&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*S4QCcKz1OmopX580Q2X_Vg.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;


&lt;p&gt;So far no one asks me any of questions I post below because it&amp;rsquo;s so obvious that I&amp;rsquo;m not interviewed, I&amp;rsquo;m not a speaker, I&amp;rsquo;m not a celebrity in software testing&amp;hellip; But in &lt;strong&gt;edge case&lt;/strong&gt; in the future, there is a little chance that someone would ask me these questions. In this case, the answers are provided even without asking. How awesome it is ¯\_(ツ)_/¯&lt;/p&gt;

&lt;p&gt;I start these 3 questions from this interview &lt;a href=&#34;https://ukstar.eurostarsoftwaretesting.com/meet-ukstar-speaker-cassandra-leung/&#34;&gt;Meet UKSTAR Speaker – Cassandra Leung&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-did-you-get-started-in-software-testing&#34;&gt;How did you get started in software testing?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://i.giphy.com/HVr4gFHYIqeti.gif&#34; alt=&#34;adventure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I can say 90% tester has a particular journey to start software testing adventure. I&amp;rsquo;m no exception.&lt;/p&gt;

&lt;p&gt;As a freshman in Bio-Engineering, I didn&amp;rsquo;t expect at all that my profession would be related to software testing.&lt;/p&gt;

&lt;p&gt;To start my journey on software testing is a beautiful coincidence I had in my life. I have a master degree of Biomedical in the medical imaging area. As a hobby, I learned some programming skills by myself. Luckily, my diploma and my skills helped me to get an internship in a medical software company. I was in the software department and my mission is to build a web management tool.&lt;/p&gt;

&lt;p&gt;After 8 months, the employer was quite happy about the outcomes of my internship. At that moment, they were searching for a new developer who can write scripts to build an in-house test automation framework and writing test cases. Luckily, I was chosen to start my adventure in software testing, as an SDET.&lt;/p&gt;

&lt;h3 id=&#34;who-inspires-you&#34;&gt;Who inspires you?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://i.giphy.com/JpMv34oxICQrS.gif&#34; alt=&#34;sylar&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m inspired by a lot of awesome people. I have a list of these brilliant people, from whom I would like to steal their brains (I&amp;rsquo;m serious 👿). In software testing, I will name &lt;a href=&#34;https://twitter.com/michaelbolton&#34;&gt;Micheal Bolton&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/lisacrispin&#34;&gt;Lisa Crispin&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/testobsessed&#34;&gt;Elisabeth Hendrickson&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/dnlkntt&#34;&gt;Daniel Knott&lt;/a&gt;. If you know them, please send them my thanks and I&amp;rsquo;m coming for them soon ☺️&lt;/p&gt;

&lt;h3 id=&#34;what-do-you-see-for-the-future-of-software-testing&#34;&gt;What do you see for the future of software testing?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/8IXEHur.gif&#34; alt=&#34;everyone&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For me, it&amp;rsquo;s a difficult question. Although my ability of prediction sucks, I&amp;rsquo;m predicting that the future of software testing is &lt;strong&gt;everyone performs small testing habitually&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The traditional checkpoint style testing will be sliced to some small tiny pieces. They&amp;rsquo;ll be performed continually by every team members in daily development, no matter programmed checking or manual testing.&lt;/p&gt;

&lt;p&gt;Everyone takes care of testing and everyone does it habitually, even not testers. It&amp;rsquo;s a real challenge for the whole team to perform testing habitually, and also a huge challenge for testers to think how to help the whole team to perform testing habitually without testers. As a current trend, testers are shifted around. This movement of testers will bring the seeds of testing knowledge to different people in different job positions.&lt;/p&gt;

&lt;h3 id=&#34;to-be-continued&#34;&gt;&lt;em&gt;(To be continued&amp;hellip;)&lt;/em&gt;&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>
