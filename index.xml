<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kevin Cui</title>
    <link>https://kevcui.github.io/</link>
    <description>Recent content on Kevin Cui</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 May 2022 13:44:59 +0200</lastBuildDate>
    
	<atom:link href="https://kevcui.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Use Burp Suite Community Edition Like A Pro</title>
      <link>https://kevcui.github.io/2022/05/01/use-burp-suite-community-edition-like-a-pro/</link>
      <pubDate>Sun, 01 May 2022 13:44:59 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2022/05/01/use-burp-suite-community-edition-like-a-pro/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://kevcui.github.io/images/burp-suite-community-to-pro.png&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;p&gt;You should have noticed the pun in this post title 😉. That&amp;rsquo;s right, some powerful Burp Suite extensions can make the free community edition as good as the Burp Pro version. Knowing how to use those extensions will make you feel like a pro.&lt;/p&gt;
&lt;h3 id=&#34;turbo-intruder&#34;&gt;Turbo Intruder&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start with &lt;a href=&#34;https://github.com/PortSwigger/turbo-intruder&#34;&gt;Turbo Intruder&lt;/a&gt;. It&amp;rsquo;s one of the most (if not the most) popular Burp extensions. Basically, anyone who knew Burp extensions should have heard the name of Turbo Intruder.&lt;/p&gt;
&lt;p&gt;The Burp Suite community edition comes with a &amp;ldquo;lite&amp;rdquo; version of Burp Intruder. The first impression of this community edition Intruder is: It has really low RPS (Request Per Second). The time you waited for finishing a 1000-request brute-forcing attack can make you grow out some gray hair, slow and anxious. Meanwhile, the Burp Pro version provides a decent speed Burp Intruder, which is suitable for daily usage.&lt;/p&gt;
&lt;p&gt;However, Turbo Intruder is a beast on another level. It&amp;rsquo;s fast and furious. To be honest, I never hit once its full speed and I don&amp;rsquo;t know how fast it can truly go&amp;hellip;&lt;/p&gt;
&lt;p&gt;Another highlight of the Turbo Intruder is the customization. It supports Python scripts, which makes it flexible. You could modify any parameters as you want or add additional steps in the script to fit your needs. Personally, I find it&amp;rsquo;s pretty handy for testing race conditions.&lt;/p&gt;
&lt;p&gt;Turbo Intruder will let you forget about the Burp Intruder in the Burp Pro version.&lt;/p&gt;
&lt;h3 id=&#34;logger&#34;&gt;Logger++&lt;/h3&gt;
&lt;p&gt;After a session of testing, you may already have collected hundreds of requests and responses in Logger or HTTP history. Sometimes, you need to search for a specific request with a certain parameter in the request URI path or a specific request with a certain value in the response&amp;hellip; It&amp;rsquo;s clearly not an option to go through all the requests and check them one by one. Missing the search function is a big deal in the Burp Suite community edition.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nccgroup/LoggerPlusPlus&#34;&gt;Logger++&lt;/a&gt; provides enhanced search functionality. Among all the features in Logger++, I find its grep tool is the most useful feature. As the name suggested, you could &amp;ldquo;grep&amp;rdquo; logs with matched patterns:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nccgroup/LoggerPlusPlus/master/images/grep.png&#34; alt=&#34;logger++ grep values&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you are using Logger++ already, I&amp;rsquo;m pretty sure you won&amp;rsquo;t open Burp Logger anymore, and you won&amp;rsquo;t mind using the search functionality in the Burp Pro version either.&lt;/p&gt;
&lt;h3 id=&#34;interactsh-collaborator&#34;&gt;Interactsh Collaborator&lt;/h3&gt;
&lt;p&gt;The Burp Collaborator is a killer tool in the Burp Pro version. It&amp;rsquo;s valuable for testing OOB (Out-of-band), or generating temporary email addresses&amp;hellip;&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t be sad yet if you cannot use Collaborator in the community edition. Because if you know &lt;a href=&#34;https://github.com/wdahlenburg/interactsh-collaborator&#34;&gt;interactsh-collaborator&lt;/a&gt; extension, you won&amp;rsquo;t miss a thing.&lt;/p&gt;
&lt;p&gt;Interactsh Collaborator provides a good alternative, based on &lt;a href=&#34;https://github.com/projectdiscovery/interactsh/&#34;&gt;interactsh-client&lt;/a&gt;. It offers the same functionalities as the Burp Collaborator does:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4451504/131763193-7f0c32f3-1683-4166-9c9d-1a948ea04fd4.gif&#34; alt=&#34;Interactsh Collaborator&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;lazycsrf&#34;&gt;LazyCSRF&lt;/h3&gt;
&lt;p&gt;Last but not least, another feature in Burp Pro you may need is &amp;ldquo;Generate CSRF PoC&amp;rdquo;. &lt;a href=&#34;https://github.com/tkmru/lazyCSRF&#34;&gt;LazyCSRF&lt;/a&gt; is an extension to fulfill this purpose with some additional enhancements:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tkmru/lazyCSRF/main/img/display-japanese.png&#34; alt=&#34;LazyCSRF&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The purpose of this post is not to demotivate you from purchasing the Burp Pro license. Contrarily, if you love Burp Suite and you&amp;rsquo;re able to pay for the Pro license, then please own it properly like a pro.&lt;/p&gt;
&lt;p&gt;Here is a list of the mentioned extensions in the post and their GitHub repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Turbo Intruder: &lt;a href=&#34;https://github.com/PortSwigger/turbo-intruder&#34;&gt;https://github.com/PortSwigger/turbo-intruder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logger++: &lt;a href=&#34;https://github.com/nccgroup/LoggerPlusPlus&#34;&gt;https://github.com/nccgroup/LoggerPlusPlus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interactsh-collaborator: &lt;a href=&#34;https://github.com/wdahlenburg/interactsh-collaborator&#34;&gt;https://github.com/wdahlenburg/interactsh-collaborator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LazyCSRF: &lt;a href=&#34;https://github.com/tkmru/lazyCSRF&#34;&gt;https://github.com/tkmru/lazyCSRF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Three jq Tips You May Need to Know</title>
      <link>https://kevcui.github.io/2020/11/03/three-jq-tips-you-may-need-to-know/</link>
      <pubDate>Tue, 03 Nov 2020 14:50:55 +0100</pubDate>
      
      <guid>https://kevcui.github.io/2020/11/03/three-jq-tips-you-may-need-to-know/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://miro.medium.com/max/1000/1*Zb1Sf4nO9QqCcREfy4vfdA.png&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stedolan.github.io/jq/manual/&#34;&gt;jq&lt;/a&gt; is famously known as a powerful command-line JSON parser. Besides performing as a parser, jq has many other handy usages as well. Here, I&amp;rsquo;d like to share 3 jq tips you may need to know.&lt;/p&gt;
&lt;h3 id=&#34;json-prettier&#34;&gt;JSON Prettier&lt;/h3&gt;
&lt;p&gt;When we &lt;code&gt;curl&lt;/code&gt; API to fetch JSON response with raw data. It certainly looks messy:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl https://api.spacexdata.com/v4/launches/latest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fairings&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;reused&amp;#34;&lt;/span&gt;:false,&lt;span class=&#34;s2&#34;&gt;&amp;#34;recovery_attempt&amp;#34;&lt;/span&gt;:true,&lt;span class=&#34;s2&#34;&gt;&amp;#34;recovered&amp;#34;&lt;/span&gt;:null,&lt;span class=&#34;s2&#34;&gt;&amp;#34;ships&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c907&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c908&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]}&lt;/span&gt;,...&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;5ef6a2e70059c33cee4a8293&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p&gt;Now let&amp;rsquo;s toss raw data into &lt;code&gt;jq&lt;/code&gt; and make it look prettier:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl https://api.spacexdata.com/v4/launches/latest &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;fairings&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;reused&amp;#34;&lt;/span&gt;: false,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;recovery_attempt&amp;#34;&lt;/span&gt;: true,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;recovered&amp;#34;&lt;/span&gt;: null,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ships&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c907&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c908&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ef6a2e70059c33cee4a8293&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p&gt;In the opposite way, when we got some pretty-printed JSON data and want to concatenate them to a one-line string, using &lt;code&gt;jq -c&lt;/code&gt;:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl https://api.spacexdata.com/v4/launches/latest &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq &amp;gt; example.json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cat example.json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;fairings&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;reused&amp;#34;&lt;/span&gt;: false,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;recovery_attempt&amp;#34;&lt;/span&gt;: true,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;recovered&amp;#34;&lt;/span&gt;: null,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ships&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c907&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c908&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ef6a2e70059c33cee4a8293&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cat example.json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fairings&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;reused&amp;#34;&lt;/span&gt;:false,&lt;span class=&#34;s2&#34;&gt;&amp;#34;recovery_attempt&amp;#34;&lt;/span&gt;:true,&lt;span class=&#34;s2&#34;&gt;&amp;#34;recovered&amp;#34;&lt;/span&gt;:null,&lt;span class=&#34;s2&#34;&gt;&amp;#34;ships&amp;#34;&lt;/span&gt;:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c907&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c908&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]}&lt;/span&gt;,...&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;5ef6a2e70059c33cee4a8293&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;h3 id=&#34;json-validator&#34;&gt;JSON Validator&lt;/h3&gt;
&lt;p&gt;jq can be served as a simple JSON validator, for instance:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;fairings&amp;#34;:{&amp;#34;reused&amp;#34;:false,, &amp;#34;recovery_attempt&amp;#34;:true}}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;parse error: Expected value before &lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; at line 1, column &lt;span class=&#34;m&#34;&gt;29&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p&gt;Because its output doesn&amp;rsquo;t give much information to pinpoint directly the error in an obvious way, it&amp;rsquo;s better to use a proper validator for some complex cases. But for some quick checks to validate JSON data, jq can be considered as a suitable choice.&lt;/p&gt;
&lt;h3 id=&#34;json-pathfinder&#34;&gt;JSON Pathfinder&lt;/h3&gt;
&lt;p&gt;Analyzing JSON files and finding the correct path syntax to a certain value sometimes can be troublesome. Many times, I was punched hard by the frustration of trial and error. Until one day, this magic jq command line brings me the light: &lt;code&gt;jq -r &#39;paths(scalars) as $p | &amp;quot;.&amp;quot; + ([([$p[] | tostring] | join(&amp;quot;.&amp;quot;)), (getpath($p) | tojson)] | join(&amp;quot;: &amp;quot;))&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the same &lt;code&gt;curl&lt;/code&gt; data from the previous example, in this case, I want to get the path syntax of &lt;code&gt;ships&lt;/code&gt; ids:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl https://api.spacexdata.com/v4/launches/latest &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;paths(scalars) as $p | &amp;#34;.&amp;#34; + ([([$p[] | tostring] | join(&amp;#34;.&amp;#34;)), (getpath($p) | tojson)] | join(&amp;#34;: &amp;#34;))&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s1&#34;&gt;&amp;#39;.ships&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.fairings.ships.0: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c907&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.fairings.ships.1: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c908&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.ships.0: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2f080df4000697c910&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.ships.1: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2f080df4000697c90b&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.ships.2: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c907&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.ships.3: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5ea6ed2e080df4000697c908&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p&gt;From the output, now I know the right path syntax is &lt;code&gt;.ships[]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As you can see from this example, this magic jq command line will print each path and value pair from the input JSON. Combing with &lt;code&gt;grep&lt;/code&gt; command, it&amp;rsquo;s sufficient to be used as a handy JSON pathfinder.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you do know other hot jq tips, do not hesitate to share them with me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Alias -- Did You Git It?</title>
      <link>https://kevcui.github.io/2020/07/04/git-alias-did-you-git-it/</link>
      <pubDate>Sat, 04 Jul 2020 09:02:36 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2020/07/04/git-alias-did-you-git-it/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://miro.medium.com/max/1000/1*3FdoxRpyTvSD4-bqAaiV2w.png&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;p&gt;Git alias is powerful and yet simple to set up. I&amp;rsquo;d like to share my journey in configuring git alias for my personal use. Now let&amp;rsquo;s dig it and git it!&lt;/p&gt;
&lt;h3 id=&#34;day-1-why-git-alias&#34;&gt;Day 1: Why git alias?&lt;/h3&gt;
&lt;p&gt;I was using &lt;a href=&#34;https://github.com/jonas/tig&#34;&gt;Tig&lt;/a&gt; for some time. It&amp;rsquo;s good but not great. The problems I got during the time:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It takes time to memorize &lt;a href=&#34;https://jonas.github.io/tig/doc/manual.html&#34;&gt;the default key bindings&lt;/a&gt;. Since I&amp;rsquo;m using &lt;a href=&#34;https://kevcui.github.io/2019/04/18/twenty-months-with-colemak/&#34;&gt;Colemak&lt;/a&gt; keyboard layout, obviously, the default navigation key bindings need to be adjusted accordingly. Therefore, it takes me more time to customize them.&lt;/li&gt;
&lt;li&gt;Tig doesn&amp;rsquo;t support customized diff formatter, like my current favorite &lt;a href=&#34;https://github.com/dandavison/delta&#34;&gt;delta&lt;/a&gt;. &lt;a href=&#34;https://github.com/jonas/tig/issues/542&#34;&gt;An open issue from 2016&lt;/a&gt; gives me the fearful feeling that Tig wouldn&amp;rsquo;t officially support this feature in the foreseeable future.&lt;/li&gt;
&lt;li&gt;Switching between different views in Tig makes the workflow complex and slow. For example, to add an untracked file: run tig, press &lt;code&gt;s&lt;/code&gt; to switch to status view, move up and down to select an untracked file, press &lt;code&gt;u&lt;/code&gt; to add it. Well, in this case, why using Tig instead of simply typing &lt;code&gt;git add &amp;lt;untracked_file&amp;gt;&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At some point, I decided to drop Tig and tried to search for other tools to assist my git workflow.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t get me wrong. Tig is a decent tool. However, my needs are just picky and I&amp;rsquo;m just too lazy 🤷.&lt;/p&gt;
&lt;p&gt;After trying &lt;a href=&#34;https://git-scm.com/downloads/guis/&#34;&gt;this and that&lt;/a&gt;, surprisingly, I find out that git alias is one ideal solution:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git alias is supported by default, no need to install any 3rd-party dependencies.&lt;/li&gt;
&lt;li&gt;Git alias is relatively easy to customize. Knowing git command and put an alias for it, that&amp;rsquo;s all about.&lt;/li&gt;
&lt;li&gt;Git alias is illegally powerful once you know how to use &lt;code&gt;!&lt;/code&gt; to run the external command! Yes, its existence is a crime.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;day-2-start-with-alias&#34;&gt;Day 2: start with [alias]&lt;/h3&gt;
&lt;p&gt;The official way to add git alias is to edit &lt;code&gt;~/.gitconfig&lt;/code&gt; file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open &lt;code&gt;~/.gitconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;[alias]&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;Put a bunch of aliases&lt;/li&gt;
&lt;li&gt;Save and close file, done!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this change, my alias setup looks like this:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[alias]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  a = add
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  c = commit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ca = commit --amend
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ci = commit -m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  cm = commit -m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  co = checkout
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  di = diff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  p = push origin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  pl = pull
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  rsthrd = reset --hard origin/master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  s = status&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p&gt;Those aliases cover all my basic needs of git workflow. For example, to add an untracked file, now I can type: &lt;code&gt;git a &amp;lt;untracked_file&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By using one letter alias for most commonly used git commands saves my time and gives me pleasures. Yeah, you know that typing fewer letters feels amazing!&lt;/p&gt;
&lt;h3 id=&#34;day-3-go-external-&#34;&gt;Day 3: go external !&lt;/h3&gt;
&lt;p&gt;As you may know, &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; is an extremely powerful tool (yep, it should be illegal as well). Imagine that git alias x fzf, what a dream team-up!&lt;/p&gt;
&lt;p&gt;By using &lt;code&gt;!&lt;/code&gt; symbol can make this dream come true. &lt;code&gt;!&lt;/code&gt; allows running external commands with the alias, including &lt;code&gt;git&lt;/code&gt; command itself. So many possibilities can be achieved by combining external commands.&lt;/p&gt;
&lt;p&gt;For example, I add an alias &lt;code&gt;ac&lt;/code&gt;, known as &lt;code&gt;add modified files&lt;/code&gt;, to add modified file:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[alias]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ac = ! git add $(git diff --name-only --diff-filter=M | fzf -m --bind &amp;#34;ctrl-a:select-all&amp;#34;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p class=&#34;video&#34;&gt;
  &lt;video controls src=&#34;https://kevcui.github.io/videos/git-alias-ac.mp4&#34;&gt;&lt;/video&gt;
&lt;/p&gt;

&lt;p&gt;The steps in this video are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git s&lt;/code&gt; to show unstaged changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git ac&lt;/code&gt; to list modified files in fzf, &lt;code&gt;ctrl-a&lt;/code&gt; to select all and &lt;code&gt;enter&lt;/code&gt; to add them&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git s&lt;/code&gt; to show the result that all modified files are added and staged&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;day-4-go-smooth&#34;&gt;Day 4: go smooth&lt;/h3&gt;
&lt;p&gt;To smooth git workflow, I tweak fzf key binding to configure command execution when selection is made in fzf.&lt;/p&gt;
&lt;p&gt;For example, I create an alias &lt;code&gt;ds&lt;/code&gt;, known as &lt;code&gt;diff staged files&lt;/code&gt;, to show changes in staged files and after pressing &lt;code&gt;enter&lt;/code&gt;, it goes to commit process directly:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[alias]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ds = ! git diff --name-only --cached | fzf --preview &amp;#34;git diff --cached -- {} | delta&amp;#34; --bind &amp;#34;enter:abort+execute(git commit)&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p class=&#34;video&#34;&gt;
  &lt;video controls src=&#34;https://kevcui.github.io/videos/git-alias-ds.mp4&#34;&gt;&lt;/video&gt;
&lt;/p&gt;

&lt;p&gt;The steps in this video are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git ds&lt;/code&gt; to show all staged files&lt;/li&gt;
&lt;li&gt;Check changes by switching files listed in fzf preview screen&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;enter&lt;/code&gt; to go to commit&lt;/li&gt;
&lt;li&gt;Type commit message and save it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you may also notice in the &lt;code&gt;ds&lt;/code&gt; alias, I&amp;rsquo;m now able to use &lt;code&gt;delta&lt;/code&gt; to format git diff in fzf preview screen, by piping diff to it.&lt;/p&gt;
&lt;p&gt;Until now, all the main problems I have with Tig are solved by git alias. I&amp;rsquo;d be happier than ever.&lt;/p&gt;
&lt;h3 id=&#34;day-5-go-dynamic&#34;&gt;Day 5: go dynamic&lt;/h3&gt;
&lt;p&gt;For some reason, I&amp;rsquo;d like to pass the file name as an argument to a git command bound with an alias.&lt;/p&gt;
&lt;p&gt;For example, I&amp;rsquo;d like to see certain change in a file, when and who made it, and all related changes in the same commit. It involves &lt;code&gt;git blame&lt;/code&gt; command with the file name as an argument. Without doubt, it&amp;rsquo;s possible to accomplish it with git alias by using &lt;code&gt;sh -c&lt;/code&gt; to pass arguments:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[alias]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  b = ! sh -c \&amp;#34;git blame $1 | fzf --bind &amp;#39;enter:abort+execute(git diff-tree -p {1} | delta)&amp;#39;\&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p class=&#34;video&#34;&gt;
  &lt;video controls src=&#34;https://kevcui.github.io/videos/git-alias-b.mp4&#34;&gt;&lt;/video&gt;
&lt;/p&gt;

&lt;p&gt;⚠️ Pay attention to escape single quotes &lt;code&gt;&#39;&lt;/code&gt; or/and double quotes &lt;code&gt;&amp;quot;&lt;/code&gt; inside &lt;code&gt;sh -c&lt;/code&gt; if needed.&lt;/p&gt;
&lt;p&gt;An alternative and more complex method is to bind a function, like &lt;code&gt;! f() {...}; f&lt;/code&gt;. Once you dig deeper in this way, you will certainly find the answers for all your needs.&lt;/p&gt;
&lt;h3 id=&#34;day-6-go-flexible&#34;&gt;Day 6: go flexible&lt;/h3&gt;
&lt;p&gt;Pursuing the ambition of customizing as many aliases as possible to perfectly suit my needs, the aliases are getting complicated with many duplicated and redundant codes. It&amp;rsquo;s hard to maintain in the configuration file like this:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[alias]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ac = ! git add $(git diff --name-only --diff-filter=M | fzf -0 -m --reverse --height=40% --bind tab:down,btab:up,ctrl-j:up,ctrl-k:down,change:top,alt-space:toggle,ctrl-a:select-all,ctrl-u:deselect-all --cycle)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  b = ! sh -c \&amp;#34;git blame $1 | fzf -0 --ansi --bind tab:down,btab:up,ctrl-j:up,ctrl-k:down,change:top,alt-space:toggle,ctrl-a:select-all,ctrl-u:deselect-all --bind &amp;#39;enter:abort+execute(git diff-tree -p {1} | delta --theme=iceberg)&amp;#39; --cycle\&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ds = ! git diff --name-only --cached | fzf -0 --ansi --preview-window=right:80:wrap --preview &amp;#39;git diff --cached -- {} | delta --theme=iceberg&amp;#39; --bind tab:down,btab:up,ctrl-j:up,ctrl-k:down,change:top,alt-space:toggle,ctrl-a:select-all,ctrl-u:deselect-all --bind alt-k:preview-down,alt-j:preview-up,alt-h:preview-page-down,alt-l:preview-page-up --bind &amp;#39;enter:abort+execute(git commit)&amp;#39; --cycle&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p&gt;For instance, if I want to update fzf preview screen key bindings for all aliases, I have to edit all aliases one by one. It&amp;rsquo;s a bummer.&lt;/p&gt;
&lt;p&gt;Luckily, git alias can be edited via command line:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ git config --global alias.&amp;lt;alias_name&amp;gt; &amp;lt;command&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p&gt;This creates the possibility to let Bash script handle flexibly the alias modifications. I can define some variables for the common parts in the aliases, which permits that the modifications in one location will affect all aliases at once.&lt;/p&gt;
&lt;p&gt;Here is a sample of Bash script:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# remove all aliases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global --remove-section &lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# set variables&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;FZF_KEYBINDING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tab:down,btab:up,ctrl-j:up,ctrl-k:down,change:top,alt-space:toggle,ctrl-a:select-all,ctrl-u:deselect-all&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;FZF_PREVIEW_KEYBINDING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt-k:preview-down,alt-j:preview-up,alt-h:preview-page-down,alt-l:preview-page-up&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;DIFF_CMD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;delta --theme=iceberg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;GIT_DIFF_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;git diff --name-only&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;GIT_DIFF_NAME_CACHED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GIT_DIFF_NAME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --cached&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;GIT_DIFF_TREE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;git diff-tree -p {1}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# define alias&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global alias.ac &lt;span class=&#34;s2&#34;&gt;&amp;#34;! git add \$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GIT_DIFF_NAME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --diff-filter=M | fzf -0 -m --reverse --height=40% --bind &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FZF_KEYBINDING&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --cycle)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global alias.b &lt;span class=&#34;s1&#34;&gt;&amp;#39;! sh -c &amp;#34;git blame $1 | fzf -0 --ansi --bind &amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FZF_KEYBINDING&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; --bind &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;enter:abort+execute(&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GIT_DIFF_TREE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; | &amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DIFF_CMD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; --cycle&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global alias.ds &lt;span class=&#34;s2&#34;&gt;&amp;#34;! &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GIT_DIFF_NAME_CACHED&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; | fzf -0 --ansi --preview-window=right:80:wrap --preview &amp;#39;git diff --cached -- {} | &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DIFF_CMD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; --bind &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FZF_KEYBINDING&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --bind &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FZF_PREVIEW_KEYBINDING&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --bind &amp;#39;enter:abort+execute(git commit)&amp;#39; --cycle&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p&gt;⚠️ Pay attention to escape &lt;code&gt;$&lt;/code&gt; symbol by &lt;code&gt;\$&lt;/code&gt;, in case &lt;code&gt;$&lt;/code&gt; symbol indicates the variable used in alias.&lt;/p&gt;
&lt;p&gt;In the example above, if I want to add more key bindings for fzf preview screen, I&amp;rsquo;ll modify &lt;code&gt;FZF_PREVIEW_KEYBINDING&lt;/code&gt; then run the Bash script. All aliases will be updated accordingly and beautifully.&lt;/p&gt;
&lt;p&gt;For more details and examples, go checkout &lt;a href=&#34;https://github.com/KevCui/dotfiles/blob/master/git/addalias.sh&#34;&gt;addalias.sh&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;day-7-go-extreme&#34;&gt;Day 7: go extreme&lt;/h3&gt;
&lt;p&gt;After 6 days hands-on of git alias configuration, it&amp;rsquo;s time to lay down holding a beer and enjoy the efficiency brought by git alias? Wait a minute here, I still have some small problems with the current setup:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Certain alias is conflicted with default git command. For example, &lt;code&gt;git am&lt;/code&gt; is already used by &lt;a href=&#34;https://git-scm.com/docs/git-am&#34;&gt;git-am&lt;/a&gt;, and &lt;a href=&#34;https://stackoverflow.com/a/3538791&#34;&gt;it&amp;rsquo;s impossible to overwrite git command by git alias&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Typing 3-letter &lt;code&gt;git&lt;/code&gt; to initial git command every time is fatigue.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&amp;rsquo;s time to push the limit and go extreme. To solve those problems, the idea is to create a function in &lt;code&gt;~/.zshrc&lt;/code&gt;, like:&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zshrc&#34; data-lang=&#34;zshrc&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;am&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        git ac
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        git &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- prettier-ignore-end --&gt;
&lt;p&gt;Now I&amp;rsquo;m able to use &lt;code&gt;am&lt;/code&gt; as &lt;code&gt;add modified files&lt;/code&gt;, way easier to remember than &lt;code&gt;ac&lt;/code&gt;. If on a rare occasion I want to use &lt;code&gt;git-am&lt;/code&gt;, I&amp;rsquo;ll just simply type &lt;code&gt;git am&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Meanwhile, using &lt;code&gt;g&lt;/code&gt; instead of &lt;code&gt;git&lt;/code&gt; reduces the time of typing 2 letters. What a pleasure for a lazy person like me!&lt;/p&gt;
&lt;h3 id=&#34;sum-up&#34;&gt;Sum-up&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Git alias is amazing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git alias with &lt;code&gt;!&lt;/code&gt; to execute external command is powerful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git alias combined with other commands like &lt;code&gt;fzf&lt;/code&gt; and &lt;code&gt;sh -c&lt;/code&gt; is matchless.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git alias created by Bash script is flexible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shell alias/function gives wings to git alias.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Did you git alias as well? What&amp;rsquo;s your favorite git alias? Share it with me and let me learn from you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Be Quiet</title>
      <link>https://kevcui.github.io/2019/07/27/be-quiet/</link>
      <pubDate>Sat, 27 Jul 2019 10:05:24 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2019/07/27/be-quiet/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://images.unsplash.com/photo-1453738773917-9c3eff1db985?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1000&amp;amp;q=80&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://unsplash.com/photos/ASKeuOZqhYU&#34;&gt;Jason Rosewell&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;p&gt;Nowadays, the Internet becomes an extremely loud and noisy place: endless notifications, messages, chats, posts, streamings, ads, spams, bots&amp;hellip; They are all shouting right in front of you anytime everywhere to catch your limited attention and to steal your precious time.&lt;/p&gt;
&lt;p&gt;Unfortunately, I&amp;rsquo;m a part of the problem by generating noisy contents: low-quality jokes, unrealistic complaints, and aggressive arguments&amp;hellip; Once I realized that, the feeling like a commuter in a subway during rush hour: being pushed around forward and backward, I cannot stand still for myself. I have to follow the flood of people walking towards one direction, meanwhile, push others to the same direction. Who knows in the end if there is a cliff waiting for us or not?&lt;/p&gt;
&lt;p&gt;I need to change right now.&lt;/p&gt;
&lt;h3 id=&#34;what-do-i-want&#34;&gt;What do I want&amp;hellip;?&lt;/h3&gt;
&lt;p&gt;What do I want by posting my comments, my photos, and my videos?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do I what to receive more likes than my peers? Envy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do I what to be famous followed by millions of followers? Pride.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do I what my opinions crush opponent&amp;rsquo;s opinions mercilessly? Wrath.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No, I want none of them. Pursuing them is not good for me. Then what do I really what? I want to share my life and my passion. That&amp;rsquo;s it, that simple.&lt;/p&gt;
&lt;h3 id=&#34;who-cares-about-that&#34;&gt;Who cares about that&amp;hellip;?&lt;/h3&gt;
&lt;p&gt;Who else cares about my life and my passion?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m no influencer, I&amp;rsquo;m no celebrity, I&amp;rsquo;m not even considered as popular. I&amp;rsquo;m a normal person having an ordinary life. Who does know real me on the Internet? Who cares about my life and my passion anyway?&lt;/p&gt;
&lt;p&gt;The Internet is too big, full of bots, zombies, and people who are keen to have listened&amp;hellip; Enough noise is continuously created around us to confuse our senses. In such a world, no one would even notice if my voice is absent, who cares?&lt;/p&gt;
&lt;p&gt;To the Internet, I&amp;rsquo;m 100% nonunique; To my family and my friends, I&amp;rsquo;m 100% irreplaceable. The real people who care about me are those who stay close to me. Thus, I&amp;rsquo;d prefer to have more one-on-one conversations, quiet and effective, rather than shout out loudly to the whole world only for reaching people closer to me.&lt;/p&gt;
&lt;h3 id=&#34;my-data-my-privacy&#34;&gt;My data, my privacy&lt;/h3&gt;
&lt;p&gt;I do want to share my life, including all those sweet moments, privately with my family and close friends. Those are my data, my privacy. They are not beneficial for other strangers, only becoming the interest of some bots. Why should I expose my life outside in public?&lt;/p&gt;
&lt;p&gt;Talking about the things I&amp;rsquo;m passionate about, the things I will continue learning and keep accumulating knowledge. I do need a quiet space to learn and think properly. It&amp;rsquo;s ok that it takes time to dig deeper. I should not be impulsive to argue with others or to exhibit my wisdom by showing my knowledge. Wisdom is in the silence. In the future, I may only focus on writing blog posts, as summaries of the learning progress, as well as useful documents for the future myself.&lt;/p&gt;
&lt;h3 id=&#34;be-quiet&#34;&gt;Be quiet&lt;/h3&gt;
&lt;p&gt;I need to be quiet. There are so many things to do in real life: reading, writing, walk outside, talk to friends in person, call family members, take care of myself&amp;hellip; Stay with people I love, spend my time loving them.&lt;/p&gt;
&lt;p&gt;From now on, I switch on read-only mode, tune down the volume of this noisy world, slow down the pace of following the crowd. Why should I catch that fast train like others? I even don&amp;rsquo;t know if it&amp;rsquo;s going to the direction where I want to go?&lt;/p&gt;
&lt;p&gt;Stop following the crowd, suddenly I can smell the fresh air from all over the place. My curiosity would guide me to take a peek behind the rocks. There would be a small path leading to a forest. The beautiful and peaceful nature there are waiting for me to explore.&lt;/p&gt;
&lt;p&gt;Shut up, be quiet. Listen, learn and love. ❤️&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twenty Months With Colemak</title>
      <link>https://kevcui.github.io/2019/04/18/twenty-months-with-colemak/</link>
      <pubDate>Thu, 18 Apr 2019 10:55:55 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2019/04/18/twenty-months-with-colemak/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*hcY3Bk8YY_1keCJW_b70Vw.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;p&gt;Time truly flies. It has been 20 months since &lt;a href=&#34;https://kevcui.github.io/2017/08/19/why-i-switch-to-colemak/&#34;&gt;I switched from QWERTY to Colemak keyboard layout&lt;/a&gt;. Am I now able to type on the Colemak keyboard as fast as the time flies? Certainly not. My typing speed 20 months ago was 75 WPM on average with QWERTY, now it&amp;rsquo;s 85 WPM on average with Colemak. I can feel the improvement and that&amp;rsquo;s why I never look back to QWERTY again.&lt;/p&gt;
&lt;p&gt;Besides things mentioned in &lt;a href=&#34;https://kevcui.github.io/2017/08/27/one-week-with-colemak/&#34;&gt;One Week with Colemak&lt;/a&gt;, are there somethings special happened during these 20 months?&lt;/p&gt;
&lt;h3 id=&#34;remap-caps-lock-as&#34;&gt;Remap Caps Lock as&amp;hellip;?&lt;/h3&gt;
&lt;p&gt;Caps Lock key is a huge waste on the standard keyboard. It locates in such important position but with less functional benefit. Some remap it as Escape key; some remap it as BackSpace key&amp;hellip;&lt;/p&gt;
&lt;p&gt;My favorite remapping solution is: Press Caps Lock once, it sends &amp;ldquo;Escape&amp;rdquo; key event; Hold Caps Lock, it sends &amp;ldquo;Control&amp;rdquo; key event. So, one Caps Lock key can act as Escape and Control combined together.&lt;/p&gt;
&lt;h4 id=&#34;how-to-achieve-this-key-binding-on-linux&#34;&gt;How to achieve this key binding on Linux?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Act as &lt;strong&gt;Control&lt;/strong&gt; when press and hold: HHKB keyboard by default puts Control key on the usual Caps Lock position, which is great for me, so no tweak is needed. For other keyboards, I usually use &lt;code&gt;xmodmap&lt;/code&gt; to map Caps Lock key as Left Control key.&lt;/li&gt;
&lt;li&gt;Act as &lt;strong&gt;Escape&lt;/strong&gt; when single press: &lt;a href=&#34;https://github.com/alols/xcape&#34;&gt;xcape&lt;/a&gt; can configure one key to act as other key when pressed and released:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xcape -t &lt;span class=&#34;m&#34;&gt;300&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;Control_L=Escape&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;how-to-achieve-this-key-binding-on-macos&#34;&gt;How to achieve this key binding on macOS?&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tekezo/Karabiner-Elements&#34;&gt;Karabiner&lt;/a&gt; is a great tool to achieve the same key binding conception on macOS. Karabiner supports customized json configuration file. Here is &lt;a href=&#34;https://github.com/KevCui/dotfiles/blob/master/karabiner/capslock.json&#34;&gt;my configuration file&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;key_code&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;caps_lock&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;modifiers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;any&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;key_code&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;right_control&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;to_if_alone&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;key_code&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;escape&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;some-small-troubles-in-the-real-world&#34;&gt;Some small troubles in the real world&lt;/h3&gt;
&lt;p&gt;When you use some uncommon tools in the real world, you know you have to prepare some small troubles that may come to you every day:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QWERTY is literally everywhere: Accept the reality and enforce the muscle memory of QWERTY layout as well. Otherwise, like me, I&amp;rsquo;m extremely clumsy when typing on QWERTY.&lt;/li&gt;
&lt;li&gt;Pair programming or testing on my machine: Remember to switch keyboard and key binding settings on the fly, depending on the person.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;This guy is a weirdo.&amp;rdquo;: So what?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Overall, I&amp;rsquo;m super happy with Colemak for now. I have no plan to learn another keyboard layout. I guess I will stick with Colemak for years. Maybe after some years, I&amp;rsquo;ll write another recap post about Colemak. I shall call it &amp;ldquo;Twenty Years With Colemak&amp;rdquo;. 😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build A Killer Note-taking System</title>
      <link>https://kevcui.github.io/2019/04/06/build-a-killer-note-taking-system/</link>
      <pubDate>Sat, 06 Apr 2019 10:29:29 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2019/04/06/build-a-killer-note-taking-system/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1440/1*zsmrN549VmJc13l4ViuFvA.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;p&gt;The proverb says, &amp;ldquo;The palest ink is better than the best memory&amp;rdquo;. Note-taking is certainly an essential part of knowledge learning, information collecting and retaining. In the fast-changing digital era, pen, ink and paper may not be able to fulfill the important job of note-taking anymore. So, what&amp;rsquo;s a killer note-taking system nowadays?&lt;/p&gt;
&lt;h3 id=&#34;my-requirements&#34;&gt;My requirements?&lt;/h3&gt;
&lt;p&gt;My dream system must be &lt;em&gt;Easy&lt;/em&gt;, &lt;em&gt;Efficient&lt;/em&gt; and &lt;em&gt;Flexible&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Know where &amp;amp; how to write notes easily without hesitations&lt;/li&gt;
&lt;li&gt;Find right notes &amp;amp; roll back to old changes efficiently without hassles&lt;/li&gt;
&lt;li&gt;Convert notes to other formats and share them flexibly without troubles&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;build-it&#34;&gt;Build it!&lt;/h3&gt;
&lt;h4 id=&#34;note-format&#34;&gt;Note format&lt;/h4&gt;
&lt;p&gt;I love taking notes with markdown. Why markdown?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s clean for writing and reading&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s efficient, almost like writing plain texts&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s flexible to convert to any other formats&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;note-taking--organization-app&#34;&gt;Note taking &amp;amp; organization app&lt;/h4&gt;
&lt;p&gt;I like doing everything in the terminal, so naturally, Vim is the best note-taking editor for me.&lt;/p&gt;
&lt;p&gt;For organizing notes, in the beginning, I set up different folders for different notes. But it&amp;rsquo;s not quite close to what I want. Especially, searching note is not a straightforward task, it needs to &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;grep&lt;/code&gt; for a while. Then I wrote a handy script &lt;a href=&#34;https://github.com/KevCui/pynote&#34;&gt;pynote&lt;/a&gt; for helping note organization, it worked and only at &amp;ldquo;it works&amp;rdquo; level&amp;hellip; Recently, I switched to the amazing &lt;a href=&#34;https://github.com/alok/notational-fzf-vim&#34;&gt;Notational Velocity for Vim&lt;/a&gt;, a plugin to port famous &lt;a href=&#34;http://notational.net/&#34;&gt;Notational Velocity&lt;/a&gt; into Vim. The whole note-taking experience never becomes so smooth! 💆‍♀️&lt;/p&gt;
&lt;h4 id=&#34;note-version-control-system&#34;&gt;Note version-control system&lt;/h4&gt;
&lt;p&gt;It&amp;rsquo;s easy. Git is the only reasonable option I can think of. &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;, make note changes, &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt; or &lt;code&gt;git revert&lt;/code&gt;&amp;hellip; All the fancy version control things are already familiar under my hands.&lt;/p&gt;
&lt;h4 id=&#34;note-auto-backup-system&#34;&gt;Note auto backup system&lt;/h4&gt;
&lt;p&gt;Google Drive? OneDrive? Dropbox? Nah, they are not really Git-compatible by default. However, I got inspired by &lt;a href=&#34;https://github.com/hbons/SparkleShare&#34;&gt;SparkleShare&lt;/a&gt;, an open-source file sync app powered by Git, it adds file changes and pushes them to Github or GitLab automatically.&lt;/p&gt;
&lt;p&gt;I may achieve the same functionality by using a simple script. The idea is to run &lt;a href=&#34;https://github.com/emcrisostomo/fswatch&#34;&gt;fswatch&lt;/a&gt; in the background and keep monitoring file changes. When file changes are happening, fswatch will trigger Git commands to add and push changes automatically.&lt;/p&gt;
&lt;p&gt;Here is a snippet of Bash script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; notesync&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  fswatch -r -0 -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;\.git&amp;#39;&lt;/span&gt; -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;inotify_monitor&amp;#34;&lt;/span&gt; --event&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Created --event&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Updated --event&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Removed &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -0 -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; zsh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;source ~/.zshrc; cd &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;; git add -A; git commit -m &amp;#39;Update file&amp;#39;; git push&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;notesync &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;folder_path&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;notesync &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;another_folder_path&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;fswatch part&lt;/strong&gt; is to monitor file changes, filter out correct file change events and send the signal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fswatch -r -0 -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;\.git&amp;#39;&lt;/span&gt; -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;inotify_monitor&amp;#34;&lt;/span&gt; --event&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Created --event&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Updated --event&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Removed &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ... &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;-r: watch subdirectories recursively&lt;/li&gt;
&lt;li&gt;-0: pass NUL as delimiter (no idea why it&amp;rsquo;s need&amp;hellip;..)&lt;/li&gt;
&lt;li&gt;-d: directory to monitor, the target folder full of notes&lt;/li&gt;
&lt;li&gt;-e: exude paths matching regex, here I don&amp;rsquo;t want to trigger Git commands when any changes are happening in &lt;code&gt;.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-m: monitor, type &lt;code&gt;fswatch -M&lt;/code&gt; to see available monitors, more details of all available monitors: &lt;a href=&#34;https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Monitors.html#Available-Monitors&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;ndash;event: filter event by event flag, mainly using events related to file changes, all available events: &lt;a href=&#34;https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Invoking-fswatch.html#Event-Flags-1&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;amp;: last but not least, don&amp;rsquo;t forget it at the end, because it provides the ability to run fswatch command in background and detach the process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;xargs part&lt;/strong&gt; is to get signal from fswatch and execute specific commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;... &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -0 -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;-0: input items are terminated by null, not whitespace (no idea why it&amp;rsquo;s needed&amp;hellip;)&lt;/li&gt;
&lt;li&gt;-n: maximum argument, &lt;code&gt;1&lt;/code&gt; it is&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;zsh command part&lt;/strong&gt; is to run Git commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;... zsh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;source ~/.zshrc; cd &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;; git add -A; git commit -m &amp;#39;Update file&amp;#39;; git push&amp;#34;&lt;/span&gt; ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;zsh -c: execute following commands in &lt;code&gt;zsh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;source ~/.zshrc: all my SSH keys are declared in &lt;code&gt;.zshrc&lt;/code&gt; file, this command will load configurations from &lt;code&gt;.zshrc&lt;/code&gt; file. Otherwise, push to remove Git repository may get permission denied&lt;/li&gt;
&lt;li&gt;git add -A &amp;hellip; : Git commands to add changes and push to remote repository. Some optimization ideas: 1) &lt;code&gt;git pull&lt;/code&gt; first, in case it&amp;rsquo;s a shared repository; 2) Put some specific texts in commit messages, maybe also including file names&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sumup&#34;&gt;Sumup&lt;/h4&gt;
&lt;p&gt;This is my killer note-taking system. It&amp;rsquo;s easy, efficient and flexible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Note format: Markdown
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Note taking &lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt; organization app: Vim + Notational Velocity for Vim
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Note version-control system: Git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Note auto backup system: fswatch + GitHub&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far I&amp;rsquo;m quite happy with this system. I enjoy using it not only for taking some private notes with my dirty secrets, but also for sharing notes with colleagues in my day-to-day work, like notes for &lt;a href=&#34;https://kevcui.github.io/2017/04/17/how-i-do-exploratory-testing/&#34;&gt;exploratory testing&lt;/a&gt;. Oh, I almost forget, guess what I&amp;rsquo;m using now for wring this blog post?&lt;/p&gt;
&lt;p&gt;How does your note-taking system look like? Share with me your awesome ideas?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Replace 8 Frequently Used Linux Commands!?</title>
      <link>https://kevcui.github.io/2018/09/02/replace-8-frequently-used-linux-commands/</link>
      <pubDate>Sun, 02 Sep 2018 17:21:08 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2018/09/02/replace-8-frequently-used-linux-commands/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*hcY3Bk8YY_1keCJW_b70Vw.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;style&gt;
.lnt {
    display: none
}
&lt;/style&gt;
&lt;p&gt;Almost a decade ago, I started to touch the command-line interface (CLI). I&amp;rsquo;m now a nerdy CLI lover and I&amp;rsquo;m so obsessed by its efficiency. Therefore, I&amp;rsquo;m always trying out new command-line commands. From time to time, some commands are replaced by other improved ones in my daily workflow. Especially for some frequently used commands, it&amp;rsquo;s worth to find better alternatives.&lt;/p&gt;
&lt;p&gt;Here is a list of improved commands I&amp;rsquo;d like to share with you:&lt;/p&gt;
&lt;h3 id=&#34;cd-z-up-and-fzf&#34;&gt;cd? z, up and fzf!&lt;/h3&gt;
&lt;h4 id=&#34;z&#34;&gt;z&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rupa/z&#34;&gt;z&lt;/a&gt; is a very popular alternative command for jumping around. &lt;code&gt;z&lt;/code&gt; doesn&amp;rsquo;t require any additional configurations. Although it works out of the box, you need just a little bit of patience. Because &lt;code&gt;z&lt;/code&gt; has a &amp;ldquo;magic&amp;rdquo; algorithm based on &amp;ldquo;frequency&amp;rdquo; which can learn from the frequent vested directories after your &lt;code&gt;cd&lt;/code&gt; around for a while.&lt;/p&gt;
&lt;p&gt;An easy and quick example how to &lt;code&gt;z&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/home/foo/bar/one/two/three
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ z tw
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/home/foo/bar/one/two
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ z foo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/home/foo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ z th
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/home/foo/bar/one/two/three&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Want to know how &amp;ldquo;frequency&amp;rdquo; score looks like for all directories? Simply run command &lt;code&gt;z -l&lt;/code&gt; will give you a list.&lt;/p&gt;
&lt;p&gt;Want to clean some/all saved directories? Simply modify &lt;code&gt;$HOME/.z&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;up&#34;&gt;up&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/shannonmoeller/up&#34;&gt;up&lt;/a&gt; is an interesting command to replace &lt;code&gt;cd ..&lt;/code&gt; and this ridicules one &lt;code&gt;cd ../../../../&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/home/foo/bar/one/two/three
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/home/foo/bar/one/two
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ up &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/home/foo/bar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ up h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/home&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;fzf&#34;&gt;fzf&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; is a versatile command, which can be combined in other commands. With the help of its amazing searchability, it can be used to &lt;a href=&#34;https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh&#34;&gt;&amp;ldquo;cd into the selected directory&amp;rdquo;&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&#34;embed&#34;&gt;
&lt;embed src=&#34;https://kevcui.github.io/videos/fzf-example.svg&#34; style=&#34;height:300px&#34;/&gt;
&lt;/p&gt;

&lt;h3 id=&#34;ls-exa&#34;&gt;ls? exa!&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ogham/exa&#34;&gt;exa&lt;/a&gt; aims to be the modem replacement for &lt;code&gt;ls&lt;/code&gt;. In my opinion, it did it. exa is really easy to use. Its options are straightforward:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kevcui.github.io/images/exa-example.jpg&#34; alt=&#34;exa-example&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here are my aliases:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;exa -s mod --git&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;exa -l -s mod --git --time-style=long-iso&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;More options to tweak exa: &lt;a href=&#34;https://the.exa.website/docs/command-line-options&#34;&gt;exa options&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;cat-bat&#34;&gt;cat? bat!&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;bat&lt;/a&gt; is a &lt;code&gt;cat&lt;/code&gt; clone with syntax highlighting, line numbers and automatic paging (using &lt;code&gt;less&lt;/code&gt; as the default pager). To display the contents of a file using &lt;code&gt;bat&lt;/code&gt; looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kevcui.github.io/images/bat-example.jpg&#34; alt=&#34;bat-example&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible to customize the theme of syntax highlighting. It supports Sublime Text syntax format. Check these default themes to have some inspirations: &lt;a href=&#34;https://github.com/sharkdp/bat/tree/master/assets/themes&#34;&gt;bat themes&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;grep-rg&#34;&gt;grep? rg!&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;rg&lt;/a&gt;, ripgrep, is fast &amp;amp; furious. It has almost the same parameters of &lt;code&gt;grep&lt;/code&gt; command, with improved output style and speed.&lt;/p&gt;
&lt;p&gt;One main usage of &lt;code&gt;grep&lt;/code&gt; for me is to find out which files contain some specific contents. An example to compare &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;ripgrep&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kevcui.github.io/images/grep-example.jpg&#34; alt=&#34;grep-example&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kevcui.github.io/images/ripgrep-example.jpg&#34; alt=&#34;ripgrep-example&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in how fast &lt;code&gt;rg&lt;/code&gt; can be? Check this comparison: &lt;a href=&#34;https://github.com/BurntSushi/ripgrep#quick-examples-comparing-tools&#34;&gt;rg vs. grep vs. ag. vs. ack&amp;hellip;&lt;/a&gt; Not sure if it&amp;rsquo;s still the case now. But overall, ripgrep is fast enough for my daily use.&lt;/p&gt;
&lt;h3 id=&#34;find-fd-and-fzf&#34;&gt;find? fd and fzf!&lt;/h3&gt;
&lt;h4 id=&#34;fd&#34;&gt;fd&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; is a replacement for &lt;code&gt;find&lt;/code&gt; focusing on user-friendly, with simplifying options of &lt;code&gt;find&lt;/code&gt;. For example, I want to edit a file but I don&amp;rsquo;t remember what&amp;rsquo;s its full path actually is. Usually, I need to find its full path first and then edit it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ find . -ipath &lt;span class=&#34;s2&#34;&gt;&amp;#34;*how*exp*&amp;#34;&lt;/span&gt; -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./2017/04/17/how-i-do-exploratory-testing/index.html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ vi ./2017/04/17/how-i-do-exploratory-testing/index.html&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Since I know the result will be only one file found, I can combine &lt;code&gt;vi&lt;/code&gt; inside &lt;code&gt;find&lt;/code&gt; command as well:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ find . -ipath &lt;span class=&#34;s2&#34;&gt;&amp;#34;*how*exp*&amp;#34;&lt;/span&gt; -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt; -exec vi &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With &lt;code&gt;fd&lt;/code&gt;, the command is more readable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ fd -p &lt;span class=&#34;s1&#34;&gt;&amp;#39;how.*exp.*/index&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2017/04/17/how-i-do-exploratory-testing/index.html&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;fzf-1&#34;&gt;fzf&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; has an extremely powerful fuzzy searchability. It can nest finding steps directly with another command. I bind the key &lt;a href=&#34;https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh&#34;&gt;&lt;code&gt;ctrl-t&lt;/code&gt; to enable fzf&lt;/a&gt;. As the same example as above, but with &lt;code&gt;fzf&lt;/code&gt;, it&amp;rsquo;s a completely different story:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ vi &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;press ctrl-t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;embed&#34;&gt;
&lt;embed src=&#34;https://kevcui.github.io/videos/fzf-example2.svg&#34; style=&#34;height:300px&#34;/&gt;
&lt;/p&gt;

&lt;p&gt;An alias to combine &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;fzf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;vif&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;vim $(fzf)&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;kill-fkill&#34;&gt;kill? fkill!&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/fkill&#34;&gt;fkill&lt;/a&gt;, its &lt;strong&gt;f&lt;/strong&gt; stands for &amp;ldquo;fabulously&amp;rdquo; (It&amp;rsquo;s definitely not the word I&amp;rsquo;m thinking in my mind 😉). Sometimes, &lt;code&gt;kill&lt;/code&gt; some zombie processes is necessary. &lt;code&gt;fkill&lt;/code&gt; can search a process and kill it interactively. It makes killing stylish:&lt;/p&gt;
&lt;p class=&#34;embed&#34;&gt;
&lt;embed src=&#34;https://kevcui.github.io/videos/fkill-example.svg&#34; style=&#34;height:300px&#34;/&gt;
&lt;/p&gt;

&lt;h3 id=&#34;watch-loop&#34;&gt;watch? loop!&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;UNIX&amp;rsquo;s missing loop command.&amp;rdquo;&lt;/em&gt; &lt;a href=&#34;https://github.com/Miserlou/Loop&#34;&gt;loop&lt;/a&gt; is designed to fill the gap. It works well to replace &lt;code&gt;watch&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# monitor current directory and print file list every 6 seconds&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# watch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ watch -n &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; ls -l
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ loop -e 6s &lt;span class=&#34;s1&#34;&gt;&amp;#39;ls -l&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Moreover, &lt;code&gt;loop&lt;/code&gt; has some awesome options to determine when to stop watching:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-c, --until-contains &amp;lt;until_contains&amp;gt;    Keep going until the output contains this string
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-r, --until-error &amp;lt;until_error&amp;gt;          Keep going until the command exit status is non-zero, or the value given
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-m, --until-match &amp;lt;until_match&amp;gt;          Keep going until the output matches this regular expression
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-t, --until-time &amp;lt;until_time&amp;gt;            Keep going until a future time, ex. &amp;#34;2018-04-20 04:20:00&amp;#34; (Times in UTC.)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Example: stop watching when &lt;code&gt;stop-now&lt;/code&gt; file is created and then open it in vim:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ loop -e 6s &lt;span class=&#34;s1&#34;&gt;&amp;#39;clear;date;ls -l&amp;#39;&lt;/span&gt; -c &lt;span class=&#34;s1&#34;&gt;&amp;#39;stop-now&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; vi stop-now&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;embed&#34;&gt;
&lt;embed src=&#34;https://kevcui.github.io/videos/loop-example.svg&#34; style=&#34;height:350px&#34;/&gt;
&lt;/p&gt;

&lt;p&gt;Actually, using &lt;code&gt;loop&lt;/code&gt; to replace &lt;code&gt;for&lt;/code&gt; command is also promising and full of pleasure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# create 10 markdown files: 0.md, 1.md ... 9.md&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; i &amp;lt; 10&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; i++&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; touch &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.md&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ loop -n &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;touch ${COUNT}.md&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;man-tldr-pet-and-how2&#34;&gt;man? tldr, pet and how2!&lt;/h3&gt;
&lt;h4 id=&#34;tldr&#34;&gt;tldr&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tldr-pages/tldr&#34;&gt;tldr&lt;/a&gt; is a simplified collection of man pages. It returns some command snippets with practical examples:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kevcui.github.io/images/tldr-example.jpg&#34; alt=&#34;tldr-example&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;pet&#34;&gt;pet&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knqyf263/pet&#34;&gt;pet&lt;/a&gt; is a CLI snippet manager. It&amp;rsquo;s a handy tool to save some commands snippets which are easily forgotten. The idea is to use &lt;code&gt;pet&lt;/code&gt; building own reference manuals.&lt;/p&gt;
&lt;h4 id=&#34;how2&#34;&gt;how2&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/santinic/how2&#34;&gt;how2&lt;/a&gt; takes another approach to search for the right command: it queries questions and answers from stackoverflow!&lt;/p&gt;
&lt;p class=&#34;embed&#34;&gt;
&lt;embed src=&#34;https://kevcui.github.io/videos/how2-example.svg&#34; style=&#34;height:300px&#34;/&gt;
&lt;/p&gt;

&lt;p&gt;In case the displayed answer is not what exactly you want, &lt;code&gt;how2&lt;/code&gt; provides &lt;a href=&#34;https://github.com/santinic/how2#usage&#34;&gt;the interactive mode&lt;/a&gt; to select in a list of all relative questions and answers.&lt;/p&gt;
&lt;p&gt;From now on, we can get confident to &amp;ldquo;save the world&amp;rdquo;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/tar.png&#34; alt=&#34;xkcd-tar&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Share this list if you think it&amp;rsquo;s a good read for other CLI nerds. 💝&lt;/p&gt;
&lt;p&gt;Drop me a message if you have other commands to recommend. ❤️&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 mitmproxy Tips You Might Not Know About</title>
      <link>https://kevcui.github.io/2018/07/28/3-mitmproxy-tips-you-might-not-know-about/</link>
      <pubDate>Sat, 28 Jul 2018 15:13:04 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2018/07/28/3-mitmproxy-tips-you-might-not-know-about/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*aleslIm6g3NqRL1xLQ3w5g.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://unsplash.com/photos/betmVWGYcLY&#34;&gt;Ashley Batz&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mitmproxy.org/&#34;&gt;mitmproxy&lt;/a&gt; is a powerful proxy tool for debugging network requests and responses. It&amp;rsquo;s my favorite proxy tool and becoming one of my daily essential tools for working. I would like to share with you 3 mitmproxy tips you might not know about.&lt;/p&gt;
&lt;p&gt;First things first, a small checklist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.mitmproxy.org/stable/concepts-modes/&#34;&gt;Do you know how mitmproxy works?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.mitmproxy.org/stable/overview-installation/&#34;&gt;Do you know how to install mitmproxy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.mitmproxy.org/stable/concepts-certificates/&#34;&gt;Do you know how to install CA cert on a client side?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these questions are way too easy for you and your answers are &lt;em&gt;&amp;ldquo;Yes! Yes! Yes!&amp;rdquo;&lt;/em&gt;, then continue reading. Otherwise, please click and read the links above, and see you here later.&lt;/p&gt;
&lt;h3 id=&#34;tips-1-custom-configuration-and-key-binding&#34;&gt;Tips 1: Custom configuration and key binding&lt;/h3&gt;
&lt;p&gt;One of the advantages of mitmproxy is highly customizable. It&amp;rsquo;s convenient to set up once configurations that every time mitmproxy loads them automatically when it starts. All the available handy &lt;strong&gt;options&lt;/strong&gt; are in the &lt;a href=&#34;https://docs.mitmproxy.org/stable/concepts-options/&#34;&gt;mitmproxy document&lt;/a&gt;. Here is my &lt;code&gt;~/.mitmproxy/config.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;console_palette&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;dark&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;console_palette_transparent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;console_mouse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;console_focus_follow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ignore_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As I&amp;rsquo;m using &lt;a href=&#34;https://kevcui.github.io/2017/08/27/one-week-with-colemak/&#34;&gt;colemak keyboard layout&lt;/a&gt;, &lt;em&gt;j&lt;/em&gt; and &lt;em&gt;k&lt;/em&gt; keys are opposite for the navigation of up and down in mitmproxy. I have to change these 2 keys to make navigation smooth. Before, to change key bindings in old versions, I have to hack around code in &lt;code&gt;defaultkeys.py&lt;/code&gt;. Since &lt;a href=&#34;https://mitmproxy.org/posts/releases/mitmproxy4/&#34;&gt;mitmproxy v4.0&lt;/a&gt;, custom key binding is finally officially supported! Here are my key bindings in &lt;code&gt;~/.mitmproxy/keys.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;global&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;console.nav.up&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;global&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;console.nav.down&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;flowlist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;console.nav.select&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To know more about which &lt;strong&gt;command&lt;/strong&gt; to use in &lt;strong&gt;cmd&lt;/strong&gt; field, type &lt;code&gt;K&lt;/code&gt; (shift + k) in mitmproxy. A list of current key bindings will show up. More information about key binging configuration is in the &lt;a href=&#34;https://docs.mitmproxy.org/stable/tools-mitmproxy/&#34;&gt;mitmproxy document&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;tips-2-knowing-client-connection-status-when-a-filter-is-applied&#34;&gt;Tips 2: Knowing client connection status when a filter is applied&lt;/h3&gt;
&lt;p&gt;It happens quite often to me: when I applied all filters in advance and then tried to connect a client to mitmproxy. However, there is nothing show up in the flow list. How do I know if it&amp;rsquo;s because &lt;em&gt;the client is not connected to the proxy successfully&lt;/em&gt; or &lt;em&gt;no requests are matching the filter&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;A usual but not good way: Well, I have to remove the filter to see all requests. If I can see requests from the client, then I will again apply the filter&amp;hellip;&lt;/p&gt;
&lt;p&gt;An easy way is to add &lt;code&gt;| .*&lt;/code&gt; in the filter, which will reveal all incoming requests. Yep, regex magic:&lt;/p&gt;
&lt;p class=&#34;embed&#34;&gt;
&lt;embed src=&#34;https://kevcui.github.io/videos/mitmproxy-filter-on.svg&#34; style=&#34;height:600px&#34;/&gt;
&lt;/p&gt;

&lt;p&gt;Another easy way is to simply type &lt;code&gt;E&lt;/code&gt; (shift+e), which will open events logs. It shows the client connection status. Use &lt;code&gt;q&lt;/code&gt; to quit events view:&lt;/p&gt;
&lt;p class=&#34;embed&#34;&gt;
&lt;embed src=&#34;https://kevcui.github.io/videos/mitmproxy-events-view.svg&#34; style=&#34;height:600px&#34;/&gt;
&lt;/p&gt;

&lt;h3 id=&#34;tips-3-using-mitmproxy-as-a-mock-server&#34;&gt;Tips 3: Using mitmproxy as a mock server&lt;/h3&gt;
&lt;p&gt;The killer feature of mitmproxy is scripting. Using python scripts, all requests and responses are fully controlled and changeable &lt;strong&gt;on the fly&lt;/strong&gt;. Besides that, mitmproxy is super robust to handle multiple clients simultaneously connected to one host. These features make mitmproxy a decent mock server. Therefore, I use mitmproxy a lot as &lt;a href=&#34;https://kevcui.github.io/2017/06/27/bad-use-of-a-good-tool/&#34;&gt;a mock server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, a script for the purpose of rewriting and mocking response body, &lt;a href=&#34;https://github.com/KevCui/mitm-scripts/tree/master/mitm-rewrite&#34;&gt;mitm-rewrite&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map &lt;code&gt;http://example.com/pass&lt;/code&gt; to &lt;code&gt;test_pass.json&lt;/code&gt; &lt;em&gt;(terminal on the bottom left)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Create mock response data in &lt;code&gt;test_pass.json&lt;/code&gt; &lt;em&gt;(terminal on the bottom right)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Visit &lt;code&gt;http://example.com/pass&lt;/code&gt; on the client side&lt;/li&gt;
&lt;li&gt;The initial response is now replaced by the one in &lt;code&gt;test_pass.json&lt;/code&gt; &lt;em&gt;(terminal on top)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KevCui/mitm-scripts/master/screenshot/mitm-rewrite-example.jpg&#34; alt=&#34;mitmproxy mock server picture&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you want to know more useful scripts, I have a &lt;a href=&#34;https://github.com/KevCui/mitm-scripts&#34;&gt;mitm-scripts collection&lt;/a&gt; to check out. If you want to make your own scripts, there are &lt;a href=&#34;https://github.com/mitmproxy/mitmproxy/tree/master/examples/simple&#34;&gt;some examples&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Didn&amp;rsquo;t try mitmproxy yet? Get it a try. 😉&lt;/p&gt;
&lt;p&gt;Know other mitmproxy tricks? Tell me more. 😍&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ship PWA Guided by Lighthouse</title>
      <link>https://kevcui.github.io/2017/12/03/ship-pwa-guided-by-lighthouse/</link>
      <pubDate>Sun, 03 Dec 2017 11:35:21 +0100</pubDate>
      
      <guid>https://kevcui.github.io/2017/12/03/ship-pwa-guided-by-lighthouse/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/2000/1*c4LxfFXAUMhEzNiXsGXbQg.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://unsplash.com/photos/D5OzyJ71mLI&#34;&gt;Robert Wiedemann&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;p&gt;Nowadays, PWA is so hyped. All the cool kids are implementing PWA, or on the way to implement it. It&amp;rsquo;s like a magic box, they said, what contains ultimate happiness for users. Wow it sounds awesome, right? How is it possible that I could miss this opportunity to stay as a member of the cool kids club?&lt;/p&gt;
&lt;h3 id=&#34;what-is-actually-pwa&#34;&gt;What is actually PWA?&lt;/h3&gt;
&lt;p&gt;According to Google, &lt;em&gt;Progressive Web Apps are user experiences that have the reach of the web, and are&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reliable: Load instantly and never show the downasaur, even in uncertain network conditions.&lt;/li&gt;
&lt;li&gt;Fast: Respond quickly to user interactions with silky smooth animations and no janky scrolling.&lt;/li&gt;
&lt;li&gt;Engaging: Feel like a natural app on the device, with an immersive user experience.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personally, I prefer another alternative version because it uses one word to represent PWA: &lt;em&gt;F.I.R.E 🔥 Fast, Integrated, Reliable and Engaging.&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;p&gt;Many people are confused by the fancy term of PWA, like this: &lt;em&gt;Google&amp;rsquo;s continued use of the term &amp;ldquo;quality&amp;rdquo; in describing things leaves me with a ton of confusion&amp;hellip;&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back3&#34;&gt;&lt;a href=&#34;#link3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;To be honest, PWA is not a new technology at all. It&amp;rsquo;s &lt;strong&gt;a new web app quality standard for web experiences&lt;/strong&gt; &lt;sup&gt;&lt;a name=&#34;back4&#34;&gt;&lt;a href=&#34;#link4&#34;&gt;[4]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-to-get-my-app-on-fire&#34;&gt;How to get my app on F.I.R.E.?&lt;/h3&gt;
&lt;p&gt;Are you sold by the idea of PWA? I&amp;rsquo;ll buy it. Because I would do whatever I could to improve the user experience. So, I decided to optimize my blog site for reaching PWA standard.&lt;/p&gt;
&lt;h4 id=&#34;step-1-run-a-performance-audit&#34;&gt;Step 1: Run a performance audit&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleChrome/lighthouse&#34;&gt;Lighthouse&lt;/a&gt; is a must-have tool to audit web app performance. Lighthouse is already integrated in the recent versions of Chrome and Chromium, as a part of DevTools, which makes it super convenient to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Inspect -&amp;gt; Audits -&amp;gt; Perform an audit...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;step-2-read-audit-report-carefully&#34;&gt;Step 2: Read audit report carefully&lt;/h4&gt;
&lt;p&gt;After running an audit in Lighthouse, it will provide a detailed report. First, it shows the overall scores:&lt;/p&gt;
&lt;p class=&#34;imagsup&#34;&gt;
    &lt;img src=&#34;https://kevcui.github.io/images/lighthouse-before-overview.jpg&#34; alt=&#34;before-overview&#34;/&gt;
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt; Overview of the first Lighthouse audit result &lt;/em&gt;
        
    &lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not surprised by this result, not at all. These numbers are making people feel good when they have greens. Besides that, I would suggest to ignore them.&lt;/p&gt;
&lt;p&gt;When continuing reading the report, I find the interesting parts: failed audits. It&amp;rsquo;s a nicely organized To-Do list, especially the &lt;em&gt;Learn more&lt;/em&gt; links which open documents to explain why the audit is important and how to pass the audit.&lt;/p&gt;
&lt;p class=&#34;imagsup&#34;&gt;
    &lt;img src=&#34;https://kevcui.github.io/images/lighthouse-before-pwa.jpg&#34; alt=&#34;before-pwa&#34;/&gt;
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt; Failed audits for PWA section &lt;/em&gt;
        
    &lt;/sup&gt;
&lt;/p&gt;

&lt;h4 id=&#34;step-3-get-hands-dirty&#34;&gt;Step 3: Get hands dirty&lt;/h4&gt;
&lt;p&gt;It&amp;rsquo;s time to handle all failed cases one by one. Most of them are rather easy to solve by following &amp;ldquo;Learn more&amp;rdquo; tutorials. Only &amp;ldquo;Does not register a Service Worker&amp;rdquo; and &amp;ldquo;Does not respond with a 200 when offline&amp;rdquo; are relatively tough. I&amp;rsquo;d like to share some tips, which come from my Aha moments.&lt;/p&gt;
&lt;p&gt;A working service worker has 4 essential parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;manifest.json: It&amp;rsquo;s a json file located in &lt;em&gt;/&lt;/em&gt; &lt;strong&gt;web app root directory&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;short_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Kevin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Kevin Cui&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;icons&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/images/kc.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;sizes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;512x512&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;start_url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;background_color&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;theme_color&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;standalone&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Link manifest.json in &lt;em&gt;index.html&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;manifest&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/manifest.json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Service worker js: It must be created in &lt;strong&gt;web app root directory&lt;/strong&gt;, alongside with &lt;em&gt;manifest.json&lt;/em&gt;. Here is an example of the service worker called &lt;em&gt;sw.js&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CACHE_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;kevin-site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;urlsToCache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;/#blog&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;/css/font.min.css&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;/css/animate.min.css&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;/css/monokai.min.css&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;/js/umbrella.min.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;/js/highlight.min.js&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;install&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// Perform install steps
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;waitUntil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;caches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CACHE_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Opened cache&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;urlsToCache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fetch&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;respondWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;caches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetchRequest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fetchRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;basic&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;responseToCache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;caches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CACHE_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;responseToCache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;A piece of JavaScript code to register service worker in &lt;em&gt;index.html&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;serviceWorker&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serviceWorker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./sw.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Service Worker Registered&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;registration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Service Worker Failed to Register&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more details of all these parts above, there is a good tutorial to follow: &lt;a href=&#34;https://codelabs.developers.google.com/codelabs/add-to-home-screen/#0&#34;&gt;Add Your Web App to a User&amp;rsquo;s Home Screen&lt;/a&gt; and a good example of PWA app to check its source code: &lt;a href=&#34;https://github.com/GoogleChromeLabs/airhorn&#34;&gt;airhorn&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;my-app-is-on-&#34;&gt;My app is on 🔥!&lt;/h3&gt;
&lt;p&gt;Once the dirty jobs are well done, it&amp;rsquo;s time to run another performance audit. Although I know all score numbers are meaningless without contexts, it still feels damn awesome when I see all greens, right?&lt;/p&gt;
&lt;p class=&#34;imagsup&#34;&gt;
    &lt;img src=&#34;https://kevcui.github.io/images/lighthouse-after-overview.jpg&#34; alt=&#34;after-overview&#34;/&gt;
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt; Another overview of Lighthouse audit result &lt;/em&gt;
        
    &lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;Surprisingly, Firefox now starts to support PWA as well.&lt;/p&gt;
&lt;h3 id=&#34;what-else&#34;&gt;What else?&lt;/h3&gt;
&lt;p&gt;I have to admit that it&amp;rsquo;s not hard to pass Lighthouse audit checks. However, I must keep in mind that it&amp;rsquo;s just one step of improving web app performance towards the goal of &amp;ldquo;better user experience&amp;rdquo;. Many steps ahead I still need to move on.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s your opinion about PWA? Would you like to ship your app guided by Lighthouse? And join the cool kids club?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; Google: &lt;a href=&#34;https://developers.google.com/web/progressive-web-apps/?hl=en&#34;&gt;Progressive Web Apps&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; Ewa Gasperowicz: &lt;a href=&#34;https://www.youtube.com/watch?v=KRSTpo6gqqU&#34;&gt;From Website to Progressive Web App&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link3&#34;&gt;&lt;a href=&#34;#back3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt; Ben Halpern: &lt;a href=&#34;https://dev.to/ben/what-the-heck-is-a-progressive-web-app-seriously-923&#34;&gt;What the heck is a &amp;ldquo;Progressive Web App&amp;rdquo;? Seriously.&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link4&#34;&gt;&lt;a href=&#34;#back4&#34;&gt;[4]&lt;/a&gt;&lt;/a&gt; Thao Tran and Chris Wilson: &lt;a href=&#34;https://www.youtube.com/watch?v=PsgW-0M67TQ&#34;&gt;The New Bar for Web Experiences&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hi Firefox!</title>
      <link>https://kevcui.github.io/2017/11/16/hi-firefox/</link>
      <pubDate>Thu, 16 Nov 2017 18:04:57 +0100</pubDate>
      
      <guid>https://kevcui.github.io/2017/11/16/hi-firefox/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*9mBvw14zpiMV-7GOrNVJ_w.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://www.flickr.com/photos/garrett/280258600/in/photostream/&#34;&gt;Garrett LeSage&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;p&gt;In case you are seeking for an answer of the question: &amp;ldquo;Do I need to switch from Chrome to Firefox now?&amp;rdquo; In my opinion, if you&amp;rsquo;re still happy with Chrome, then feel comfortable to stay with Chrome. Because there is no obvious game-changing reason for switching.&lt;/p&gt;
&lt;p&gt;So, what&amp;rsquo;s new about Firefox?&lt;/p&gt;
&lt;h3 id=&#34;new-name&#34;&gt;New Name&lt;/h3&gt;
&lt;p&gt;Half year ago, you may (or may not) notice that I said &lt;a href=&#34;https://kevcui.github.io/2017/03/27/bye-firefox/&#34;&gt;Goodbye to Firefox&lt;/a&gt;. However, with a mixed feeling of curiosity and nostalgia, several weeks ago I started to try out Firefox 57 nightly version. It&amp;rsquo;s the version officially released 2 days ago, which is so hyped that moz://a decided to put a name on it: Firefox Quantum.&lt;/p&gt;
&lt;h3 id=&#34;new-feeling&#34;&gt;New Feeling&lt;/h3&gt;
&lt;p&gt;Firefox Quantum feels fast. That&amp;rsquo;s right. This is the first impression that moz://a wants to express to everyone. Delivered with this feeling, a message is clearly announcing: Firefox is reborn.&lt;/p&gt;
&lt;p&gt;As we all know, speed is always the main selling point of Chrome. Yes, you are probably thinking about this creative advertisement: &lt;a href=&#34;https://www.youtube.com/watch?v=nCgQDjiotG0&#34;&gt;Google Chrome Speed Tests&lt;/a&gt;. Now Firefox Quantum comes with another eye-catching phrase &amp;ldquo;Fast for good&amp;rdquo;. With similar speed, &lt;em&gt;30% less memory usage&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;, more privacy protection, doesn&amp;rsquo;t your heart beat faster for that, does it?&lt;/p&gt;
&lt;h3 id=&#34;new-battle&#34;&gt;New Battle&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;It&amp;rsquo;s just the beginning of Firefox Quantum&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; aiming for the top web browser. It&amp;rsquo;s too early to tell if Firefox can beat its opponents or not. Not saying the ancient issues opened for decades, but &lt;a href=&#34;https://github.com/servo/servo/issues&#34;&gt;the new issues of Servo&lt;/a&gt; cause my concerns and worries.&lt;/p&gt;
&lt;p&gt;However, releasing Firefox Quantum is undoubtedly the declaration of new browser battle. It&amp;rsquo;s a solid punch towards Chrome&amp;rsquo;s face. At least, after so many years being an underdog, Firefox finally stands up and shows its motivation to fight, making people reconsider Firefox as an option of the main browser.&lt;/p&gt;
&lt;p&gt;I, as an end-user, don&amp;rsquo;t really care about the result of who is the winner, Chrome, Firefox or whatever dark horse. But I would be super excited to see more awesome features coming to current browsers, which make them better than yesterday.&lt;/p&gt;
&lt;p&gt;We, acting like competition judges, are waiting to see the best performance of each browser showing to us. We will continuously have better options to choose.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the bright future I&amp;rsquo;m waiting for. That&amp;rsquo;s the mission Firefox have to fulfill as a challenger. That&amp;rsquo;s why I&amp;rsquo;m back to Firefox and say again &amp;ldquo;Hi Firefox!&amp;rdquo;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;https://blog.mozilla.org/firefox/quantum-performance-test/&#34;&gt;Firefox Quantum is super fast, while still conserving memory&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;https://medium.com/mozilla-tech/a-quantum-achievement-d7aa759a0ccb&#34;&gt;A Quantum Achievement: But it’s Just the Beginning&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Asking Better Questions for 4 Different Purposes</title>
      <link>https://kevcui.github.io/2017/10/03/ask-better-questions-for-four-different-purposes/</link>
      <pubDate>Tue, 03 Oct 2017 17:50:00 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/10/03/ask-better-questions-for-four-different-purposes/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*_7gaDlQJMxk0nz5w3CSklQ.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://unsplash.com/@jdsimcoe/&#34;&gt;Jonathan Simcoe&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;You should not ask questions without knowledge.&amp;rdquo; &amp;ndash; W. Edwards Deming&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A good tester asks good questions. Asking questions is a must-have skill for a software tester. Therefore, as a software tester, I see asking questions as a privilege, which is allowed under any circumstances. However, asking questions is not always easy. We all know sometimes a bad question may cause some communication troubles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An unnecessary question makes developers annoyed.&lt;/li&gt;
&lt;li&gt;A wrong question makes POs confused&lt;/li&gt;
&lt;li&gt;An absurd question makes stakeholders scared.&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Understanding the purposes of questions may help to ask them effectively. I&amp;rsquo;d like to share some thoughts on how to ask better questions for 4 different purposes.&lt;/p&gt;
&lt;h3 id=&#34;i-ask-myself-questions-before-asking-people-questions&#34;&gt;I ask myself questions before asking people questions&lt;/h3&gt;
&lt;p&gt;Before asking questions, I consider asking myself questions first to figure out 2 important things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The background of the current situation - questions to figure out &amp;ldquo;what to question&amp;rdquo;:
&lt;ul&gt;
&lt;li&gt;Do I understand the current situation?&lt;/li&gt;
&lt;li&gt;Is there anything unclear for me or for others?&lt;/li&gt;
&lt;li&gt;Is my question important to make the current situation clear for me or for others?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The target - questions to figure out &amp;ldquo;question to who&amp;rdquo;:
&lt;ul&gt;
&lt;li&gt;Do I find the correct person/group to address my questions?&lt;/li&gt;
&lt;li&gt;Do I reduce the number of unnecessary persons?&lt;/li&gt;
&lt;li&gt;Is the target person/group available at the moment?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the answers are all &amp;ldquo;yeah&amp;rdquo; for the questions above, it&amp;rsquo;s good to go ahead!&lt;/p&gt;
&lt;h3 id=&#34;i-ask-questions-to-collect-information&#34;&gt;I ask questions to collect information&lt;/h3&gt;
&lt;p&gt;It applies to the situation that I&amp;rsquo;m the one who wants to know the answer. Another person may give me the information. Usually, &lt;a href=&#34;https://en.wikipedia.org/wiki/Open-ended_question&#34;&gt;open questions&lt;/a&gt; are preferable in this case.&lt;/p&gt;
&lt;p&gt;The background:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Current situation: Bob and Stuart were paring on some tasks. But these tasks are marked as &amp;ldquo;blocked&amp;rdquo; on our scum board.&lt;/li&gt;
&lt;li&gt;Unclear thing for me: These tasks are blocked for which reason?&lt;/li&gt;
&lt;li&gt;Purpose of the question: I need to know what I can help.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The target:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correct person: Bob and Stuart&lt;/li&gt;
&lt;li&gt;Unnecessary person: Bob or Stuart, no need both of them&lt;/li&gt;
&lt;li&gt;Available person: Bob. He is going to have a coffee, without his headphone.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it comes to my question to Bob: &lt;em&gt;&amp;ldquo;I saw that some tasks of this story are currently blocked. I want to know if I can support you on these tasks. Maybe you know what is the blocker?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;i-ask-questions-to-confirm-a-response&#34;&gt;I ask questions to confirm a response&lt;/h3&gt;
&lt;p&gt;It applies to the situation that I already knew the answer, but some wordings or terms would confuse people. Usually, &lt;a href=&#34;https://en.wikipedia.org/wiki/Closed-ended_question&#34;&gt;closed questions&lt;/a&gt; are preferable in this case.&lt;/p&gt;
&lt;p&gt;The background:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Current situation: App has a feature toggle which is disabling the new feature. Now we plan to release the new feature to customers. Bob, PO and I are discussing to turn feature toggle OFF.&lt;/li&gt;
&lt;li&gt;Unclear thing for people: Bob might think that turning feature toggle OFF means still disabling the new feature.&lt;/li&gt;
&lt;li&gt;Purpose of the question: It confirms that everyone is clear to let customers see the new feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The target:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correct person: Bob and PO&lt;/li&gt;
&lt;li&gt;Unnecessary person: None&lt;/li&gt;
&lt;li&gt;Available person: Bob and PO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it comes to my question at the end of discussion: &lt;em&gt;&amp;ldquo;As we discussed, we are going to remove the feature toggle now and release the new feature. Does it means that our customers will see this new feature in the next release?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;i-ask-questions-to-make-a-suggestion&#34;&gt;I ask questions to make a suggestion&lt;/h3&gt;
&lt;p&gt;It applies to the situation that I probably know the correct answer, but others may or may not think about it yet. As it&amp;rsquo;s a suggestion and I&amp;rsquo;m not the person who will proceed working on it, I will pay attention to leave it as open as possible for the further discussion.&lt;/p&gt;
&lt;p&gt;The background:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Current situation: Bob, Designer, PO and I are planning to have new designs of component A and component B in this release. Due to the schedule, they are not possible to be completed together in the same release.&lt;/li&gt;
&lt;li&gt;Unclear thing for others: Component B is dependent on component A, but A is independent on B.&lt;/li&gt;
&lt;li&gt;Purpose of the question: It provides a solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The target:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correct person: Bob, Stuart, Designer and PO&lt;/li&gt;
&lt;li&gt;Unnecessary person: None&lt;/li&gt;
&lt;li&gt;Available person: Bob, Stuart, Designer and PO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it comes to my question during the discussion: &lt;em&gt;&amp;ldquo;As we all know, it&amp;rsquo;s impossible to finish new designs of both component A and component B. Since the new design of B depends on A but A doesn&amp;rsquo;t depends on B. How about we focus on finishing component A in this release first and then start to work on B in the next release?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;i-ask-questions-to-probe-the-thinking&#34;&gt;I ask questions to probe the thinking&lt;/h3&gt;
&lt;p&gt;It applies to the situation that no one has an idea for what is happening. And the root cause is unknown. Usually, &lt;a href=&#34;https://en.wikipedia.org/wiki/5_Whys&#34;&gt;5-whys&lt;/a&gt; is useful to determine the root cause.&lt;/p&gt;
&lt;p&gt;The background:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Current situation: Recently many customers send us reports and logs because they cannot log in the app anymore. After an investigation, Bob and Stuart cannot find any useful information to go further.&lt;/li&gt;
&lt;li&gt;Unclear thing for people: The root cause of users cannot log in is unknown.&lt;/li&gt;
&lt;li&gt;Purpose of the question: It probes thinking to find out root cause.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The target:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correct person: Bob and Stuart&lt;/li&gt;
&lt;li&gt;Unnecessary person: None&lt;/li&gt;
&lt;li&gt;Available person: Bob and Stuart&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it comes to my question to start the discussion: &lt;em&gt;&amp;ldquo;After we read all users&amp;rsquo; reports and logs, what is the common thing they all have? Same language, same location, same OS, same device or&amp;hellip;&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then, we take a careful look at all reports and logs. We find that all customers have the devices from the same manufacturer and they have the same OS.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Why the issue happens only on the devices from this manufacturer, with this specific OS?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then, we search for the news of changes in the new OS provided by this manufacturer. We find that this manufacturer made some changes on handling log-in events. Apparently, some other apps have the similar log-in issue on those devices.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Since the OS changes impact on our app and other apps, what&amp;rsquo;s the common thing in our app and in other impacted apps have?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Each question brings us to a deeper investigation until we finally determine the root cause.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The ultimate goal of asking questions is to eliminate ambiguities. Every question has to serve its purpose: &lt;strong&gt;to collect information&lt;/strong&gt;, &lt;strong&gt;to confirm a response&lt;/strong&gt;, &lt;strong&gt;to make a suggestion&lt;/strong&gt; and &lt;strong&gt;to probe the thinking&lt;/strong&gt;. Understanding which purpose your question is serving will help you to ask better questions.&lt;/p&gt;
&lt;p&gt;Do you have any questions?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/F1T5fmx.gif&#34; alt=&#34;question&#34;&gt;&lt;/p&gt;
&lt;!--
# Thoughts
m y o
x - -
x x -
x - x
x x x
- x -
- - x
- x x
- - -

m: me
y: you
o: others
x: got answer
-: no answer

k me - to make a suggestion
k me, you, others - don&#39;t waste time to ask questions
k me, you or others - to confirm a response
nk you/others, you and others - to collect information
nk null - to initialize a discussion

ideas for further:
care of wording
given when then: simplify actions
ask why to what no who
multiple questions in a roll
Listening is the key
avoid double negative
--&gt;
</description>
    </item>
    
    <item>
      <title>One Week with Colemak</title>
      <link>https://kevcui.github.io/2017/08/27/one-week-with-colemak/</link>
      <pubDate>Sun, 27 Aug 2017 10:07:30 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/08/27/one-week-with-colemak/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*f9faYiSaK7qnUoXfSSn5YA.png&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;p&gt;Last weekend, I decided to &lt;a href=&#34;https://kevcui.github.io/2017/08/19/why-i-switch-to-colemak/&#34;&gt;switch from QWERTY to Colemak keyboard layout&lt;/a&gt;. Did I suffer a lot since then? Of course no, well, maybe a little bit. After &amp;ldquo;one-week intensive typing training&amp;rdquo;, actually I quite enjoy the fresh feeling of typing with Colemak. I&amp;rsquo;m pretty happy that now I am able to type on Colemak keyboard layout with the average speed &lt;strong&gt;50 WPM&lt;/strong&gt;. I would say that it&amp;rsquo;s good enough for daily life. If you happen to be interested in switching to Colemak, here are my short notes for every day of last week and how my &amp;ldquo;intensive&amp;rdquo; training looks like.&lt;/p&gt;
&lt;h3 id=&#34;d1---saturday&#34;&gt;D1 - Saturday&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Time Spent: 1 hour&lt;/li&gt;
&lt;li&gt;Typing Speed: 15 WPM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/has1WKhoorwLS/giphy.gif&#34; alt=&#34;Jon knows&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;plan-just-do-it&#34;&gt;Plan? Just do it!&lt;/h4&gt;
&lt;p&gt;There are some different approaches to help people switching to Colemak progressively. One interesting approach is called &lt;a href=&#34;https://forum.colemak.com/topic/1858-learn-colemak-in-steps-with-the-tarmak-layouts/&#34;&gt;Tarmak&lt;/a&gt; (Transitional Colemak) learning layouts. Tarmak has 4 layouts in total, &lt;em&gt;each of the 4 Tarmak layouts changes 3–4 new keys from the previous step until you&amp;rsquo;ve made the full transition to Colemak.&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;In deed, it sounds like a good plan. But I didn&amp;rsquo;t go that way, I chose a crazy approach: go &lt;a href=&#34;https://www.phrases.org.uk/meanings/cold-turkey.html&#34;&gt;cold turkey&lt;/a&gt;. I get rid of QWERTY and use Colemak immediately. Because I believe that I could handle the change to Colemak completely at once. At the end, it&amp;rsquo;s all about training &lt;strong&gt;muscle memory&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;remember-the-layout&#34;&gt;Remember the layout&lt;/h4&gt;
&lt;p&gt;First things first, remember &lt;a href=&#34;https://colemak.com/wiki/images/8/80/Colemak_layout_2.png&#34;&gt;the layout&lt;/a&gt;. To be familiar with Colemak layout, I spent 30 minutes on typing alphabet &amp;ldquo;abcdefgh&amp;hellip;&amp;rdquo; repeatedly, until I am 100% sure that all 26 letters are in their correct positions.&lt;/p&gt;
&lt;h3 id=&#34;d2---sunday&#34;&gt;D2 - Sunday&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Time spent: 3 hours (3 1-hour sessions)&lt;/li&gt;
&lt;li&gt;Typing speed: 25 WPM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-vORSs1Agga4/UrbyY7kXPPI/AAAAAAAAPd0/bnmMeUBEL5U/s1600/little-finger-nod.gif&#34; alt=&#34;little finger&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;brain-takes-full-control&#34;&gt;Brain takes full control&lt;/h4&gt;
&lt;p&gt;After I memorized the layout, the real &amp;ldquo;intensive&amp;rdquo; training began. The main site I used is &lt;a href=&#34;https://www.speedtypingonline.com/typing-test&#34;&gt;Speed Typing Online&lt;/a&gt;. One article after another, I keep typing. Meanwhile, I have to let my brain know exactly what I need to do and then my fingers would be forced to do it. This process of erasing muscle memory is slow. My brain needs to be highly focused in order to control each single movement of my fingers, and to prevent these movements initialized by old muscle memory.&lt;/p&gt;
&lt;h4 id=&#34;pinky-is-weaky&#34;&gt;Pinky is weaky&lt;/h4&gt;
&lt;p&gt;One difficulty I did realize is that my right little finger is weaker than my other fingers. Before with QWERTY, it takes control of letter &amp;ldquo;P&amp;rdquo;, which appearance frequency is way more lower than the letter &amp;ldquo;O&amp;rdquo;. Now with Colemak, it has to take care of letter &amp;ldquo;O&amp;rdquo;. This sudden increase of heavy work load on the shoulder of right pinky finger makes it clumsy. I can really feel the &amp;ldquo;stop&amp;rdquo; moment when letter &amp;ldquo;O&amp;rdquo; is needed. So I have to focus on training pinky finger, even more.&lt;/p&gt;
&lt;h3 id=&#34;d3---monday&#34;&gt;D3 - Monday&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Time spent: 1 hour training + 8 hours working&lt;/li&gt;
&lt;li&gt;Typing speed: 28 WPM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/m6tmCnGCNvTby/giphy.gif&#34; alt=&#34;shame&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;productivity&#34;&gt;Productivity?&lt;/h4&gt;
&lt;p&gt;As I decided to go cold turkey and I don&amp;rsquo;t want a detour, I changed the keyboard layout on my working laptop to Colemak as well. I remember my first and second login attempts were failed, after that, nothing was really struggling. To be honest, the typing speed around 25 WPM is enough for daily work, but the efficiency is&amp;hellip; meh&amp;hellip; Especially, when replying someone&amp;rsquo;s questions in chat app, I feel sorry to let people on another side waiting a bit longer than usual. Besides that, when I was coding/scripting, I felt that I have more time for thinking, which might be a good thing.&lt;/p&gt;
&lt;h4 id=&#34;smartphone-out&#34;&gt;Smartphone out!&lt;/h4&gt;
&lt;p&gt;As the inventor of Colemak mentioned, &lt;em&gt;Colemak isn&amp;rsquo;t recommended for smartphones as it increases finger travel and error rate compared to QWERTY. On smartphones I would recommend gesture typing on a QWERTY layout&lt;/em&gt;. &lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; Furthermore, the muscle memory of typing on smartphone keyboard is not the same. Therefore, I will still keep using QWERTY layout in smartphone until one day another &amp;ldquo;advanced&amp;rdquo; keyboard layout invented for smartphone.&lt;/p&gt;
&lt;h3 id=&#34;d4---tuesday&#34;&gt;D4 - Tuesday&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Time spent: 1 hour training + N hours working + N hours imagining&lt;/li&gt;
&lt;li&gt;Typing speed: 30 WPM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/1qyXr3Dtl7pRe/giphy.gif&#34; alt=&#34;imagining&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;use-imagination&#34;&gt;Use imagination&lt;/h4&gt;
&lt;p&gt;I found a magic way to perform typing training without a physical keyboard: using my imaginations. For instance, when I am in public transport, I&amp;rsquo;d like to listen to podcasts. From the earphones I heard the words, then I put my hands in the air and move fingers to type these words. Others who were watching at me may think that I could be a pianist, or probably a madman.&lt;/p&gt;
&lt;h3 id=&#34;d5---wednesday&#34;&gt;D5 - Wednesday&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Time spent: 1 hour training + N hours working + N hours imagining&lt;/li&gt;
&lt;li&gt;Typing speed: 40 WPM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/TkWeMtX2N9z2M/giphy.gif&#34; alt=&#34;aiming&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;targeted-training&#34;&gt;Targeted training&lt;/h4&gt;
&lt;p&gt;It&amp;rsquo;s time to have more targeted training of some common suffixes. In theory, if I could type them unconsciously as a reflection, my typing speed would increase a lot. So I made a list of suffixes to focus on:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-ly, -ing, -ion, -er, -or, -ment, -ous, -ful, -able
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On the other hand, I found that I made many mistakes on top row letters &amp;ldquo;f&amp;rdquo;, &amp;ldquo;g&amp;rdquo;, &amp;ldquo;l&amp;rdquo; and &amp;ldquo;y&amp;rdquo;. I keep in my mind to pay attention to them: be accurate first, then speed up.&lt;/p&gt;
&lt;p&gt;Moreover, I started to learn typing systematically by following the lessons on &lt;a href=&#34;https://www.typing.com/student&#34;&gt;typing.com&lt;/a&gt;. I skipped the entire beginner lessons and some lessons designed for QWERTY only.&lt;/p&gt;
&lt;h3 id=&#34;d6---thursday&#34;&gt;D6 - Thursday&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Time spent: 1 hour training + N hours working + N hours imagining&lt;/li&gt;
&lt;li&gt;Typing speed: 50 WPM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rE9hjAG.gif&#34; alt=&#34;repeat&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;repetition-repetition-repetition&#34;&gt;Repetition, Repetition, Repetition&amp;hellip;&lt;/h4&gt;
&lt;p&gt;Every day, I am better at typing than yesterday. I felt my muscle memory is improved little by little: now I don&amp;rsquo;t need to think about the layout ahead! It means that I can think other stuff in my mind while typing letters on the keyboard. It&amp;rsquo;s definitely a good sign, which tastes so sweet. It&amp;rsquo;s the power of repetition and the outcome of never-give-up.&lt;/p&gt;
&lt;h3 id=&#34;d7---friday&#34;&gt;D7 - Friday&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Time spent: 1 hour training + N hours working + N hours imagining&lt;/li&gt;
&lt;li&gt;Typing speed: 52 WPM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/6ffREbfXxiTnO/giphy.gif&#34; alt=&#34;fun&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;time-to-have-fun&#34;&gt;Time to have fun&lt;/h4&gt;
&lt;p&gt;After these days&amp;rsquo; practices, I know I am on the right track to achieve the success. Although it&amp;rsquo;s important as my daily routine to keep using &lt;a href=&#34;https://www.speedtypingonline.com/typing-test&#34;&gt;Speed Typing Online&lt;/a&gt; and following basic lesson on &lt;a href=&#34;https://www.typing.com/student&#34;&gt;typing.com&lt;/a&gt;, learning typing can also be full of fun, without the boredness of repetition. It&amp;rsquo;s time to discover something new and have some fun:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thetypingcat.com/typing-speed-test/&#34;&gt;TypingCAT&lt;/a&gt;: It&amp;rsquo;s an ordinary typing site. But its UI is super clean and comfortable. It will make you feel awesome when you are typing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ratatype.com/typing-test/test/&#34;&gt;Ratatype typing test&lt;/a&gt;: Instead of the usual time-box approach, this site requires you to finish the whole article and then shows your score. Their typing materials are really good. They normally have 50-100 words, with the mix of letters, numbers and punctuations.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://play.typeracer.com/&#34;&gt;typeracer&lt;/a&gt;: A typing competition is presented as a form of car racing game. It supports Multiplayer &amp;ldquo;racing&amp;rdquo; together. Its UI is okish and its material is so-so. But if you want to see how is your performance under stress, it&amp;rsquo;s a good game to play.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dn---in-the-future&#34;&gt;D(n) - In the future&amp;hellip;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ySplUIE.png&#34; alt=&#34;success kid&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-use-caps-lock-as&#34;&gt;1. Use Caps Lock as&amp;hellip;?&lt;/h4&gt;
&lt;p&gt;Colemak maps Caps Lock key to Backspace. It makes sense to have another Backspace on the left hand to balance its usage in two hands. But so far I don&amp;rsquo;t use it at all. Maybe I will map it to Esc, which is useful in Vim.&lt;/p&gt;
&lt;h4 id=&#34;2-get-rid-of-bad-habits&#34;&gt;2. Get rid of bad habits&lt;/h4&gt;
&lt;p&gt;I still need to get rid of some bad habits of using QWERTY:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always use left thumb to tap Space bar&lt;/li&gt;
&lt;li&gt;Always use left pinky to tap Shift&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know how to do it correctly, but&amp;hellip; Fine, I will do it correctly in the future.&lt;/p&gt;
&lt;h4 id=&#34;3-colemak-x-vim&#34;&gt;3. Colemak x Vim&lt;/h4&gt;
&lt;p&gt;New layout for Vim is a tough challenge. I had several oops-moment which are caused by &amp;ldquo;gg&amp;rdquo; vs. &amp;ldquo;dd&amp;rdquo;. But I don&amp;rsquo;t think I will remap keys to make the original Vim style alike. I prefer to relearn it with Colemak from scratch. Here is the &lt;a href=&#34;https://c1.staticflickr.com/6/5060/5421396271_68f3d12c9e_b.jpg&#34;&gt;Colemak/vim cheat sheet&lt;/a&gt; &lt;sup&gt;&lt;a name=&#34;back3&#34;&gt;&lt;a href=&#34;#link3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. I know it will take a while to fully operate Vim with Colemak.&lt;/p&gt;
&lt;h4 id=&#34;4-get-qwerty-mode-back&#34;&gt;4. Get &amp;ldquo;QWERTY mode&amp;rdquo; back?&lt;/h4&gt;
&lt;p&gt;As a side effect, the muscle memory of QWERTY is completely lost. I cannot type with QWERTY layout anymore. Should I train myself to get QWERTY mode back in the future? I guess no ¯\_(ツ)_/¯&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; Øystein Bech Gadmar: &lt;a href=&#34;https://forum.colemak.com/topic/1858-learn-colemak-in-steps-with-the-tarmak-layouts/&#34;&gt;How does Tarmak work?&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; Shai Coleman: &lt;a href=&#34;https://colemak.com/FAQ#Is_Colemak_suitable_for_smartphones.3F&#34;&gt;Is Colemak suitable for smartphones?&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link3&#34;&gt;&lt;a href=&#34;#back3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt; Aimee Rivers: &lt;a href=&#34;https://sermoa.wordpress.com/2011/12/16/colemak-and-vim-but-what-about-hjkl/&#34;&gt;&amp;ldquo;Colemak and vim&amp;rdquo;: But what about h/j/k/l?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Switch to Colemak Keyboard Layout?</title>
      <link>https://kevcui.github.io/2017/08/19/why-i-switch-to-colemak/</link>
      <pubDate>Sat, 19 Aug 2017 20:48:03 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/08/19/why-i-switch-to-colemak/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://colemak.com/wiki/images/e/ef/Colemak_fingers.png&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://colemak.com/FAQ&#34;&gt;Colemak&lt;/a&gt;, pronounced /&amp;lsquo;ko:lmæk/ (Coal-Mac), is a keyboard layout based on QWERTY. It&amp;rsquo;s developed by &lt;a href=&#34;https://ie.linkedin.com/in/shaicoleman&#34;&gt;Shai Coleman&lt;/a&gt; and released in 2006. Colemak keyboard layout looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  q w f p g j l u y &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   a r s t d h n e i o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    z x c v b k m , . /
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s special about Colemak?  Why do I decide to switch from QWERTY to Colemak?&lt;/p&gt;
&lt;h3 id=&#34;reason-1-discard-qwerty&#34;&gt;Reason 1: Discard QWERTY&lt;/h3&gt;
&lt;p&gt;As we all known, QWERTY was originally designed for the typewriter to solve the problem of the type bars colliding with each other and jamming. The idea behind is &lt;em&gt;to arrange the keys with the most common letters in hard to reach spots, to slow typists down and try to avoid typewriter jams&lt;/em&gt;. &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in more stories of QWERTY, &lt;a href=&#34;http://discovermagazine.com/1997/apr/thecurseofqwerty1099&#34;&gt;The Curse of QWERTY&lt;/a&gt; is a nice article to read.&lt;/p&gt;
&lt;p&gt;Since the mechanical typewriters vanished from historical stage and all the modern computers don&amp;rsquo;t have &amp;ldquo;mechanical sticking&amp;rdquo; problem, why we still need to bear the pain of the inefficiency of QWERTY? It&amp;rsquo;s time to let QWERTY be retired with honor. Let it go!&lt;/p&gt;
&lt;h3 id=&#34;reason-2-i-want-a-challenge&#34;&gt;Reason 2: I want a challenge&lt;/h3&gt;
&lt;p&gt;When I was 14 years old, I started to learn to type on a typewriter in school. Yes, a real typewriter and it&amp;rsquo;s amazing! I can still recall the comment when type bars hit on paper, the sound and the feeling are so satisfying. At the end of the semester, I successfully passed typing exam with the speed of 70 WPM. Now it has been 15 years, my speed stays around 75 WPM. For me, it&amp;rsquo;s obviously not improved at all&amp;hellip;&lt;/p&gt;
&lt;p&gt;As a guy who is eager for something new and obsessed with efficiency, I don&amp;rsquo;t believe that 75 WPM is my limit. I&amp;rsquo;m afraid that QWERTY itself is the obstacle. Maybe an alternative keyboard would unchain my ability. That&amp;rsquo;s why I want a challenge to see how fast I&amp;rsquo;m able to type.&lt;/p&gt;
&lt;h3 id=&#34;reason-3-efficiency-is-the-key&#34;&gt;Reason 3: Efficiency is the key&lt;/h3&gt;
&lt;p&gt;Colemak is designed to be &lt;em&gt;ergonomic, comfortable and fast.&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&#34;http://mkweb.bcgsc.ca/carpalx/?popular_alternatives&#34;&gt;carpalx analysis&lt;/a&gt;, Colemak has a quite low typing effort among 10 keyboard layouts. The carpalx detailed analysis &lt;sup&gt;&lt;a name=&#34;back3&#34;&gt;&lt;a href=&#34;#link3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; shows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Colemak has a great home row usage 74%, compared to QWERTY 34% and Dvorak 71%&lt;/li&gt;
&lt;li&gt;Colemak bottom row usage is low at 9%, the same as Dvorak, which is better than QWERTY 15%&lt;/li&gt;
&lt;li&gt;Colemak is more balanced in hand use, with a 6% preference for the right hand. Dvorak has 14% for the right and QWERTY 15% for the left&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is an app to analyze the different keyboard layouts. It&amp;rsquo;s called &lt;a href=&#34;http://patorjk.com/keyboard-layout-analyzer/#/main&#34;&gt;Keyboard Layout Analyzer&lt;/a&gt;. I&amp;rsquo;m curious how the result would be. So I tried to input:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A recent &lt;a href=&#34;http://www.bbc.com/news/world-europe-40990927&#34;&gt;BBC article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;George R. R. Martin &lt;a href=&#34;https://www.biography.com/people/george-r-r-martin-20786615?_escaped_fragment_=&#34;&gt;Biography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One of my &lt;a href=&#34;https://github.com/kevcui/hearthstone-cards-searcher/blob/master/hsSearch.py&#34;&gt;python script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My blog &lt;a href=&#34;https://raw.githubusercontent.com/kevcui/kevcui.github.io/master/index.html&#34;&gt;index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One of my blog &lt;a href=&#34;https://kevcui.github.io/2016/12/23/my-year-2016/&#34;&gt;post&lt;/a&gt; plain text&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result of these 5 rounds: Colemak scores the highest in each round.&lt;/p&gt;
&lt;p&gt;High home row usage, less finger travel distance, and balanced left-right hands&amp;hellip; These advantages of Colemak make it as one of the best keyboard layouts for improving efficiency and ergonomics.&lt;/p&gt;
&lt;h3 id=&#34;reason-4-easy-to-learn&#34;&gt;Reason 4: Easy to learn&lt;/h3&gt;
&lt;p&gt;I remember 5 years ago, I planned to switch to Dvorak. But I was totally failed after 1-week struggling. Because the transition phrase from QWERTY to Dvorak is really hard, I was not good enough to use only Dvorak at work. Therefore, it required me to memorize 2 different keyboard layouts at the same time, which was possible for my brain but impossible for my muscles. I was kidding at that time: I need at least a 2-months vacation to train Dvorak without any productivity.&lt;/p&gt;
&lt;p&gt;To learn Colemak, I feel it would be a different story. Colemak is based on QWERTY layout, which means it&amp;rsquo;s built without the terrifying prospect of changing everything. &lt;em&gt;The Colemak layout is reasonably similar to QWERTY with just 17 different keys as opposed to Dvorak&amp;rsquo;s 33, and only two letters P and E that move from one hand to the other, whereas with Dvorak it&amp;rsquo;s 22.&lt;/em&gt; &lt;sup&gt;&lt;a name=&#34;back4&#34;&gt;&lt;a href=&#34;#link4&#34;&gt;[4]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Colemak is rather easy to learn. It took me only 30 min to memorize Colemak keyboard layout without any frustration. After 1 day training, now I&amp;rsquo;m already used to it. I estimate that a 2-days weekend should be enough for me to have a reasonable typing speed. It wouldn&amp;rsquo;t cause my huge headache to use Colemak at work next Monday.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;These tantalizing reasons give me the motivation to switch to Colemak. I guess I have to face this challenge and I will be busy with training next week. Challenge is on and change is now.&lt;/p&gt;
&lt;p&gt;Happy typing Colemak!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media0.giphy.com/media/toXKzaJP3WIgM/giphy.gif&#34; alt=&#34;typing&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; HowStuffWorks: &lt;a href=&#34;https://computer.howstuffworks.com/question458.htm&#34;&gt;Why are the keys arranged the way they are on a QWERTY keyboard?&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; Shai Coleman: &lt;a href=&#34;https://colemak.com/&#34;&gt;Colemak advantages&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link3&#34;&gt;&lt;a href=&#34;#back3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt; Carpalx: &lt;a href=&#34;http://mkweb.bcgsc.ca/carpalx/?colemak&#34;&gt;Colemak typing effort&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link4&#34;&gt;&lt;a href=&#34;#back4&#34;&gt;[4]&lt;/a&gt;&lt;/a&gt; Eric Limer: &lt;a href=&#34;http://www.popularmechanics.com/technology/a20524/learning-to-type-again-colemak&#34;&gt;Why I&amp;rsquo;m Learning To Type All Over Again&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2 CSS Effect Libraries for Creating Fancy Animations</title>
      <link>https://kevcui.github.io/2017/07/11/css-effect-libraries-for-creating-fancy-animations/</link>
      <pubDate>Tue, 11 Jul 2017 20:57:53 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/07/11/css-effect-libraries-for-creating-fancy-animations/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*fXBo56b0tanSCNHo4O2eWw.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://unsplash.com/photos/5Ntkpxqt54Y&#34;&gt;Sai Kiran Anagani Vijayawada&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;p&gt;Animation is fun. It makes everything look vivid. A good animation is that you won&amp;rsquo;t notice its existence but it pleases your eyes and makes you feel good!&lt;/p&gt;
&lt;p&gt;To see fancy animations is really enjoyable, but to make it is not. Specially for me, a CSS -webkit newbie, creating animations with CSS is a dirty job. It needs a lot of guess work and experiments to archive the expect results. Fortunately, there are many interesting CSS effect libraries could support me to fulfill the mission. I would like to recommend 2 useful CSS libraries, which helped me to create &amp;ldquo;fancy&amp;rdquo; animations efficiently. All the codes below can be found in my &lt;a href=&#34;https://github.com/kevcui/hugo-uno-dark&#34;&gt;hugo-uno-dark&lt;/a&gt; theme repository.&lt;/p&gt;
&lt;h3 id=&#34;hovercss&#34;&gt;hover.css&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ianlunn.github.io/Hover/&#34;&gt;Hover.css&lt;/a&gt; is a great CSS library. It contains almost all hover effects. On the demo site, all possible animations are well presented. Once you got your favorite one, the implication is easy. You could either go straight forward to include the whole library and add the class name in the HTML tags. Or you could search for the effect inside the raw CSS file and then copy that part into your CSS file. The last step is to add animation class name in HTML tag. It&amp;rsquo;s a piece of cake. These are stylish animations I picked and what they look like:&lt;/p&gt;
&lt;h4 id=&#34;bubble-left--right&#34;&gt;&lt;strong&gt;Bubble left &amp;amp; right&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://kevcui.github.io/images/prev_next.gif&#34; alt=&#34;prev-next&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;underline-from-left&#34;&gt;&lt;strong&gt;Underline from left&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://kevcui.github.io/images/hover.gif&#34; alt=&#34;hover&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;bounce-to-right&#34;&gt;&lt;strong&gt;Bounce to right&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://kevcui.github.io/images/title_animation.gif&#34; alt=&#34;bounce&#34;&gt;&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t mock me because of my bad animation taste. Once you know how to do it, then you would apply it everywhere. It&amp;rsquo;s never too fancy, right?&lt;/p&gt;
&lt;h3 id=&#34;animatecss&#34;&gt;animate.css&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://daneden.github.io/animate.css/&#34;&gt;animate.css&lt;/a&gt; is a super-star CSS library for creating page transitions. Almost all basic (PowerPoint style?) page transitions can be found in this library. The usage is simple. First of all, it needs to include animate.css in your project, file or hosted link as you prefer. Then you only need to add class name animated and effect name in HTML tag.&lt;/p&gt;
&lt;p&gt;But I didn&amp;rsquo;t use this fixed way. I want to add animation dynamically with jQuery. For example, I did for of articles fade-in appearing on post summary page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;animated fadeIn&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://kevcui.github.io/images/fadein.gif&#34; alt=&#34;article&#34;&gt;&lt;/p&gt;
&lt;p&gt;You may notice that there is a delay of fade-in effect. It&amp;rsquo;s a CSS trick. Actually, I set a 0.2s interval between the presences of 2 articles:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;nth-child&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;animation-delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;nth-child&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;animation-delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.4&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;nth-child&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;animation-delay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;Et voilà, 2 powerful CSS libraries get fancymation job done. During my small &amp;ldquo;weekend project&amp;rdquo;, I added other animations for my blog. I had a fun time playing around CSS for animations. Furthermore, I&amp;rsquo;m happy that I learned how to use 2 awesome CSS libraries, which I could share with you here. #AnimateAlltheThings!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bad Use of A Good Tool</title>
      <link>https://kevcui.github.io/2017/06/27/bad-use-of-a-good-tool/</link>
      <pubDate>Tue, 27 Jun 2017 21:43:23 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/06/27/bad-use-of-a-good-tool/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*Y7unAywBRkUxr51nVx_kvg.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://www.flickr.com/photos/clumsyjim/1907979770/&#34;&gt;Jim&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If all you have is a hammer, everything looks like a nail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every sprint, we have a team testing session with one hour fixed time slot. It&amp;rsquo;s a team-fun-thing for all team members to try out new features. I take the honor to &lt;a href=&#34;https://kevcui.github.io/2016/12/01/lets-have-some-fun-team-exploratory-testing/&#34;&gt;organize this testing party&lt;/a&gt;. But unfortunately, the last sprint I failed to prepare test devices in time, which causes that the team testing didn&amp;rsquo;t end very well. I feel shame for it. I ask myself why it happened? After I think again and again, one thing I could tell is because of &lt;strong&gt;my bad use of a good tool&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;a-good-tool&#34;&gt;A good tool&lt;/h3&gt;
&lt;p&gt;Undeniably, &lt;a href=&#34;https://www.charlesproxy.com/&#34;&gt;Charles&lt;/a&gt; is an excellent debugging proxy. It&amp;rsquo;s powerful and handy. With a clean UI and easy setup, it becomes my daily tool. I rely on it to inspect HTTP/HTTPS requests and response, set breakpoints, simulate response status, mock response, bandwidth throttling, etc&amp;hellip;&lt;/p&gt;
&lt;p&gt;Naturally, more I use it, more I like it; More I will use it, then I will like it more&amp;hellip;.&lt;/p&gt;
&lt;h3 id=&#34;bad-use&#34;&gt;Bad use&lt;/h3&gt;
&lt;p&gt;One day, I tried &lt;a href=&#34;https://www.charlesproxy.com/documentation/tools/rewrite/&#34;&gt;rewrite tool&lt;/a&gt; in Charles to replace a simple JSON API response by some mock data. I found surprisingly that it worked very well. Since that, I started to add more and more rewriting rules for this and that&amp;hellip; Nowadays the set of rewriting rules becomes really complex. The mock data I used to replace response which started from the beginning as 4 lines, until now the entire content of a 4K file!&lt;/p&gt;
&lt;p&gt;Sometimes I complain &amp;ldquo;Why Charles gives users only 1-line input filed for replacing stuff. It&amp;rsquo;s not possible to edit long text. How bad design it is!&amp;rdquo; Now I think it again and I have to admit that Charles is not designed for that. I use it wrongly. I should use it as a simple match-replace function for some strings, that&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;Another mistake I made is to treat it as a proxy server. Usually, I connect 1 Android and 1 iOS device to Charles proxy. But the craziest time, like last team testing, I ran Charles with heavy mock data and planned to setup the connection of 10+ mobile devices. The connection was not stable at all. The half of devices were disconnected frequently.&lt;/p&gt;
&lt;p&gt;As it&amp;rsquo;s named as &amp;ldquo;debugging proxy&amp;rdquo;, it&amp;rsquo;s unfair for it to support 10+ devices &amp;ldquo;debugging&amp;rdquo; at the same time.&lt;/p&gt;
&lt;h3 id=&#34;right-tool-for-the-job&#34;&gt;Right tool for the job&lt;/h3&gt;
&lt;p&gt;Charles proxy is not a snake oil for manipulating http requests. It has its pros and cons. In my case, I need a proxy tool to mock response data heavily and to change mock data easily, meanwhile it should also provide stable connections of massive mobile devices for testing. Charles is a good tool for sure, but in this case, it&amp;rsquo;s not the right tool for my need.&lt;/p&gt;
&lt;p&gt;I have to search for a proper solution. I find that &lt;a href=&#34;https://mitmproxy.org/&#34;&gt;mitmproxy&lt;/a&gt; could be a candidate to try out. Because of open-source and the support of customized python script, it would be flexible to adapt all kinds of situations. All I need to do is to make scripts to fulfill my need. I like making my hands dirty. Luckily, mitmproxy provides a good &lt;a href=&#34;http://docs.mitmproxy.org/en/stable/&#34;&gt;documentation&lt;/a&gt; and nice &lt;a href=&#34;https://discourse.mitmproxy.org/&#34;&gt;forums&lt;/a&gt;. At the end, it&amp;rsquo;s not too hard to write &lt;a href=&#34;https://github.com/kevcui/mitm-rewrite-script&#34;&gt;mitm-rewrite-script&lt;/a&gt;, which provides me the function I need.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Tools are designed to help us to deal with the problems. Depends on the different situations and the strength &amp;amp; weakness of tools, I have to think carefully and decide which one to use. Probably mitmproxy is my new proxy-hammer, but I won&amp;rsquo;t see everything like a nail. Once I decided that it is a good time to use Charles properly, I would say loudly and confidently &amp;ldquo;&lt;strong&gt;I choose you, Charles!&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo x Github Pages</title>
      <link>https://kevcui.github.io/2017/06/18/hugo-github-pages/</link>
      <pubDate>Sun, 18 Jun 2017 15:55:09 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/06/18/hugo-github-pages/</guid>
      <description>&lt;p&gt;It has been 2 months since I switched &lt;a href=&#34;https://kevcui.github.io/2017/04/12/why-hugo-why-not-hexo/&#34;&gt;from Hexo to Hugo&lt;/a&gt;. Everything went smoothly. Until yesterday, I made a small mistake. I messed up my entire blog Git repository, then I have to reconfigure the part of deploying Hugo website to Github Pages&amp;hellip;&lt;/p&gt;
&lt;p&gt;To be honest, the initial configuration is simple but I cannot recall it at all. That&amp;rsquo;s why I finally decide to write down this quick note, for the forgetful people, like me.&lt;/p&gt;
&lt;p&gt;Hugo has a good doc to explain &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;how to host on Github Pages&lt;/a&gt;. Based on it, my configuration is following:&lt;/p&gt;
&lt;h3 id=&#34;add-worktree&#34;&gt;Add Worktree&lt;/h3&gt;
&lt;p&gt;Basally, I created 2 repositories for my blog. One is the theme I used, it&amp;rsquo;s called &lt;a href=&#34;https://github.com/kevcui/uno&#34;&gt;uno&lt;/a&gt;. The other one is for both posts and generated static files. Its name is &lt;a href=&#34;https://github.com/kevcui/kevcui.github.io&#34;&gt;kevcui.github.io&lt;/a&gt;, a name predefined by Github Pages. I decide the put them in one repository because it&amp;rsquo;s easy to maintenance. I separated them into 2 different branches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Branch &lt;strong&gt;hugo&lt;/strong&gt;: posts, assets&amp;hellip;&lt;/li&gt;
&lt;li&gt;Branch &lt;strong&gt;master&lt;/strong&gt;: public/ folder with all the generated static files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then I need to link the &lt;strong&gt;public/&lt;/strong&gt; to &lt;strong&gt;master&lt;/strong&gt; branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rm -rf public
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rm -rf ./worktrees
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git worktree add -B master public origin/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-deploy-script&#34;&gt;Create deploy script&lt;/h3&gt;
&lt;p&gt;Here is my deploy script &lt;a href=&#34;https://github.com/kevcui/kevcui.github.io/blob/hugo/deploy.sh&#34;&gt;deploy.sh&lt;/a&gt;. The theme I&amp;rsquo;m using is &lt;a href=&#34;https://github.com/kevcui/uno&#34;&gt;uno&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create worktree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# git worktree add -B master public origin/master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Build the project.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo -t uno
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Go To Public folder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Add changes to git.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add -A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Remove original js files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; js
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls -1 --color&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;none &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;min.js&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs rm -f
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Remove original css files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ../css
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls -1 --color&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;none &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;min.css&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs rm -f
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Commit changes.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rebuilding site `date`&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$msg&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Push source and build repos.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Come back&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every time after running the script deploy.sh, it will generate new static files and push them to master branch. The changes will be published immediately by Github Pages.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all, a piece of 🍰&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Refine Software Testing Types</title>
      <link>https://kevcui.github.io/2017/05/02/refine-software-testing-types/</link>
      <pubDate>Tue, 02 May 2017 20:35:50 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/05/02/refine-software-testing-types/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://kevcui.github.io/images/testing-types-wordcloud.png&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;p&gt;Software Testing is a huge topic. The types of software testing are enormous. Tons of terminologies and syllabuses could make people feel sick. A small example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When I say &amp;ldquo;Integration Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;You may interpret as &amp;ldquo;Functional Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;Your tester friend may think it&amp;rsquo;s &amp;ldquo;Accessibility Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;Your developer buddy may consider it as &amp;ldquo;Regression Testing&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;Your PO bro may see it as &amp;ldquo;Automated Testing&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually we are more or less talking about the same thing. We misunderstand each other because we think from different perspectives.&lt;/p&gt;
&lt;p&gt;In order to make less confusion, I try to refine software testing types by using 5 different categories. Each categories represent one perspective. In other words, they are independent of each other. These categories are &lt;strong&gt;How&lt;/strong&gt;, &lt;strong&gt;When&lt;/strong&gt;, &lt;strong&gt;Who&lt;/strong&gt;, &lt;strong&gt;What&lt;/strong&gt; and &lt;strong&gt;Which&lt;/strong&gt;. Then I put testing types one by one into each category, E.g:&lt;/p&gt;
&lt;p&gt;1.1) &lt;strong&gt;How&lt;/strong&gt; does structure look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;White/Glass box/Structural Testing,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Black box/Functional Testing,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Gray box Testing.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;1.2) &lt;strong&gt;How&lt;/strong&gt; does system perform:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Non-functional Testing
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br/&gt;
2) **When** in software development life cycle (SDLC):
```bash
Unit Testing, Component Testing,
Integration/Integrated Testing, System Testing,
Acceptance Testing, Alpha Testing, Beta Testing.
```
&lt;br/&gt;
3) **Who** is involved in:
```bash
Manual Testing, Automated Testing, Pair Testing,
Mob Testing, Team Testing, Dogfooding,
Crowdsourced Testing.
```
&lt;br/&gt;
4) **What** is to test:
```bash
E2E/Workflow Testing, Usability Testing, Security Testing,
Performance Testing, Accessibility Testing...
```
&lt;br/&gt;
5) **Which** approach is using:
```bash
Exploratory Testing, Fuzz Testing,
Boundary Value Testing, Sanity Testing, Smoke Testing,
(Non-)Regression Testing, Monkey Testing...
```
&lt;br/&gt;
&lt;p&gt;Now let&amp;rsquo;s back to the beginning when I say &amp;ldquo;Integration Testing&amp;rdquo;&amp;hellip; and see if it makes things clear.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; How: Functional
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; When: Integration
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; Who: Automated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; What: Accessibility
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; Whch: Regression
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br/&gt;
Finally we have a buzz word
```bash
Functional Integration Automated Accessbility Regression Testing
```
&lt;br/&gt;
What do you think? 💡❗ or 🐮💩?
</description>
    </item>
    
    <item>
      <title>Be prepared! Interruption is coming!</title>
      <link>https://kevcui.github.io/2017/04/29/be-prepared-interruption-is-coming/</link>
      <pubDate>Sat, 29 Apr 2017 21:25:25 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/04/29/be-prepared-interruption-is-coming/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*A4g-4mSEERgcCJAU9aoiBQ.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://www.flickr.com/photos/toolstop/4546017269/in/photolist-7VHwy6-7T3sBx-pvPtJf-nywY2v-9qrj88-f6gPjy-9J1BdE-8eB9zK-eTJxN4-fvp6xs-697QaY-kQEJ5Z-8j199M-2ar2Sb-8j1944-nRvec8-5oDgFr-nC1Kzp-ANtt56-nZ9Y9G-7a4QsY-miwiuT-qLGJw2-Sg25Nb-6bUidP-frHAzg-nzWYLx-rFgD9r-7pNK4V-drfRNk-5se7vP-pGvU4T-a7Wjjq-s6nuVQ-8oVLCo-9DvfFb-5NLEtK-oJAqmx-q7mtBs-4ViWX-guzccR-6bMfa9-6bUiut-8Rw2LS-5PhERM-9YfCgz-8RvU6t-obqmkU-9tntU6-kQJtL1&#34;&gt;Mark Hunter&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By failing to prepare, you are preparing to fail. - Benjamin Franklin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recently I read an interesting article about &lt;a href=&#34;https://dev.to/andrewlucker/why-do-programmers-wear-headphones-for-the-same-reason-that-you-cantjuggle&#34;&gt;Why do programmers wear headphones?&lt;/a&gt;. The truth is that &lt;em&gt;&amp;ldquo;programmers are easily distracted, headphones eliminate some distractions, thus headphones make programmers.&amp;rdquo;&lt;/em&gt; To reduce losing attention by distractions, I could improve my attention span and control the working environment around myself. But on the other hand, I could lose my attention as well by interruptions, which are usually unexpected. What can I do to deal with them?&lt;/p&gt;
&lt;h3 id=&#34;distraction-or-interruption&#34;&gt;Distraction or Interruption?&lt;/h3&gt;
&lt;p&gt;First of all, what is the difference between distraction and interruption?&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;distraction&lt;/strong&gt; is something that draws one’s attention away from what they are supposed to be paying attention to, &lt;strong&gt;entirely unintentionally&lt;/strong&gt;.&lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; For example, when you&amp;rsquo;re coding, a beautiful/handsome visitor passes by the office, you&amp;rsquo;re distracted by her/his charm&amp;hellip;&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;interruption&lt;/strong&gt; is something that draws one’s attention away from what they are supposed to be paying attention to, &lt;strong&gt;entirely on purpose&lt;/strong&gt;.&lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; For example, when you&amp;rsquo;re coding, a beautiful/handsome visitor comes to your desk and asks you out for a coffee, you&amp;rsquo;re interrupted by her/his question&amp;hellip;&lt;/p&gt;
&lt;p&gt;Unintentionally or on purpose, although they all result to draws your attention away, distraction is initiative and interruption is passive.&lt;/p&gt;
&lt;h3 id=&#34;prevent-interruptions&#34;&gt;Prevent interruptions?&lt;/h3&gt;
&lt;p class=&#34;imagsup&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*iW2FqA-q-j0zeg9U.&#34; alt=&#34;disturb&#34;/&gt;
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt; image from &lt;/em&gt;
        
        &lt;a href=&#34;http://www.nairaland.com/2621018/not-disturb-programmer&#34;&gt; ₦airaland Forum &lt;/a&gt;
        
    &lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;Why don&amp;rsquo;t we just prevent interruptions like preventing distractions? Lock ourself in a room and hang &amp;ldquo;Do Not Disturb!&amp;rdquo; sign outside the door? Well, we can isolate ourself by being inside our ideal bubble. But as we know, interruptions are made on purpose, sometimes they provide useful information that we need to adapt the changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An urgent business decision is made, it needs me to discuss and change requirements now.&lt;/li&gt;
&lt;li&gt;An abnormal app crash rate happens in production, it needs me to analyze root cause now.&lt;/li&gt;
&lt;li&gt;A new feature is testable, it needs me to pair testing with developers now.&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In these cases, I cannot just simply avoid them, I have to pay attention to handle with them. &amp;ldquo;Do Not Disturb&amp;rdquo; could surely gain my focus but I will definitely lose my agility.&lt;/p&gt;
&lt;h3 id=&#34;be-prepared-to-embrace-interruptions&#34;&gt;Be prepared to embrace interruptions&lt;/h3&gt;
&lt;p class=&#34;imagsup&#34;&gt;
    &lt;img src=&#34;https://c1.staticflickr.com/3/2039/2721654446_2baea3ef82.jpg&#34; alt=&#34;open&#34;/&gt;
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt; image from &lt;/em&gt;
        
        &lt;a href=&#34;https://www.flickr.com/photos/thebirdwells/2721654446/in/photostream/&#34;&gt; bryan birdwell &lt;/a&gt;
        
    &lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;Instead of preventing interruptions, why not be prepared to embrace interruptions? It sounds interesting, right? But how? &lt;a href=&#34;https://hearthstone.gamepedia.com/Violet_Teacher&#34;&gt;Pay attention, class! Instruction begins!&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-continuous-focus-and-defocus&#34;&gt;1. Continuous Focus and Defocus&lt;/h4&gt;
&lt;p&gt;Focus makes me efficient, productive. Defocus makes me relax and creative.&lt;/p&gt;
&lt;p&gt;Due to human&amp;rsquo;s natural, we have an &lt;a href=&#34;https://en.wikipedia.org/wiki/Attention_span&#34;&gt;attention span&lt;/a&gt;: the amount of concentrated time one can spend on a task without becoming distracted. I know my attention span is 30 minutes. It means that I have to switch to defocus state after maximum 30 minutes focus. Even I can force myself focusing. The result will turn into inefficiency and tiredness.&lt;/p&gt;
&lt;p&gt;Based on my attention span, similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/Pomodoro_Technique&#34;&gt;Pomodoro technique&lt;/a&gt;, I use 25 minutes to focus on one of my tasks and then I give myself 5 minutes break as a reward. After a break, I restart again 25 minutes focusing on a task and then again a 5 minutes defocus&amp;hellip;&lt;/p&gt;
&lt;p&gt;Imagine if I work for 8 hours, in theory, I have 16 break time. These 16 break time are perfectly prepared for interruptions.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re only short tasks, there is an ultimate version for you, it&amp;rsquo;s called &lt;a href=&#34;http://www.43folders.com/2005/10/11/procrastination-hack-1025&#34;&gt;procrastination hack&lt;/a&gt; &lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. Basically, a loop of focus and defocus is shirking to 10+2, then you&amp;rsquo;ll perform 5 loops in one hour (10+2)*5. So in 8 hours, 40 break time in total!&lt;/p&gt;
&lt;p&gt;When interruption comes during my defocus time, without the impact of interruption, I can easily engage myself in other high priority tasks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuous focus and defocus reduce the impact of interruptions.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-short-refocus-time&#34;&gt;2. Short Refocus Time&lt;/h4&gt;
&lt;p&gt;No one can plan his life perfectly. Sometimes when the interruption comes, I&amp;rsquo;m still focusing on my task! 💩 happens. The reason why people hate interruption so much is not only that interruption draws attention away, but also that it takes a long time to go back to flow. If you could get back to flow in seconds, probably you will feel that interruption is only a kind of annoying, but not really hateful. Therefore, a short refocus time is rather important.&lt;/p&gt;
&lt;p&gt;I find a way to gain refocus easily and it works quite well for me. First I will take one deep breath, and then I will cast a magical spell: &amp;ldquo;What am I doing now?&amp;rdquo;. By taking a deep breath, I can control my emotion and empty my mind. By questioning myself as a psychological hint, it helps me to focus on the question first, then the focus will be moving back to the task.&lt;/p&gt;
&lt;p&gt;By the way, recently I discovered another spell which does the same psychological trick, &amp;ldquo;I Am One With the Focus and the Focus Is With Me&amp;rdquo;. But I cannot use that because I cannot resist 😆&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A short refocus time reduces the hatred of interruptions.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;interruption-is-coming&#34;&gt;Interruption is coming!&lt;/h3&gt;
&lt;p&gt;Speak of the devil and he is sure to appear. Before you finished reading this post, I guess you&amp;rsquo;ve probably been distracted or interrupted at least once. Take it easy, it&amp;rsquo;s totally normal. Remember interruption brings changes and challenges on purpose; Remember continuous focus and defocus makes you have more than ease for interruptions; Remember improving refocus time makes you feel comfortable to embrace interruptions.&lt;/p&gt;
&lt;p&gt;Brace yourself, interruption is coming!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://www.samatters.com/distractions-and-interruptions-whats-the-difference/&#34;&gt;Distractions and Interruptions&amp;hellip; What’s the Difference?&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; Zeger Van Hese: &lt;a href=&#34;https://youtu.be/Fcf2iVY1eA0?t=24m33s&#34;&gt;Testing in the Age of Distraction&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I Do Exploratory Testing</title>
      <link>https://kevcui.github.io/2017/04/17/how-i-do-exploratory-testing/</link>
      <pubDate>Mon, 17 Apr 2017 22:30:00 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/04/17/how-i-do-exploratory-testing/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*UZ_21MTQrfOwJbixUgik4w.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://www.flickr.com/photos/kwl/3573458354/in/photostream/&#34;&gt;Kenny Louie&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Children are born naturalists. They explore the world with all of their senses, experiment in the environment, and communicate their discoveries to those around them.&amp;rdquo; &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;what-is-et&#34;&gt;What is ET?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;E&lt;/strong&gt;xploratory &lt;strong&gt;T&lt;/strong&gt;esting is the nature of testing&lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. The pure beauty of ET is that it starts without specific test plan and tester comes up with ideas or assumptions during testing execution. Then test design and test execution happen at the same time. It&amp;rsquo;s the true symphony of efficiency!&lt;/p&gt;
&lt;h3 id=&#34;what-is-my-understanding-of-et&#34;&gt;What is my understanding of ET?&lt;/h3&gt;
&lt;p&gt;For me, ET is an elegant testing approach with a &lt;strong&gt;free spirit&lt;/strong&gt;, to &lt;strong&gt;think&lt;/strong&gt; about different possibilities, to &lt;strong&gt;discover&lt;/strong&gt; the unknown, to &lt;strong&gt;collect&lt;/strong&gt; effective information and to &lt;strong&gt;share&lt;/strong&gt; new knowledge efficiently.&lt;/p&gt;
&lt;h3 id=&#34;what-is-my-practice-of-et&#34;&gt;What is my practice of ET?&lt;/h3&gt;
&lt;p&gt;Since the beginning of last year when &lt;a href=&#34;https://kevcui.github.io/2017/01/21/why-i-failed-to-use-calabash-for-mobile-testing/&#34;&gt;I failed to use Calabash for mobile testing&lt;/a&gt;, I mainly focus on improving my ET skill. I want to establish a practice for the purpose: &lt;strong&gt;To have a concrete structure of ET and to adapt change easily based on it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Combining the purpose and my understanding, I tried some practices and made some changes. It becomes the current one I&amp;rsquo;m satisfied with. First of all, please remember it&amp;rsquo;s definitely &lt;strong&gt;not&lt;/strong&gt; the &amp;ldquo;best practice&amp;rdquo;. I still keep striving for a better practice, your feedback could help me as well 😉&lt;/p&gt;
&lt;p&gt;Back to my practice of ET, each time I proceed with 3 important stages (a.k.a. 3G stages): &lt;strong&gt;Get context&lt;/strong&gt;, &lt;strong&gt;Go explore&lt;/strong&gt; and &lt;strong&gt;Give feedback&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;stage-1-get-context&#34;&gt;Stage 1: Get context&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Time estimation&lt;/strong&gt;: 15 min&lt;/p&gt;
&lt;p&gt;On this stage, the key is to &lt;strong&gt;think different&lt;/strong&gt;. By asking PO, stakeholder, designer, developer, etc&amp;hellip; who already have the information of context. For instance, if the testing target is a new feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To understand the &lt;strong&gt;problem&lt;/strong&gt; behind: What&amp;rsquo;s the problem to solve?&lt;/li&gt;
&lt;li&gt;To understand the &lt;strong&gt;request&lt;/strong&gt; of developing this feature: What&amp;rsquo;s the acceptable result look like?&lt;/li&gt;
&lt;li&gt;To understand the detail of &lt;strong&gt;implementation&lt;/strong&gt;: Which kind of user cases are considered and checked already?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this information in mind, I will &lt;strong&gt;think&lt;/strong&gt; about that the implementation does not only meet the request but also provide the functionality to solve the problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementation versus Request: What are the misunderstandings and ambiguities?&lt;/li&gt;
&lt;li&gt;Implementation versus Problem: What are the blind spots and missing checks, could potentially cause the risk of malfunction?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally I prefer to take some factors and put them in the questions, in order to generate some testing ideas. Some factors could be considered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Environment: region, timezone, language&amp;hellip;&lt;/li&gt;
&lt;li&gt;Hardware: device, platform, OS, screen size&amp;hellip;&lt;/li&gt;
&lt;li&gt;Aspect: usability, security, performance&amp;hellip;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Region x Implementation versus Request: Does this feature need to be available &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; all customers or only &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; a specific region?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OS x Implementation versus Problem: Does this feature work on iOS &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; devices?
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br/&gt;
Then I will put the ideas or assumptions shortly on a to-do list:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Testing ideas:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Support all regions?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; iOS &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;stage-2-go-explore&#34;&gt;Stage 2: Go explore&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Timebox&lt;/strong&gt;: 30 min&lt;/p&gt;
&lt;p&gt;This stage is the most exciting one. The key is to &lt;strong&gt;discover&lt;/strong&gt; and to &lt;strong&gt;collect&lt;/strong&gt;. Before starting exploring, a time box is rather important, which forces me to proceed with the next steps. Otherwise, I could probably explore forever far around and way deeper.&lt;/p&gt;
&lt;p&gt;Remember the to-do list earlier I got in the first stage? Now it&amp;rsquo;s time to make hands dirty using the ideas, I call them seeds, as initial starting points to discover the unknown. Following and focusing on one seed to perform some checks, I will start to collect new seeds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Relate to current seed, add it as a child seed&lt;/li&gt;
&lt;li&gt;Not relate to current seed, add it as a new seed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once I got a finding or a question, I will make a quick note with the necessary screenshot and video record.&lt;/p&gt;
&lt;p&gt;After one seed is finished, I will continue to explore anther seed. One seed at a time, seed by seed until timeout. You probably have a question in your mind &amp;ldquo;When one seed is done, what to pick as the next seed?&amp;rdquo; I have a rule of thumb for priority: seed on top of the list has higher priority to explore.&lt;/p&gt;
&lt;p&gt;After 30 min, my to-do list looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Testing ideas:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;?&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Support all regions?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Europe
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;?&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Asia: no response from &lt;span class=&#34;nv&#34;&gt;API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Question &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; iOS &lt;span class=&#34;nv&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Issue &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; No interent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Error message
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; retry when internet is back
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; app restart when no internet
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;?&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Animation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; Question &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Performace of new API request?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Question 1: need API response &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Asia?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Need check with backend team: this feature is not available &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; Asia users?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Screenshot of API request and response&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Question 2: Refresh animation feels laggy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Need check with designer and developer: make a nicer animation
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Issue 1: crash on iOS &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;device info&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;step 1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;step 2&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &amp;lt;step 3&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;crash stack traces&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;stage-3-give-feedback&#34;&gt;Stage 3: Give feedback&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Time estimation&lt;/strong&gt;: 15 min&lt;/p&gt;
&lt;p&gt;The key to this stage is to &lt;strong&gt;share knowledge&lt;/strong&gt;. I&amp;rsquo;ve some questions and issues on my list collected from the previous stage and I know who I need to contact. Can I just throw my feedback on their face directly? I hope I can but apparently nope.&lt;/p&gt;
&lt;p&gt;Regarding the questions, it needs to have a proper conversation to remove misunderstandings and ambiguities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What&amp;rsquo;s my opinion and suggestion?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s your opinion and suggestion?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding the issues, it needs to have a proper discussion to evaluate the risk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What can be fixed?&lt;/li&gt;
&lt;li&gt;What is out of scope?&lt;/li&gt;
&lt;li&gt;What needs to be improved in the future?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-else&#34;&gt;What else?&lt;/h3&gt;
&lt;p&gt;Basically, it&amp;rsquo;s the core part of my lovely ET practice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3G stages: Get context, Go explore and Give feedback&lt;/li&gt;
&lt;li&gt;4 actions: Think, Discover, Collect and Share&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although there are still a lot of topics I&amp;rsquo;d like to expand, I don&amp;rsquo;t want to make one post too long too boring. I will probably write &lt;strong&gt;a series of ET topics&lt;/strong&gt; in the future, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to think different and some factors to consider?&lt;/li&gt;
&lt;li&gt;How to collect and share findings efficiently?&lt;/li&gt;
&lt;li&gt;How to shorten feedback loop in development?&lt;/li&gt;
&lt;li&gt;How to train myself be always ready to be interrupted?&lt;/li&gt;
&lt;li&gt;How to pair with developers?&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/3o6Zthv4W72jUHRCUg/giphy.gif&#34; alt=&#34;out&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Testing is like holding a torch to light up the road in darkness. You could clearly see the way to go, make a map, and mark thorns and flowers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;https://anshome.org/ans-preschool/&#34;&gt;The Audubon Nature Preschool&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;https://www.kaner.com/pdfs/QAIExploring.pdf&#34;&gt;Cem Kaner: A Tutorial in Exploratory Testing&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Hugo Why Not Hexo</title>
      <link>https://kevcui.github.io/2017/04/12/why-hugo-why-not-hexo/</link>
      <pubDate>Wed, 12 Apr 2017 22:47:26 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/04/12/why-hugo-why-not-hexo/</guid>
      <description>&lt;p&gt;As you probably remember that I just about &lt;a href=&#34;https://kevcui.github.io/2017/02/26/why-hexo-why-not-jekyll/&#34;&gt;switched from jekyll to hexo&lt;/a&gt; 2 months ago, now I&amp;rsquo;m again switching from hexo to hugo. Am I crazy? Yep. You want to know why? Let me tell you.&lt;/p&gt;
&lt;h3 id=&#34;why-hexo-was-chosen&#34;&gt;Why hexo was chosen?&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start from the reasons why I ditched jekyll without any regrets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hexo has a good name&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Hexo is powered by Node.js&lt;/li&gt;
&lt;li&gt;Hexo is easy to deploy&lt;/li&gt;
&lt;li&gt;Hexo supports theme change&lt;/li&gt;
&lt;li&gt;Hexo is pretty fast&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Honestly hexo is quite good and I&amp;rsquo;m pretty happy living with it. I have &lt;a href=&#34;https://github.com/kevcui/krazycavin-hexo-github-io&#34;&gt;a &amp;ldquo;clever&amp;rdquo; repository setup of hexo in GitHub&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Branch &lt;strong&gt;hexo&lt;/strong&gt;: to keep source code, posts and theme&lt;/li&gt;
&lt;li&gt;Branch &lt;strong&gt;master&lt;/strong&gt;: to store all generated static files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I found &lt;a href=&#34;https://github.com/hexojs/hexo-deployer-git&#34;&gt;a useful deploy plugin&lt;/a&gt;, which allows me to write posts and backup them in hexo branch, to publish final static files easily to master branch. I&amp;rsquo;ve to say I got nothing to complain. Hexo works as expected, all 👌&lt;/p&gt;
&lt;h3 id=&#34;why-i-choose-hugo-then&#34;&gt;Why I choose hugo then?&lt;/h3&gt;
&lt;p&gt;You know I&amp;rsquo;m a guy who crave clean &amp;amp; fast thingy and I never settle down. I cannot control myself not touching cool thing. &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, another popular static web generator engine, is mentioned a lot as &amp;ldquo;an alternative&amp;rdquo; of jekyll and recommended by some cool guys. When I&amp;rsquo;m motivated, I won&amp;rsquo;t give up the chance to try hugo, would I?&lt;/p&gt;
&lt;h4 id=&#34;1-even-better-on-theme-changing&#34;&gt;1. Even better on theme changing&lt;/h4&gt;
&lt;p&gt;Hexo supports theme change flexibly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download a new theme&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;_config.yaml&lt;/code&gt; to use it&lt;/li&gt;
&lt;li&gt;Run server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hugo is even better:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download a new theme&lt;/li&gt;
&lt;li&gt;Run server with theme name as a parameter, done!&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-zero-dependency&#34;&gt;2. Zero dependency&lt;/h4&gt;
&lt;p&gt;Hugo is built using Go, free, &lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;open source&lt;/a&gt;. If I only want to use hugo without building from source, I could just download executable &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;release binary&lt;/a&gt;. Literally it has zero dependency, one binary that&amp;rsquo;s all, so clean. On the other hand, hexo requests much more. First npm, then install around 10 dependencies during initializing. Now I&amp;rsquo;ve only basic functionalities of hexo. If I want to generate emoji, 👌 add a &lt;a href=&#34;https://github.com/crimx/hexo-filter-github-emojis&#34;&gt;plugin&lt;/a&gt;; if I want deploy code automatically, 👌 add another &lt;a href=&#34;https://github.com/hexojs/hexo-deployer-git&#34;&gt;plugin&lt;/a&gt;; if I want backup code automatically, 👌 add another &lt;a href=&#34;https://github.com/coneycode/hexo-git-backup&#34;&gt;plugin&lt;/a&gt;&amp;hellip;&lt;/p&gt;
&lt;h4 id=&#34;3-lightweight-file-structure&#34;&gt;3. Lightweight file structure&lt;/h4&gt;
&lt;p&gt;Not to say if &lt;code&gt;node_modules&lt;/code&gt; is a design flaw of npm, the fact is that &lt;code&gt;node_modules&lt;/code&gt; is bloated heavily, interesting post &lt;a href=&#34;https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558&#34;&gt;here&lt;/a&gt; and interesting discussion &lt;a href=&#34;https://www.reddit.com/r/webdev/comments/42cpjy/why_is_my_node_modules_directory_140mb_is_this/&#34;&gt;here&lt;/a&gt;. Hexo is powered by Node.js and naturally bloated by it. That&amp;rsquo;s why &lt;code&gt;node_modules&lt;/code&gt; is that place where I really don&amp;rsquo;t want to look deep inside. To have a better understanding, I roughly checked the size of folders including the same theme and the result is kind as expected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hexo w/ node_modules: 18M
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hexo w/o node_modules: 69M
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hugo: 29M
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;4-little-surprises&#34;&gt;4. Little surprises&lt;/h4&gt;
&lt;p&gt;After I know more about hugo, I get more little surprises:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt;: it instantly reloads browser after any changes. Based on hugo&amp;rsquo;s build speed, it&amp;rsquo;s super continent for developing theme and checking post&amp;rsquo;s looking, easy and fun. I like its speedy &lt;strong&gt;live&lt;/strong&gt; reload. ⚡&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/extras/aliases/&#34;&gt;Aliases&lt;/a&gt;: I call it  page redirect. Once I put alias URL in a post and then visiting this alias URL from browser, hugo will redirect alias URL to post URL. It easily solves the problem of URL changes caused by migration from other frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;To sum up, hugo is definitely my new favorite. But hexo is actually good enough to suit my needs. It seems hard to pick one, so my suggestion is following. Imagine you would like to build your own static web pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You start from fresh new, I will recommend you give &lt;strong&gt;hugo&lt;/strong&gt; a try first.&lt;/li&gt;
&lt;li&gt;You already use hexo, and you are a fan of JavaScript, then &lt;strong&gt;hexo&lt;/strong&gt; is the one to stick with.&lt;/li&gt;
&lt;li&gt;You already use hexo, and your plan is to spend time on writing, then &lt;strong&gt;hexo&lt;/strong&gt; is good enough.&lt;/li&gt;
&lt;li&gt;You already use hexo, and you want to learn new thing, and you&amp;rsquo;ve 1-2 days free time, then &lt;strong&gt;hugo&lt;/strong&gt; would be a good choice for you.&lt;/li&gt;
&lt;li&gt;You already use hugo, then keep using &lt;strong&gt;hugo&lt;/strong&gt; and don&amp;rsquo;t look around 😉&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bye Firefox</title>
      <link>https://kevcui.github.io/2017/03/27/bye-firefox/</link>
      <pubDate>Mon, 27 Mar 2017 23:02:13 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/03/27/bye-firefox/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*Tz47QFcn9AAdFIOI-LOPkw.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
    &lt;br/&gt;
    &lt;sup&gt;
        &lt;em&gt;
            Photo by &lt;a href=&#34;https://www.flickr.com/photos/garrett/280258600/in/photostream/&#34;&gt;Garrrett LeSage&lt;/a&gt;
        &lt;/em&gt;
    &lt;/sup&gt;
    
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Love, without any reason. Leave, with a good reason.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Last week, I made my decision to switch from Firefox to Chromium. Although it&amp;rsquo;s not my first time trying to ditch Firefox, I&amp;rsquo;m quite sure this time it would be the last time. As I&amp;rsquo;m a reasonable person, therefore, I put my thoughts in this post with the reason why I made my decision.&lt;/p&gt;
&lt;h3 id=&#34;a-pressure-from-outside&#34;&gt;A pressure from outside&lt;/h3&gt;
&lt;p&gt;I didn&amp;rsquo;t really remember since when I started to use Firefox, I always have it as my main browser. Back to the old good day, Firefox relies on its lightweight and fast speed amazing the world. No doubt it was the best browser. Nowadays, it is still one of the most popular browsers but definitely not top one. Many statics show it dramatically lost users &lt;a href=&#34;http://gs.statcounter.com/browser-market-share#monthly-201001-201702&#34;&gt;here&lt;/a&gt; &lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; and &lt;a href=&#34;https://www.w3schools.com/browsers/default.asp&#34;&gt;here&lt;/a&gt; &lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. It&amp;rsquo;s disappointed to see the number of Firefox users keep shrinking. During the decline in 2015, &lt;a href=&#34;https://arstechnica.com/business/2016/05/firefox-overtakes-microsoft-internet-explorer-edge-browsers-first-time-statcounter/&#34;&gt;Firefox tops IE &amp;amp; Edge browser market share for the first time&lt;/a&gt;. It was especially ironic.&lt;/p&gt;
&lt;p&gt;Is Firefox not good enough? It&amp;rsquo;s probably good enough. But its competitors are better. I ran some performance tests, like &lt;a href=&#34;http://browserbench.org/JetStream/&#34;&gt;JetStream&lt;/a&gt;, &lt;a href=&#34;https://chromium.github.io/octane/&#34;&gt;Octane 2.0&lt;/a&gt;, &lt;a href=&#34;http://browserbench.org/Speedometer/&#34;&gt;Speedometer&lt;/a&gt; on Firefox v52 and Chromium v56 with my Linux desktop. Chromium wins them all and beats Firefox easily. Besides that, personally I prefer Chromium built-in devtool and &lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt; is a huge +1.&lt;/p&gt;
&lt;p&gt;These facts become a pressure from outside that weighs on Firefox. Once you run behind others, and you put all the effort to catch up. What people will see is that you&amp;rsquo;re following the same path, which others did already. It&amp;rsquo;s damn sad.&lt;/p&gt;
&lt;h3 id=&#34;a-reason-of-love&#34;&gt;A reason of love&lt;/h3&gt;
&lt;p&gt;When one performs obviously better than another, why I should keep both? Yes I do have a reason, the only reason I feel comfortable to stay with Firefox. &lt;a href=&#34;https://github.com/vimperator/vimperator-labs&#34;&gt;Vimperator&lt;/a&gt; a Firefox-only add-on which completely changes Firefox interface and turns it to vim-like. It provides me an efficient way to use the browser. I&amp;rsquo;m totally fascinated by it.&lt;/p&gt;
&lt;p&gt;As we all know, this year Firefox will face some big changes. One of them is e10s. Sadly, &lt;a href=&#34;https://github.com/vimperator/vimperator-labs/issues/211&#34;&gt;Vimperator seams won&amp;rsquo;t support e10s&lt;/a&gt; and the site &lt;a href=&#34;https://www.arewee10syet.com/&#34;&gt;Are we e10s yet?&lt;/a&gt; marks Vimperator as incompatible. It&amp;rsquo;s about time, sooner this November, anyway I will say goodbye to Vimperator, to Firefox. That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;Now I live well with Chromium. There are lots of alternatives to try: &lt;a href=&#34;https://github.com/philc/vimium&#34;&gt;Vimium&lt;/a&gt;, &lt;a href=&#34;https://github.com/1995eaton/chromium-vim&#34;&gt;cVim&lt;/a&gt;, &lt;a href=&#34;https://github.com/jinzhu/vrome&#34;&gt;Vrome&lt;/a&gt; and this &lt;a href=&#34;https://brookhong.github.io/2015/09/15/surfingkeys.html&#34;&gt;interesting idea&lt;/a&gt;&amp;hellip; I know they are not as powerful as Vimperator. To fit my needs, they&amp;rsquo;re good enough.&lt;/p&gt;
&lt;h3 id=&#34;a-future-of-uncertainty&#34;&gt;A future of uncertainty&lt;/h3&gt;
&lt;p&gt;Moz://a really pushes hard to fully rollout Electrolysis functionality this year. The main change like Multiprocess, it will boost performance certainly. But it&amp;rsquo;s a two-blade sword, Firefox will perhaps become another memory hog. Yes, it&amp;rsquo;s gonna be like Chrome. Regarding the recent changes, I feel Firefox is different, unfamiliar or lost: &lt;a href=&#34;http://www.omgubuntu.co.uk/2017/03/firefox-52-no-sound-pulseaudio-alsa-linux&#34;&gt;Firefox Goes PulseAudio Only, Leaves ALSA Users With No Sound&lt;/a&gt;, &lt;a href=&#34;https://www.theverge.com/2017/1/25/14376710/walt-mossberg-mozilla-firefox-browser-revived&#34;&gt;What’s up with Firefox, the browser that time forgot?&lt;/a&gt;, &lt;a href=&#34;https://www.ghacks.net/2017/02/17/firefox-add-ons-roadmap-for-2017/&#34;&gt;Firefox Add-ons Roadmap for 2017&lt;/a&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;To make Firefox a better browser, surely there are reasons behind all changes. Maybe it&amp;rsquo;s me who cannot clearly understand them, who think the future is uncertain, who still believe in Firefox this year would have a new beginning, not the end.&lt;/p&gt;
&lt;p&gt;Firefox changed the world before, and now the world is changing Firefox. What does the Fox say?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://gs.statcounter.com/browser-market-share#monthly-201001-201702&#34;&gt;Browser Market Share Jan 2010 - Feb 2017&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;https://www.w3schools.com/browsers/default.asp&#34;&gt;W3Schools&amp;rsquo; Famous Month-by-Month Browser Statistics&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Toolbox</title>
      <link>https://kevcui.github.io/2017/03/08/my-toolbox/</link>
      <pubDate>Wed, 08 Mar 2017 22:12:08 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/03/08/my-toolbox/</guid>
      <description>&lt;h3 id=&#34;software-testing&#34;&gt;Software Testing&lt;/h3&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://sqamate.com/tools/pairwise&#34;&gt;Test case generator (pairwise)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📖👉 &lt;a href=&#34;http://testobsessed.com/wp-content/uploads/2011/04/testheuristicscheatsheetv1.pdf&#34;&gt;Test Heuristics Cheat Sheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📖👉 &lt;a href=&#34;https://medium.com/@userfocus/the-1-page-usability-test-plan-dbc8c3d7fb54#.e4fd2w21q&#34;&gt;1-page usability test plan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/lestoni/faker-cli&#34;&gt;faker-cli&lt;/a&gt;: generate massive amounts of fake data&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/aoh/radamsa&#34;&gt;Radamsa&lt;/a&gt;: Radamsa is a test case generator for robustness testing, a.k.a. a fuzzer&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/josephwilk/pairwise&#34;&gt;Ruby Pairwise&lt;/a&gt;: Ruby based tool for selecting a smaller number of test input combinations&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/&#34;&gt;Name&lt;/a&gt;: all about name&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://github.com/minimaxir/big-list-of-naughty-strings&#34;&gt;Big List of Naughty Strings&lt;/a&gt;: list of strings which have a high probability of causing issues&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://github.com/jagracey/Awesome-Unicode&#34;&gt;Awesome Unicode&lt;/a&gt;: Unicode list&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://github.com/danielmiessler/SecLists&#34;&gt;SecLists&lt;/a&gt;: a collection of multiple types of lists used during security assessments&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://commons.wikimedia.org/wiki/Category:Large_images&#34;&gt;Large images&lt;/a&gt;: a list of very large images above 50 Megapixel&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.mailslurp.com/#page-top&#34;&gt;MailSlurp&lt;/a&gt;: send and receive emails from randomly generated addresses via REST.&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://mockaroo.com/&#34;&gt;Mockaroo&lt;/a&gt;: realistic data generator&lt;/p&gt;
&lt;h3 id=&#34;mobile-testing&#34;&gt;Mobile Testing&lt;/h3&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://tools.perfectomobile.com/test-coverage-optimizer/&#34;&gt;Test coverage optimizer&lt;/a&gt;: discover the optimal mix for maximizing your test coverage with the fewest devices possible&lt;/p&gt;
&lt;p&gt;📦👉 &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.glasswire.android&#34;&gt;GlassWire&lt;/a&gt;: monitor app data usage&lt;/p&gt;
&lt;p&gt;📦👉 &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.testerkey.testerkeyboard&#34;&gt;TesterKey&lt;/a&gt;: generate complex and randomised input values&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/selendroid/selendroid&#34;&gt;Selendroid&lt;/a&gt;: test automation framework which drives of the UI of Android native and hybrid applications apps&lt;/p&gt;
&lt;h3 id=&#34;web-testing&#34;&gt;Web Testing&lt;/h3&gt;
&lt;p&gt;📖👉 &lt;a href=&#34;https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html&#34;&gt;UTF-8 plain text test file&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📖👉 &lt;a href=&#34;https://github.com/dhamaniasad/HeadlessBrowsers&#34;&gt;Headless Browser list&lt;/a&gt;: a list of (almost) all headless web browsers in existence&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.performancebudget.io/&#34;&gt;Performance Budget Calculator&lt;/a&gt;: calculate a performance budget for your site&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://github.com/dhatanian/ticketmagpie&#34;&gt;TicketMagpie OWASP Top10 demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://validator.w3.org/i18n-checker/&#34;&gt;i18n Validator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/galenframework/galen&#34;&gt;Galen Framework&lt;/a&gt;: testing layout and responsive design of web applications&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/jan-molak/serenity-js&#34;&gt;Serenity/JS&lt;/a&gt;: a node.js library designed to make acceptance and regression testing of modern web applications faster&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt;capybara&lt;/a&gt;: acceptance test framework for web applications&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://cards-dev.twitter.com/validator&#34;&gt;Twitter Card Validator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://developers.facebook.com/tools/debug/&#34;&gt;Facebook Debugger&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.jsontest.com&#34;&gt;JSON Test&lt;/a&gt;: JSON Testing Service&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://apitester.com&#34;&gt;API tester&lt;/a&gt;: test API&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.webpagetest.org&#34;&gt;Webpagetest&lt;/a&gt;: test a website&amp;rsquo;s performance&lt;/p&gt;
&lt;h3 id=&#34;dev-tools&#34;&gt;Dev Tools&lt;/h3&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://putsreq.com/&#34;&gt;PutsReq&lt;/a&gt;: record HTTP requests and fake responses&lt;/p&gt;
&lt;p&gt;📖👉 &lt;a href=&#34;http://www.stefankrause.net/js-frameworks-benchmark2/webdriver-java/table.html?utm_content=buffer615ad&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer&#34;&gt;JS framework benchmark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📖👉 &lt;a href=&#34;http://cdn2.hubspot.net/hubfs/208250/Blog_Images/devops11.png&#34;&gt;The Ultimate DevOps Tools Ecosystem&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://regex101.com/&#34;&gt;regex101&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://ihateregex.io/&#34;&gt;iHateRegex&lt;/a&gt;: regex Cheat Sheet&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://rubular.com/&#34;&gt;rubular&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📦👉 &lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/dxa4481/truffleHog&#34;&gt;Truffle Dog&lt;/a&gt;: searches through git repositories for high entropy strings, digging deep into commit history and branches&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/jkbrzt/httpie&#34;&gt;HTTPie&lt;/a&gt;: a CLI, cURL-like tool for humans&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/lord/slate&#34;&gt;Slate&lt;/a&gt;: API doc generator&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/anvaka/git-also&#34;&gt;git-also&lt;/a&gt;: for a file in your git repository, prints other files that are most often committed together&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/mitmproxy/mitmproxy&#34;&gt;mitmproxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/naptha/tesseract.js&#34;&gt;Tesseract.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💻👉 &lt;a href=&#34;https://asciinema.org/&#34;&gt;asciinema&lt;/a&gt;: record and share terminal sessions&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://obfuscator.uo1.net/&#34;&gt;Online Text Obfuscator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://webcode.tools&#34;&gt;Web Code Tools&lt;/a&gt;: code generator&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.json-generator.com/&#34;&gt;JSON generator&lt;/a&gt;: JSON generator&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://foragoodstrftime.com/&#34;&gt;For a Good Strftime&lt;/a&gt;: easy date time formatting&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://pin.gy/cli/&#34;&gt;Pingy&lt;/a&gt;: the simple frontend build tool&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://patterns.boilerform.design&#34;&gt;Boilerform&lt;/a&gt;: Generic input fields with variations for size, placeholders and validation states.&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://jqplay.org/&#34;&gt;jq play&lt;/a&gt;: a playground for jq&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://requestmap.webperf.tools/&#34;&gt;Request Map Generator&lt;/a&gt;: identify 3rd-parties on your site&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://whatdoesmysitecost.com/&#34;&gt;What Does My Siet Cost?&lt;/a&gt;: find out how much it costs for someone to use your site on mobile networks around the world.&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://tio.run/&#34;&gt;TIO&lt;/a&gt;: Try It Online. TIO is a family of online interpreters for an evergrowing list of practical and recreational programming languages.&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://hackvertor.co.uk&#34;&gt;Hackvertor&lt;/a&gt;: A tag-based conversion tool that supports various escapes and encodings including HTML5 entities, hex, octal, unicode, url encoding etc.&lt;/p&gt;
&lt;h3 id=&#34;method--mode&#34;&gt;Method &amp;amp; Mode&lt;/h3&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://pbs.twimg.com/media/C3JNXUtWEAAW951.jpg&#34;&gt;Cynefin Framework for user story splitting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://cdn-images-1.medium.com/max/1200/1*rC6ZDnnSEK8NSPzrMG_A4Q.png&#34;&gt;Product Strategy Canvas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://natgeoeducationblog.files.wordpress.com/2017/01/ultimate-critical-thinking-worksheet.jpg&#34;&gt;The ultimate cheat sheet for critical thinking&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://en.wikipedia.org/wiki/Kano_model#/media/File:Kano_model_showing_transition_over_time.png&#34;&gt;Kano model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/6/65/Cognitive_bias_codex_en.svg&#34;&gt;The Cognitive Bias Codex&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;search&#34;&gt;Search&lt;/h3&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.shodan.io/&#34;&gt;Shodan&lt;/a&gt;: search engine for Internet-connected devices&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://foller.me/&#34;&gt;Twitter Analytics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.pexels.com/&#34;&gt;Pexels&lt;/a&gt;: best free stock photos in one place&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://startup-videos.com/&#34;&gt;StartupVideos&lt;/a&gt;: showcasing The Best Startup Videos&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.landingfolio.com/&#34;&gt;Landingfolio&lt;/a&gt;: landing page design inspiration&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.videvo.net/&#34;&gt;videovo&lt;/a&gt;: free stock video footage&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.mankier.com/&#34;&gt;Mankier&lt;/a&gt;: collection of online man pages&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://bbcsfx.acropolis.org.uk/&#34;&gt;BBC Sound Effects&lt;/a&gt;: 16,000 BBC sound effects are made available by the BBC&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://keywordtool.io/google&#34;&gt;Keyword Tool&lt;/a&gt;: search for the keywords&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.gutenberg.org/&#34;&gt;Project Gutenberg&lt;/a&gt;: free books&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://web.archive.org/&#34;&gt;Wayback&lt;/a&gt;: Internet archive&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://causal.app/buy-to-rent/&#34;&gt;Buy to rent&lt;/a&gt;: Should you buy a house and rent it out?&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://outline.com&#34;&gt;Outline&lt;/a&gt;: read &amp;amp; annotate website&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://yarn.co&#34;&gt;Yarn&lt;/a&gt;: Search by word or pharse for TV, movies, and music clips&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://github.com/5ky1ar/Awesome-Onion-Links&#34;&gt;Onion Links&lt;/a&gt;: Awesome Onion Links&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://agoodmovietowatch.com&#34;&gt;A Good Movie to Watch&lt;/a&gt;: TV and movies recommendation&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://forvo.com&#34;&gt;Forvo&lt;/a&gt;: Words pronunciations&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://memegine.com&#34;&gt;memegine&lt;/a&gt;: The internet meme search engine&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://pinatahub.incognita.tech&#34;&gt;PinataHub&lt;/a&gt;: PinataHub allows you to explore a fraction of the 4M+ passwords and secrets committed in public GitHub repositories&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.greynoise.io/&#34;&gt;Greynoise&lt;/a&gt;: Malicious IP lookup&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://chir.ag/projects/tip-of-my-tongue/&#34;&gt;Tip of My Tongue&lt;/a&gt;: Find that word that you&amp;rsquo;ve been thinking about all day but just can&amp;rsquo;t seem to remember&lt;/p&gt;
&lt;h3 id=&#34;design&#34;&gt;Design&lt;/h3&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/sferik/t&#34;&gt;Ruby Twitter CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://google-webfonts-helper.herokuapp.com/fonts&#34;&gt;Google Webfont Helper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://vimcolors.com/&#34;&gt;VIM color themes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/mxstbr/sharingbuttons.io&#34;&gt;sharingbuttons.io&lt;/a&gt;: generate social sharing buttons&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/l0b0/xterm-color-count&#34;&gt;XTerm Color Count&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📀👉 &lt;a href=&#34;https://github.com/WebpageFX/emoji-cheat-sheet.com&#34;&gt;emoji cheat sheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://excel2jira.bluurgh.com/&#34;&gt;Excel to Jira table&lt;/a&gt;: copy and paste a table from Excel, click the button, and in return you will get the table formatted for JIRA&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://colormind.io/&#34;&gt;Colormind&lt;/a&gt;: Colormind is a deep learning AI that knows color theory. It can generate color palettes from scratch, or it can take your input and intelligently fill in the blanks.&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.canva.com/color-palette/&#34;&gt;Color palette&lt;/a&gt;: get colors from photos&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://smartmockups.com/&#34;&gt;Smartmockups&lt;/a&gt;: create product screenshots with mocks&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://sproutsocial.com/landscape&#34;&gt;Landscape&lt;/a&gt;: streamlined image resizing for social media&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://coolors.co/&#34;&gt;Coolors&lt;/a&gt;: fast color schemes generator&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.colourlovers.com/&#34;&gt;Colour Lovers&lt;/a&gt;: share color ideas &amp;amp; inspiration&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.colorhunt.co/&#34;&gt;Color Hunt&lt;/a&gt;: free and open platform for color inspiration with thousands of trendy hand-picked color palettes&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://www.archetypeapp.com/&#34;&gt;archetype&lt;/a&gt;: create consistent typography styling and spacing live&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.boardofinnovation.com/idea-generator/&#34;&gt;The Idea Generator&lt;/a&gt;: boost the quantity and quality of innovated idea.&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://vickylai.io/uni-pretty&#34;&gt;Uni-pretty&lt;/a&gt;: turn boring plain text into pretty unicode characters.&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://ourownthing.co.uk/gradpad.html&#34;&gt;GradPad&lt;/a&gt;: generate gradient CSS&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://dtstyle.net/&#34;&gt;dtstyle&lt;/a&gt;: a darktable styles repository&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://dryicons.com/&#34;&gt;Dryicons&lt;/a&gt;: icons&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://icons8.com/music/&#34;&gt;Fugue&lt;/a&gt;: free music for videos&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://photos.icons8.com/&#34;&gt;Moose&lt;/a&gt;: stock photos&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://www.photopea.com/&#34;&gt;Photepea&lt;/a&gt;: online photoshop&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;http://phlntn.com/emojibuilder/&#34;&gt;Emoji Builder&lt;/a&gt;: build emoji&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://fontdrop.info/&#34;&gt;FontDrop!&lt;/a&gt;: analyze what&amp;rsquo;s inside a font file&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://cssreference.io/&#34;&gt;CSS Reference&lt;/a&gt;: free visual guide to CSS&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://picsum.photos/&#34;&gt;Picsum&lt;/a&gt;: the Lorem Ipsum for photos.&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://undraw.co/&#34;&gt;unDraw&lt;/a&gt;: open-source illustrations&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://delesign.com/free-designs/graphics&#34;&gt;Delesign&lt;/a&gt;: illustrations&lt;/p&gt;
&lt;h3 id=&#34;security&#34;&gt;Security&lt;/h3&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://securityheaders.io&#34;&gt;SecurityHeaders.io&lt;/a&gt;: a quick and easy way to check http headers&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://pyup.io/tools/requirements-checker/&#34;&gt;Online Requirements Checker&lt;/a&gt;: Python requirements checker&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://beeceptor.com/&#34;&gt;Beeceptor&lt;/a&gt;: Rest API mocking and intercepting&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://cloudsecdocs.com/&#34;&gt;CloudSecDocs&lt;/a&gt;: a website collecting technical notes, how-tos, and cheatsheets related to cloud-native technologies&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://asecure.cloud/&#34;&gt;asecurecloud&lt;/a&gt;: choose from a free library of 600+ customizable AWS security configurations and best practices available in CloudFormation, Terraform and AWS CLI&lt;/p&gt;
&lt;p&gt;🌏👉 &lt;a href=&#34;https://fullhunt.io&#34;&gt;FullHunt&lt;/a&gt;: attack surface intelligence&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Hexo Why Not Jekyll</title>
      <link>https://kevcui.github.io/2017/02/26/why-hexo-why-not-jekyll/</link>
      <pubDate>Sun, 26 Feb 2017 16:40:26 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/02/26/why-hexo-why-not-jekyll/</guid>
      <description>&lt;p&gt;Do you remember several months ago I wrote a post about &lt;a href=&#34;https://kevcui.github.io/2016/11/19/know-how-to-build-github.io-blog-in-3-min/&#34;&gt;how to build github.io blog in 3 min?&lt;/a&gt; At that time, I was kidding that &lt;strong&gt;3 min&lt;/strong&gt; in that post title was actually the &lt;strong&gt;time to finish reading that post&lt;/strong&gt;. But today, I could make this raving come true with &lt;a href=&#34;https://hexo.io/&#34;&gt;hexo&lt;/a&gt;, a super simple and powerful static blog generator. I switched immediately from jekyll to hexo. Really? Why hexo, why not jekyll anymore? 😵&lt;/p&gt;
&lt;h3 id=&#34;a-net-name-is-half-success&#34;&gt;A net name is half-success&lt;/h3&gt;
&lt;p&gt;Everyone has his own taste on naming. Hexo vs. Jekyll which one is cooler? I cannot tell. But which one is net and easy to write. I vote for hexo.&lt;/p&gt;
&lt;p&gt;You probably are not a clumsy-handed person, but unfortunately sometimes I am. I admit that many times I&amp;rsquo;m stupid (or drunken) to write jekyll as jeykll, jekyl, jekeyll&amp;hellip; How about hexo? I think I still need drink more 🍷 in order to make a spelling mistake of hexo.&lt;/p&gt;
&lt;h3 id=&#34;nodejs-home-lovely-home&#34;&gt;Node.js home lovely home&lt;/h3&gt;
&lt;p&gt;Jekyll is powered by ruby. Hexo is powered by Node.js. Personally I&amp;rsquo;m more familiar with js than ruby. Using npm to set up project and install plugins makes me feel super relax like staying at home.&lt;/p&gt;
&lt;p&gt;On the other hand, ruby is also quite interesting to play with. Like dating a beautiful lady for the first time, I&amp;rsquo;ve to understand what she likes and what she doesn&amp;rsquo;t like and then to cater to her pleasure in order to start our relationship. Sometimes I feel embarrassed and ashamed when I made some stupid mistakes and they&amp;rsquo;re unavoidable for a newbie. This feeling will inscribe my nervous level, so uncomfortable :neckbeard:. At the end, the only ting I want is just to set up something in 3 min and spend my time on writing more posts.&lt;/p&gt;
&lt;h3 id=&#34;deployment-its-a-magic&#34;&gt;Deployment? It&amp;rsquo;s a magic!&lt;/h3&gt;
&lt;p&gt;The deployment of hexo is amazing. I add my git repo info in _config.xml then run a simple command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~$ hexo d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Done! What a magic! No need git add, git commit, git push&amp;hellip; It&amp;rsquo;s really continent to write and publish a post.&lt;/p&gt;
&lt;p&gt;Another good thing is that hexo organizes git repo nicely. It contains only the final static html, js and css files. Other setup related file like _config.xml or themes or plugins can be stored separately in different repositories. It&amp;rsquo;s wonderful for person who has OCD.&lt;/p&gt;
&lt;h3 id=&#34;setup-theme-dynamically&#34;&gt;Setup theme dynamically&lt;/h3&gt;
&lt;p&gt;With hexo, there will be no more feeling of frustrated at changing theme. Hexo has an interesting structure to organize &lt;a href=&#34;https://hexo.io/docs/themes.html&#34;&gt;&lt;em&gt;themes&lt;/em&gt;&lt;/a&gt; in a separate folder. Choosing a theme is like switching a cloth. And it&amp;rsquo;s possible to have collect different themes 👗 in your armoire.&lt;/p&gt;
&lt;h3 id=&#34;fast&#34;&gt;Fast&lt;/h3&gt;
&lt;p&gt;Overall, hexo gives me an impression &lt;em&gt;fast&lt;/em&gt;, starting from the command execution with one letter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo s &amp;lt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; hexo server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo g &amp;lt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; hexo generate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo d &amp;lt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; hexo deploy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo cl &amp;lt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; hexo clean
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;According to my needs, compared to Jekyll hexo has a net name, no learning curve, magic deployment, variable themes, and it runs faster. I&amp;rsquo;m quite satisfied with hexo so far. Maybe I will give &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt; a try soon. But who knows when I will switch to the &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;next generator&lt;/a&gt;? 😬&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Failed to Use Calabash for Mobile Testing</title>
      <link>https://kevcui.github.io/2017/01/21/why-i-failed-to-use-calabash-for-mobile-testing/</link>
      <pubDate>Sat, 21 Jan 2017 10:48:00 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/01/21/why-i-failed-to-use-calabash-for-mobile-testing/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*61zMYo0AKZw7F_-UTBgULQ.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;When I give up, I write it down. Someday I will pick myself up from the fall.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;
&lt;p&gt;I admit that I failed to use Calabash for mobile testing. It was a big failure but it was beautiful, I call it &lt;em&gt;reckless passion&lt;/em&gt;. Although I learned a lot from it, I&amp;rsquo;ve never shared what I learned in public. After that, I changed my focus and gave up on traditional UI automation.&lt;/p&gt;
&lt;p&gt;This week, I had some small talks with our awesome developers about test automation. The idea was to implement special UI automated tests, in order to check new product release automatically instead of sanity checking manually by the whole team. I suddenly remembered that I forgot to share my failure with them. I&amp;rsquo;d like to write down in this post, my recklessness and something I learned. In case the team would like to move further on test automation, we could proceed with caution.&lt;/p&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;My story begins back in September 2015, a sunny day. At that moment, I was so confident that our mobile apps are fully mature for automating tests. That day I started a draft plan of test automation. In the following week, I planned everything, I finished my research to find a suitable framework, I started my experiment and even I announced my plan to the team in a non-meeting Tuesday&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;chapter-i-huge-ambitions-but-no-skills&#34;&gt;Chapter I: huge ambitions but no skills&lt;/h3&gt;
&lt;p&gt;I successfully sold my big picture of test automation future too without any oppositions. With UI test automation, I had my dreams:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A dream of brilliant and efficient release process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A dream of full user behavior coverage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A dream of no painful manual regression testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My initial plan is to follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step 1: Build the main structure of test automation framework and create general functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2: Create test scenarios to replace all manual sanity checks of app core features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3: Add new test scenarios to check acceptance criteria of user stories, to verify bug fixes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To start the first step, I choose Calabash&lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; as the framework. The reasons why I pick it because it is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cross-platform: Android and iOS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BDD friendly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pure UI level, no need to dive deep into the code&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me it looks really promising, even I had little knowledge of this tool and scripting using Ruby. My strong passion supports me to start the implementation of Calabash on Android side. It took me at least 2 sprints to make my hands very dirty. I did my best to script, debug, hack&amp;hellip; As the final outputs, I created tons of functions to bind general actions with Gherkin syntax.&lt;/p&gt;
&lt;p&gt;Now it&amp;rsquo;s time to move to the 2nd step, but soon in reality, I found it&amp;rsquo;s hard to simulate user&amp;rsquo;s general actions, for example: a simple action like scroll down on a list. How many times? How far can it scroll, stop at the end or somewhere randomly?&lt;/p&gt;
&lt;p&gt;Then I have to go back and forth between step 1 and step 2, when creating new test scenarios, meanwhile updating general action functions&amp;hellip; I felt troublesome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next time I will ask myself first&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;During planning, &lt;strong&gt;&amp;ldquo;What&amp;rsquo;s the purpose of automation?&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;What&amp;rsquo;s the limitation of automation?&amp;rdquo;&lt;/strong&gt; and &lt;strong&gt;&amp;ldquo;Where to start to automate checks?&amp;rdquo;&lt;/strong&gt;&lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When choosing a tool or framework, &lt;strong&gt;&amp;ldquo;What are the pros and the cons of the tool?&amp;rdquo;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;Does the tool fit all my needs?&amp;rdquo;&lt;/strong&gt; and &lt;strong&gt;&amp;ldquo;Do I have the knowledge to master the tool?&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before starting implementation, &lt;strong&gt;What&amp;rsquo;s the testability of the product?&lt;/strong&gt; and &lt;strong&gt;&amp;ldquo;Do I have a clear architecture and design of test automation?&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chapter-ii-unstable-execution-and-unreliable-result&#34;&gt;Chapter II: unstable execution and unreliable result&lt;/h3&gt;
&lt;p&gt;Finally, I replaced almost all sanity checks by automated checks. I planned to announce the results to the team proudly but actually I didn&amp;rsquo;t. Because after I tried to run tests several times, I found that test executions are not stable and test results are not reliable.&lt;/p&gt;
&lt;h4 id=&#34;unstable-test-execution&#34;&gt;Unstable test execution&lt;/h4&gt;
&lt;p&gt;I created some Android emulators where I launch tests, but the emulator is usually laggy. The frequent timeout of some test steps often destroyed the whole test execution. Then I have to launch tests on the real devices. Timeout issues got fewer. But after one snapshot version, executions were blocked by some small UI changes. After adapted all UI changes, I thought the execution should be smooth but I got the opposite. Due to the differences of the test environment, some test cases are only executable in a production environment, I have to add the mechanism to detect and switch environments.&lt;/p&gt;
&lt;h4 id=&#34;unreliable-test-result&#34;&gt;Unreliable test result&lt;/h4&gt;
&lt;p&gt;The worst thing in test automation is Schrödinger test, aka flaky test. Like ghosts haunting around, it&amp;rsquo;s never sure that the result is failing or passing after a running. I got some flaky tests due to the timing of actions, too many preconditions to fulfill, the changeable input data in production environment, the bugs in framework&amp;hellip;&lt;/p&gt;
&lt;p&gt;A huge test case will also cause unreliable test results. Imagine a 20-step test case, if it&amp;rsquo;s failed in the 5th step, the hidden failure in the rest part is not able to be detected without continuing the execution. On the surface, it&amp;rsquo;s only one failure. But it&amp;rsquo;s possible that the failures of next 15 steps are covered underneath. I separated some huge test cases to small test cases. But in some cases, one step dependents on the app state created by another step. It took the effort to remove dependencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next time I will ask myself first&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do I have a controllable and stable test environment?&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Which test environment for which test case?&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do I have a process to handle flaky tests? Retry, quarantine or remove?&lt;/strong&gt;&lt;sup&gt;&lt;a name=&#34;back3&#34;&gt;&lt;a href=&#34;#link3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is a failed test case clear enough to identify bugs?&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chapter-iii-one-man-show-and-demotivated-maintenance&#34;&gt;Chapter III: one-man show and demotivated maintenance&lt;/h3&gt;
&lt;p&gt;3 months later, I didn&amp;rsquo;t go further in the 3rd step. Because my confidence was torn apart by unreliable results and my passion was extinguished by daily maintenance tasks. I told myself that it&amp;rsquo;s time to give up. Silently I stopped putting my effort to write new tests and maintain test suite.&lt;/p&gt;
&lt;p&gt;2 sprints after, I came back from my vacation. I doubted whether tests were still executable. Then I accessed to the old Calabash repository carefully and executed scripts curiously, as expected, not a single test can start to run.&lt;/p&gt;
&lt;p&gt;Since then, no one, including me, ever mentioned about Calabash test automation. I realized my biggest mistake: I should let the team involve in the entire automation project. So it wouldn&amp;rsquo;t end up now as a ridiculous one-man show.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next time I will ask myself first&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Am I the only one who maintain the whole automation project?&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do I manage to update test suite immediately after code changes?&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How do I measure the test automation whether it&amp;rsquo;s helpful or not?&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fin&#34;&gt;Fin&lt;/h3&gt;
&lt;p&gt;The sad story is over. It triggers the change of test automation definition in my mind. Now I see test automation as a tool&lt;sup&gt;&lt;a name=&#34;back4&#34;&gt;&lt;a href=&#34;#link4&#34;&gt;[4]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; and a tester augmentation&lt;sup&gt;&lt;a name=&#34;back5&#34;&gt;&lt;a href=&#34;#link5&#34;&gt;[5]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. Following this definition, I made a lot of scripts to help me explore products efficiently.&lt;/p&gt;
&lt;p&gt;But somewhere in my mind, I still have my assent of the traditional definition of test automation; Somewhere in my heart, I still have my passion for creating a perfect UI automation for mobile testing. Next time when I restart, I will ask myself the above questions, to explore another path towards the successful &amp;ldquo;UI automation&amp;rdquo;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; Calabash &lt;a href=&#34;http://calaba.sh/&#34;&gt;homepage&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; Oleksii Burdin: &lt;a href=&#34;https://lazytesterua.blogspot.de/2016/02/where-to-start-automation.html&#34;&gt;Where to start to automate your checks?&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link3&#34;&gt;&lt;a href=&#34;#back3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt; Walmyr Filho: &lt;a href=&#34;https://medium.com/the-making-of-appear-in/the-importance-of-dealing-with-flaky-tests-1b69145dee0f#.q5fgedjx0&#34;&gt;The importance of dealing with flaky tests&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link4&#34;&gt;&lt;a href=&#34;#back4&#34;&gt;[4]&lt;/a&gt;&lt;/a&gt; Micheal Bolton: &lt;a href=&#34;http://www.developsense.com/blog/2016/01/a-context-driven-approach-to-automation-in-testing/&#34;&gt;A Context-Driven Approach to Automation in Testing&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link5&#34;&gt;&lt;a href=&#34;#back5&#34;&gt;[5]&lt;/a&gt;&lt;/a&gt; Josh Meieter: &lt;a href=&#34;https://medium.com/salesforce-engineering/tester-augmentation-not-test-automation-1de28269c9a4#.cdq1utnu3&#34;&gt;Tester Augmentation, Not Test Automation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bugshido: Classify Warrior Bugs</title>
      <link>https://kevcui.github.io/2017/01/08/bugshido/</link>
      <pubDate>Sun, 08 Jan 2017 12:31:43 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2017/01/08/bugshido/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*En26YWwPSATot5n4bBjLrw.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Warriors are born to die. Warriors live to be remembered.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The methods to classify a bug are various, depend on its impact, visibility, related component, related testing phase&lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; &amp;hellip; I wonder: if bugs are warriors whom we&amp;rsquo;ve to fight against, what are their classifications? In this post, I&amp;rsquo;m gonna try to explain an interesting bug classification idea, called &lt;strong&gt;Bugshido&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As we all know, &lt;a href=&#34;https://en.wikipedia.org/wiki/Bushido&#34;&gt;Bushido&lt;/a&gt;: 武士道 the &lt;strong&gt;way&lt;/strong&gt; (Dō or Tao) of the &lt;strong&gt;warrior&lt;/strong&gt; (Bushi), is used symbolically in its sense of way, as the right way of existence of warriors. Inspired by Bushido, Bugshido is the way symbolically to determine the existence of different bugs. The idea of Bugshido is based on the way which combines &lt;strong&gt;priority&lt;/strong&gt; and &lt;strong&gt;severity&lt;/strong&gt;&lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Priority: High, Medium, Low&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Severity: Critical, Major, Minor, Trivial&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides the name Bugshido, technically, it&amp;rsquo;s just a metaphor and there is nothing really new about it. Well, maybe itself is funny.&lt;/p&gt;
&lt;p&gt;Now, imagine you are the emperor (developer/PO) rules a country (code base/product). Due to some changes here or there, the evil forces will raise against you. They are gathering warriors to break your country. As your Emperor&amp;rsquo;s adviser (tester), I&amp;rsquo;d like to explain to you how to identify your enemies and the tactic to handle them.&lt;/p&gt;
&lt;h3 id=&#34;geisha&#34;&gt;Geisha&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=79215&amp;amp;type=card&#34; alt=&#34;geisha&#34;&gt;&lt;/p&gt;
&lt;p&gt;Priority: Low&lt;br/&gt;Severity: Minor&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Geisha&#34;&gt;Geisha&lt;/a&gt; barely knows how to fight. All Geisha&amp;rsquo;s skills related to performing arts like music, dance&amp;hellip; Therefore, Geisha is not harmful and sometimes very entertaining. But in some edge cases, when the art a Geisha trained is the martial art, she could become a dangerous assassin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advice: Go to visit them time to time when you&amp;rsquo;re bored.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;sōhei&#34;&gt;Sōhei&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=78684&amp;amp;type=card&#34; alt=&#34;sohei&#34;&gt;&lt;/p&gt;
&lt;p&gt;Priority: Low&lt;br/&gt;Severity: Major&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/S%C5%8Dhei&#34;&gt;Sōhei&lt;/a&gt; is known as the warrior monk. Although warrior monk is the master of martial arts, his initial purpose to fight is to protect people, temple, Buddha&amp;hellip; Monk warriors are usually humble and peaceful. They won&amp;rsquo;t attack unless they&amp;rsquo;re attacked. Even they gonna fight, they will fight defensively. In general, warrior monks stay in their territory quietly. They appear because of the broke environment, which is caused by some small or big changes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advice: Find out the trigger is important. Normally they&amp;rsquo;re tough but there is no need for a long battle. A promise of reform should pacify them. If you choose to collect information and do nothing first, just don&amp;rsquo;t forget to add improvement later by refactoring.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;rōnin&#34;&gt;Rōnin&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=74199&amp;amp;type=card&#34; alt=&#34;Ronin&#34;&gt;&lt;/p&gt;
&lt;p&gt;Priority: High&lt;br/&gt;Severity: Minor&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/R%C5%8Dnin&#34;&gt;Rōnin&lt;/a&gt; was a samurai who becomes masterless. Their skills were highly developed but without the purpose of life, their mind could become weak. They are wandering everywhere in the country and looking for a way to make a living with their sword, no matter good or evil.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advice: Seize the opportunity When they&amp;rsquo;re still weak and eliminate them as soon as possible before they are caught by the evil force.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;samurai&#34;&gt;Samurai&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=50408&amp;amp;type=card&#34; alt=&#34;samurai&#34;&gt;&lt;/p&gt;
&lt;p&gt;Priority: High&lt;br/&gt;Severity: Major&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Samurai&#34;&gt;Samurai&lt;/a&gt; is the highest rank of warriors. The mastery of the sword is one of Samurai&amp;rsquo;s traits. Another one is the loyalty: they believe that the death to serve their Lord is a great honor. They will fight to die in the battle, without blinking an eye. Send shivers down spine, right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advice: Brace yourself, you know a tough fight is impossible to avoid. If you&amp;rsquo;re not sure Samurai&amp;rsquo;s capability, better to ask team members for support.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ninja&#34;&gt;Ninja&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=423530&amp;amp;type=card&#34; alt=&#34;ninja&#34;&gt;&lt;/p&gt;
&lt;p&gt;Priority: High&lt;br/&gt;Severity: Critical&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ninja&#34;&gt;Ninja&lt;/a&gt; exists as a mystery, rather than a warrior. A typical Ninja will hide in the shadow, waiting for a moment to kill the target with one fatal hit. The danger begins when the negligence of Ninja&amp;rsquo;s existence. Even sometimes there is a feeling to tell you that Ninja might be hidden in certain areas, but Ninja performs ninjutsu to keep them &lt;strong&gt;unpredictable&lt;/strong&gt; in the first place.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advice: Unfortunately, most of time Ninja is only found after serious damages are made. The key point is fast-react in order to minimize the losses. Once a Ninja is defeated, take a lesson and learn not to be fooled by the same ninjutsu next time.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;warrior-triage&#34;&gt;Warrior Triage&lt;/h3&gt;
&lt;p&gt;After warrior-showoff is over, let&amp;rsquo;s take a closer look to the triage process. This part describes the battle tactic, it might be a bit boring.&lt;/p&gt;
&lt;h4 id=&#34;ninja-definitely-triggers-a-hotfix&#34;&gt;Ninja definitely triggers a hotfix&lt;/h4&gt;
&lt;p&gt;A Ninja bug needs an urgent fix because it&amp;rsquo;s destructing the core functionality of the product. Everyone in the team, who can contribute efforts, should focus on the fix immediately. Seriously it&amp;rsquo;s the last step before a final checkmate.&lt;/p&gt;
&lt;h4 id=&#34;samurai-blocks-new-product-release&#34;&gt;Samurai blocks new product release&lt;/h4&gt;
&lt;p&gt;A Samurai bug or Ronin bug are considered as high potential dangers. No matter a huge effort is taken to fix Samurai bug or a small effort taken to fix Ronin bug, they have to be fixed before release. In brief, Samurai bug is the release blocker.&lt;/p&gt;
&lt;h4 id=&#34;sohei--geisha-are-about-time&#34;&gt;Sohei &amp;amp; Geisha are about time&lt;/h4&gt;
&lt;p&gt;A Sohei bug or a Geisha bug could exist in product for a long time. Some of them never bother customers once. Their existence proves that nothing is perfect. Rather than keeping them in tracking tools, it&amp;rsquo;s justified to give them a Euthanasia after a specific time by closing them in tracking tool. It&amp;rsquo;s a decision made to balance allocated effort and added value.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;I hope you had a fun of reading. Besides that, now you know &lt;strong&gt;Bugshidao&lt;/strong&gt; to identify a warrior, like Ninja, Samurai, Ronin, Sohei and Geisha. You&amp;rsquo;ve also the basic tactic to deal with them. Last advice I have to give you, my friend, as I always keep it in my mind to warn myself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Wake up! Evil warriors are killing your customers!&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; Defect &lt;a href=&#34;http://softwaretestingfundamentals.com/defect/&#34;&gt;Classification&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; Dan Ashby: &lt;a href=&#34;https://danashby.co.uk/2013/05/07/what-about-priority-and-severity/&#34;&gt;What about Priority and Severity&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Have Some Fun! Team Testing</title>
      <link>https://kevcui.github.io/2016/12/01/lets-have-some-fun-team-exploratory-testing/</link>
      <pubDate>Thu, 01 Dec 2016 21:37:35 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2016/12/01/lets-have-some-fun-team-exploratory-testing/</guid>
      <description>&lt;p class=&#34;coverimage&#34;&gt;
    &lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*sonAggQw-dsCFHGrcozMfg.jpeg&#34; alt=&#34;coverimage&#34;/&gt;
    
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Testing is something that we do with the motivation of finding new information.&amp;rdquo; &amp;ndash; Michael Bolton&lt;sup&gt;&lt;a name=&#34;back1&#34;&gt;&lt;a href=&#34;#link1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;damn-old-picture-of-team-testing&#34;&gt;&lt;strong&gt;Damn old picture of team testing&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When we talk about team testing, I guess many of you will image a picture in your mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;People are sitting around a table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everyone gets a paper in front of them. This paper could be a checklist full of test steps, could be a sheet full of test scenarios&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When testing starts, people follow same test cases on the paper, step by step &amp;ldquo;testing&amp;rdquo; product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Soon, People look like a robot: they look at paper and write down the answer &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;expected result&amp;rdquo;, &amp;ldquo;pass&amp;rdquo;, &amp;ldquo;no&amp;rdquo;&amp;hellip; Someone will collect paper and check pass/fail&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, pretty like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.qalogictesting.com/wp-content/uploads/2015/06/dtest.jpg&#34; alt=&#34;&#34;&gt;&lt;sup&gt;&lt;a name=&#34;back2&#34;&gt;&lt;a href=&#34;#link2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m always asking myself. If I&amp;rsquo;m one of these guys participating this the kind of team testing, would I be bored to die? What&amp;rsquo;s the problem here?&lt;/p&gt;
&lt;p&gt;Why not make team testing like taking a challenge, playing a game, exploring around?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://oscarandpatch.co.uk/image_uploads_mce/testing-team.jpg&#34; alt=&#34;&#34;&gt;&lt;sup&gt;&lt;a name=&#34;back3&#34;&gt;&lt;a href=&#34;#link3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;lets-have-some-fun&#34;&gt;&lt;strong&gt;Let&amp;rsquo;s have some fun!&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;_people-are-sitting-around-a-table_-nope-&#34;&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;People are sitting around a table.&amp;rdquo;&lt;/em&gt; Nope! 🙅‍♀️&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Instead of limiting people to focus on his own stuff, I really like to make people pair together and let them share a &amp;ldquo;test challenge&amp;rdquo;. They can do testing together no matter where they want. Pairing together in team testing is a good test strategy for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Making comparison&lt;/strong&gt;: when it needs to know if different platforms, different versions have different behaviors&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exchanging idea&lt;/strong&gt;: when someone comes to an idea, (s)he can immediately try with her/his testing partner&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remembering findings&lt;/strong&gt;: when something found, (s)he can show to her/his partner how to reproduce&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Training newcomer&lt;/strong&gt;: when a new team member is joining, (s)he is not quite familiar with product&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;_everyone-gets-a-paper-in-front-of-them-this-paper-could-be-a-checklist-full-of-test-steps-could-be-a-sheet-full-of-test-scenarios_-nope-&#34;&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;Everyone gets a paper in front of them. This paper could be a checklist full of test steps, could be a sheet full of test scenarios&amp;hellip;&amp;rdquo;&lt;/em&gt; Nope! 🙅‍♀️&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;In my team testing, there is no checklist, no test scenarios. I call them &lt;strong&gt;mission&lt;/strong&gt; and &lt;strong&gt;challenge&lt;/strong&gt;. My thought here: Do exploring, not checking, because exploring is more exciting. I prefer to describe simply a challenge in one sentence using &lt;strong&gt;CAR&lt;/strong&gt; model (it&amp;rsquo;s the first name comes to my mind&amp;hellip;). CAR stands for &lt;strong&gt;C&lt;/strong&gt;ondition,  &lt;strong&gt;A&lt;/strong&gt;ction and &lt;strong&gt;R&lt;/strong&gt;esult. A simple example:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ondition: GPS on&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;ction:  open app&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;esult: my current location was shown&lt;/p&gt;
&lt;p&gt;Then the challenge is: When phone GPS turned on, I open app, should I see my current location shown correctly?&lt;/p&gt;
&lt;p&gt;For a 30min testing session, in a mission, 10-15 challenges are recommended. Above 15 is too much, because when people are getting tired, no fun :(&lt;/p&gt;
&lt;h4 id=&#34;_when-testing-starts-people-follow-same-test-cases-on-the-paper-step-by-step_-nope-&#34;&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;When testing starts, people follow same test cases on the paper, step by step&amp;hellip;&amp;rdquo;&lt;/em&gt; Nope! 🙅‍♀️&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Using CAR model, it&amp;rsquo;s easy to remove useless test steps and to modify them dynamically according to tests.&lt;/p&gt;
&lt;p&gt;For example, we&amp;rsquo;re focusing on a new feature to reserve vehicle from vehicle list. Then the challenge is: &lt;strong&gt;When my test account is logged in, I pick a vehicle in list, should I be able to reserve vehicle?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If next time, we want to test general reservation function. Then the challenge is: &lt;strong&gt;When my test account is logged in, I pick a vehicle in list or on map, should I be able to reserve vehicle?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Or it can be separated into 2 challenges:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When my test account is logged in, I pick a vehicle in list, should I be able to reserve vehicle?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When my test account is logged in, I pick a vehicle on map, should I be able to reserve vehicle?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And I will put them to the different &lt;strong&gt;missions&lt;/strong&gt; for different participants.&lt;/p&gt;
&lt;h4 id=&#34;_soon-people-look-like-a-robot-they-look-at-paper-and-write-down-the-answer-someone-will-collect-paper-and-check-passfail_-nope-&#34;&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;Soon, People look like a robot: they look at paper and write down the answer&amp;hellip; Someone will collect paper and check pass/fail&amp;rdquo;&lt;/em&gt; Nope! 🙅‍♀️&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Usually I set up a simple finding-wall, like blow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             iOS     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    Android
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Major                &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Minor                &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;?                    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Column: platform&lt;/p&gt;
&lt;p&gt;Row: major findings, minor findings and unclear findings (needs to discuss)&lt;/p&gt;
&lt;p&gt;All participants will put findings on the wall during team testing. After testing, they will be taken down one by one and fixed one by one.&lt;/p&gt;
&lt;p&gt;If you ask me how about that mission-paper? I will destroy them immediately after testing and let it be a secret mission.&lt;/p&gt;
&lt;h3 id=&#34;expected-result&#34;&gt;&lt;strong&gt;Expected result&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;After participating this team exploratory testing, you will probably think &amp;ldquo;I&amp;rsquo;d like to test more next time!&amp;rdquo;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;link1&#34;&gt;&lt;a href=&#34;#back1&#34;&gt;[1]&lt;/a&gt;&lt;/a&gt; Michael Bolton: &lt;a href=&#34;http://www.developsense.com/blog/2009/08/testing-vs-checking/&#34;&gt;Testing vs. Checking&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link2&#34;&gt;&lt;a href=&#34;#back2&#34;&gt;[2]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://www.qalogictesting.com/wp-content/uploads/2015/06/dtest.jpg&#34;&gt;Damn round table team testing&lt;/a&gt;
&lt;br/&gt;
&lt;a name=&#34;link3&#34;&gt;&lt;a href=&#34;#back3&#34;&gt;[3]&lt;/a&gt;&lt;/a&gt; &lt;a href=&#34;http://oscarandpatch.co.uk/image_uploads_mce/testing-team.jpg&#34;&gt;Children play around&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Know How to Build github.io Blog in 3 min?</title>
      <link>https://kevcui.github.io/2016/11/19/know-how-to-build-github.io-blog-in-3-min/</link>
      <pubDate>Sat, 19 Nov 2016 13:00:00 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2016/11/19/know-how-to-build-github.io-blog-in-3-min/</guid>
      <description>&lt;p&gt;I write this tutorial with some notes about how to build a github.io blog, because I was struggling a bit on it (well, I&amp;rsquo;m a dummy). Hope this post will give you a clear view and make you enjoy the build-up phrase. Then after that, you could &lt;strong&gt;waste&lt;/strong&gt; some of your time on customizing your own awesome blog. 😉&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(What about 3 min? It&amp;rsquo;s the time to read this post&amp;hellip;)&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;brstep-0-know-_things_-first&#34;&gt;&lt;br/&gt;STEP 0: Know &lt;em&gt;things&lt;/em&gt; first&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/join/&#34;&gt;GitHub account&lt;/a&gt;: If you don&amp;rsquo;t have one, what are you waiting for? Just get one ;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;: It&amp;rsquo;s designed to host your personal, organization, or project pages directly from a GitHub repository.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jeykll&lt;/a&gt;: It transfers plain text into static websites and blogs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;brstep-1-why&#34;&gt;&lt;br/&gt;STEP 1: Why?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s really simple, compared to WordPress&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s interesting to write post with Markdown ^^&lt;/li&gt;
&lt;li&gt;You will tell me&amp;hellip; 😄&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;brstep-2-pick-theme&#34;&gt;&lt;br/&gt;STEP 2: Pick theme&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A list of some nice jekyll &lt;a href=&#34;https://github.com/jekyll/jekyll/wiki/Themes&#34;&gt;themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check theme demos and pick favorite one&lt;/li&gt;
&lt;li&gt;Open GitHub and check source page ☕&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;brstep-3-fork-it&#34;&gt;&lt;br/&gt;STEP 3: Fork-it&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fork the theme repository to your &lt;strong&gt;&lt;em&gt;username&lt;/em&gt;.github.io&lt;/strong&gt;, where &lt;em&gt;username&lt;/em&gt; is your own username on GitHub.
(&lt;em&gt;#Eg: my repository for this blog is &lt;strong&gt;kevcui.github.io&lt;/strong&gt;&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Clone it to your local&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~ $ git clone https://github.com/username/username.github.io my-blog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;brstep-4-configure-it&#34;&gt;&lt;br/&gt;STEP 4: Configure-it&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go to my-blog&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~ $ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; my-blog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;_config.yml&lt;/strong&gt; and modify&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;your-blog-title&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;your-blog-description&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://username.github.io&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;baseurl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gems &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;jekyull-paginate&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;jemoji&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;⚠️ Empty &lt;strong&gt;baseurl&lt;/strong&gt; or change it to &lt;strong&gt;/&lt;/strong&gt; depends on theme. Otherwise, some themes may not work correctly.&lt;br&gt;
👊 jemoji!&lt;/p&gt;
&lt;h3 id=&#34;brstep-5-test-it&#34;&gt;&lt;br/&gt;STEP 5: Test-it&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Run locally&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~ $ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; my-blog
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~ $ jekyll serve
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; Now browse to http://localhost:4000/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;brstep-6-post-it&#34;&gt;&lt;br/&gt;STEP 6: Post-it&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create a post in &lt;strong&gt;_post&lt;/strong&gt;, name it &lt;strong&gt;YEAR-MONTH-DAY-title.md&lt;/strong&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title: &amp;#34;How to build github.io blog in 3 min?&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date:  2016-11-18 23:25:28 +0200
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;⚠️ Be careful of date format &lt;strong&gt;YYYY-MM-DD HH:MM:SS +/-TTTT&lt;/strong&gt;, TTTT is timezone offset&lt;/p&gt;
&lt;h3 id=&#34;brstep-7-publish-it&#34;&gt;&lt;br/&gt;STEP 7: Publish-it&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;git add, git commit, git push :octocat:&lt;/li&gt;
&lt;li&gt;Browse your new blog &lt;strong&gt;&lt;a href=&#34;https://username.github.io&#34;&gt;https://username.github.io&lt;/a&gt;&lt;/strong&gt;  👯‍♀️&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;brhelpful-links&#34;&gt;&lt;br/&gt;Helpful links:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Basic syntax help for &lt;a href=&#34;https://daringfireball.net/projects/markdown/basics&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub basic formatting &lt;a href=&#34;https://help.github.com/articles/basic-writing-and-formatting-syntax/&#34;&gt;syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Emoji &lt;a href=&#34;https://www.webpagefx.com/tools/emoji-cheat-sheet/&#34;&gt;Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jekyll &lt;a href=&#34;https://jekyllrb.com/docs/usage/&#34;&gt;usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jekyll Uno &lt;a href=&#34;https://github.com/joshgerdes/jekyll-uno&#34;&gt;theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Blogging!</title>
      <link>https://kevcui.github.io/2016/11/18/hello-world/</link>
      <pubDate>Fri, 18 Nov 2016 22:09:23 +0200</pubDate>
      
      <guid>https://kevcui.github.io/2016/11/18/hello-world/</guid>
      <description>&lt;p&gt;This is my f1rst bl0g. Yep, it&amp;rsquo;s als0 a test blog to check theme&lt;/p&gt;
&lt;p&gt;pןɹoʍ oןןǝɥ&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.giphy.com/2f7RQiiWMJc40.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
